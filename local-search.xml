<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lexcial</title>
    <link href="/2021/01/25/lex/"/>
    <url>/2021/01/25/lex/</url>
    
    <content type="html"><![CDATA[<h2 id="regex-to-nfa"><a class="markdownIt-Anchor" href="#regex-to-nfa"></a> Regex to NFA</h2><h3 id="thompsons-algorithm"><a class="markdownIt-Anchor" href="#thompsons-algorithm"></a> Thompson’s Algorithm</h3><p><img src="../image/reg.png" srcset="/img/loading.gif" alt="" /></p><p>Using the above basic elements, we can construct NFA recursively.</p><h3 id="data-struct"><a class="markdownIt-Anchor" href="#data-struct"></a> Data Struct</h3><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NFA_Node</span>&#123;</span>    NFA_Node* next_edge1_&#123;<span class="hljs-literal">nullptr</span>&#125;,*next_edge2_&#123;<span class="hljs-literal">nullptr</span>&#125;;    <span class="hljs-comment">// every node only have at most two edge in Thompson's Algorithm</span>    <span class="hljs-comment">// </span>    <span class="hljs-keyword">char</span> value_&#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">// 1 : accepted state</span>    <span class="hljs-comment">// 0 : non-accepted state</span>    <span class="hljs-comment">// State state_&#123;&#125;; </span>    <span class="hljs-keyword">int</span> id_ = <span class="hljs-number">-1</span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(NFA_Node* to)</span></span>;&#125;;</code></pre><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NFA</span>&#123;</span>    NFA_Node* start_&#123;<span class="hljs-literal">nullptr</span>&#125;,*end_&#123;<span class="hljs-literal">nullptr</span>&#125;;<span class="hljs-keyword">public</span>:    <span class="hljs-comment">// NFA(NFA_Node* start,NFA_Node* end):start_(start),end_(end)&#123;&#125;</span>    NFA(<span class="hljs-keyword">char</span> ch);    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">concat</span><span class="hljs-params">(NFA* to)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">un</span><span class="hljs-params">(NFA* second)</span></span>;&#125;;</code></pre><h3 id="implement"><a class="markdownIt-Anchor" href="#implement"></a> Implement</h3><p>evaluating a arithmetic expressions:</p><p>using a operator number stack and a operand stack.</p><ol><li>if it’s a number, push it on stack</li><li>if it’s a oprand<ul><li>it’s <code>(</code> : push on the stack</li><li>it’s <code>)</code> : pop and evaluate until <code>(</code></li><li>if the priority of oprand in the top of stack greater than the current oprand, pop and evalation until current priority greater that the top’s of stack then push it on stack</li></ul></li><li>pop and evaluate the reminder elements in stack</li></ol><p>evaluating a regex expression is similar to evaluating arithmetic expressions. The difference is that the star operation only pops one element from the stack. Additionally, the concatenation operation is not denoted by any symbol, so we would have to detect it. We insert <code>.</code> into regex to represent concatenation operation.</p><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> isOprand = [](<span class="hljs-keyword">char</span> ch)&#123;    <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'|'</span> || ch == <span class="hljs-string">'('</span> || ch == <span class="hljs-string">')'</span> || ch == <span class="hljs-string">'*'</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;;<span class="hljs-built_in">string</span> s;<span class="hljs-keyword">int</span> prev = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; reg.<span class="hljs-built_in">size</span>();i++)&#123;    <span class="hljs-keyword">if</span>(!isOprand(reg[i]))&#123;        <span class="hljs-keyword">if</span>(prev) s += <span class="hljs-string">'.'</span>;        prev = <span class="hljs-number">1</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        prev = <span class="hljs-number">0</span>;    &#125;    s += reg[i];&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>compiler</tag>
      
      <tag>regex</tag>
      
      <tag>NFA</tag>
      
      <tag>DFA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/01/09/git/"/>
    <url>/2021/01/09/git/</url>
    
    <content type="html"><![CDATA[<h2 id="the-three-states"><a class="markdownIt-Anchor" href="#the-three-states"></a> The Three States</h2><ul><li><strong>Modified</strong> : have changed the file but not commited to the database.</li><li><strong>Staged</strong> : have marked a modifed file in its current to be your next commit snapshot</li><li><strong>Committed</strong> : the data have been stored in local database</li></ul><h2 id="viewing-your-staged-and-unstaged-changes"><a class="markdownIt-Anchor" href="#viewing-your-staged-and-unstaged-changes"></a> Viewing Your Staged and Unstaged Changes</h2><ul><li><code>git diff</code> : compares what is in your working directory with what is in your staging area.</li><li><code>git diff --staged</code> : compares your staged changes to your last commit</li></ul><h2 id="removing-files"><a class="markdownIt-Anchor" href="#removing-files"></a> Removing Files</h2><ul><li><p><code>git rm PROJECTS.md</code> : untrack “<a href="http://PROJECTS.md" target="_blank" rel="noopener">PROJECTS.md</a>”</p></li><li><p><code>git rm --cached README</code> : keep the file on your hard drive but not have Git track it anymore.</p></li></ul><h2 id="moving-files"><a class="markdownIt-Anchor" href="#moving-files"></a> Moving Files</h2><p><code>$ git mv file_from file_to</code> is equivalent to running something like this:</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mv README.md README</span><span class="hljs-meta">$</span><span class="bash"> git rm README.md</span><span class="hljs-meta">$</span><span class="bash"> git add README</span></code></pre><h2 id="undoing-things"><a class="markdownIt-Anchor" href="#undoing-things"></a> Undoing Things</h2><p>when you commit early and forget to add some files, redo that commit, stage changes, and commit again using <code>--amend</code>.</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit --amend</span></code></pre><p>the second commit will replace the first.</p><h2 id="unstaging-a-staged-file"><a class="markdownIt-Anchor" href="#unstaging-a-staged-file"></a> Unstaging a Staged File</h2><ul><li><code>git restore --staged</code> : unstage a staged file</li><li><code>git restore</code> : unmodifying a modified file with git restore</li></ul><h1 id="git-branching"><a class="markdownIt-Anchor" href="#git-branching"></a> Git Branching</h1><p><img src="../image/PE/checkout-master.png" srcset="/img/loading.gif" alt="" /></p><ul><li><p>branch : a pointer to these commited metadata</p></li><li><p>HEAD point to current branch</p></li><li><p><code>git checkout</code> switch branch</p></li><li><p><code>git branch -d</code> delete branch</p></li><li><p>rename a branch<br /><code>$ git branch --move bad-branch-name corrected-branch-name</code><br />push to remote<br /><code>$ git push --set-upstream origin corrected-branch-name</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql</title>
    <link href="/2021/01/02/sql/"/>
    <url>/2021/01/02/sql/</url>
    
    <content type="html"><![CDATA[<h2 id="sql-query"><a class="markdownIt-Anchor" href="#sql-query"></a> SQL query</h2><ol><li>Generate a Cartesian product of the relations listed in the from clause.</li><li>Apply the predicates specified in the where clause on the result of Step 1.</li><li>For each tuple in the result of Step 2, output the attributes (or results of expressions) specified in the select clause.</li></ol><h3 id="the-rename-operation"><a class="markdownIt-Anchor" href="#the-rename-operation"></a> The Rename Operation</h3><p>result column rename</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">as</span> instructor_name, course_id<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> instructor.ID= teaches.ID;</code></pre><p>we wish to compare tuples in the same relation.</p><p>Find the names of all instructor whose salary is greater than at least one instructor in the <strong>Biology</strong> department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> T.name<span class="hljs-keyword">from</span> instructor <span class="hljs-keyword">as</span> T, instructor <span class="hljs-keyword">as</span> S<span class="hljs-keyword">where</span> T.salary &gt; S.salary <span class="hljs-keyword">and</span> S.dept_name=<span class="hljs-string">'Biology'</span>;</code></pre><h3 id="basic-string-operations"><a class="markdownIt-Anchor" href="#basic-string-operations"></a> Basic String Operations</h3><p>String concatenation (using <code>||</code>)</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">'hello'</span> || <span class="hljs-string">'world'</span>;</code></pre><p><code>upper(s)</code>,<code>lower(s)</code>,<code>trim(s)</code></p><h4 id="pattern-matching"><a class="markdownIt-Anchor" href="#pattern-matching"></a> Pattern matching</h4><ul><li><code>%</code> matches any substring.</li><li><code>_</code> matches any character.</li></ul><p>Using <code>like</code> expresses pattern</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept<span class="hljs-keyword">name</span><span class="hljs-keyword">from</span> department<span class="hljs-keyword">where</span> building <span class="hljs-keyword">like</span> <span class="hljs-string">'%Watson%'</span>;</code></pre><p>using <code>escape</code> define escape character</p><ul><li><code>like 'ab∖%cd%' escape '∖'</code> matches all strings beginning with “ab%cd”.</li><li><code>like 'ab∖∖cd%' escape '∖'</code> matches all strings beginning with “ab∖cd”.</li><li></li></ul><h4 id="attribute-specification-in-the-select-clause"><a class="markdownIt-Anchor" href="#attribute-specification-in-the-select-clause"></a> Attribute Specification in the Select Clause</h4><p>using <code>*</code> int the <strong>select</strong> to denote “all attributes”</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> instructor.*<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> instructor.ID= teaches.ID;</code></pre><h4 id="ordering-the-display-of-tuples"><a class="markdownIt-Anchor" href="#ordering-the-display-of-tuples"></a> Ordering the Display of Tuples</h4><p>The <strong>order by</strong> clause causes the tuples in the result of a query to appear in sorted<br />order.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> salary <span class="hljs-keyword">desc</span>, <span class="hljs-keyword">name</span> <span class="hljs-keyword">asc</span>;</code></pre><p>using the notation (v1, v2, … , vn) denote a tuple of arity n containing values v1, v2, … , vn;</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> (instructor.ID, dept_name) = (teaches.ID, <span class="hljs-string">'Biology'</span>);</code></pre><h3 id="set-operations"><a class="markdownIt-Anchor" href="#set-operations"></a> Set Operations</h3><ul><li>The set of all courses taught in the Fall 2017 semester:</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>;</code></pre><ul><li>The set of all courses taught in the Spring 2018 semester:</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>;</code></pre><h4 id="union"><a class="markdownIt-Anchor" href="#union"></a> Union</h4><p>Finding the set of all courses taught either in Fall 2017 or in Spring 2018, or both.</p><p><code>union</code> elimates duplicates, <code>union all</code> retain duplicates.</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">union</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h4 id="intersect"><a class="markdownIt-Anchor" href="#intersect"></a> Intersect</h4><p>Finding the set of all courses taught in both the Fall 2017 and Spring 2018.<br /><code>intersect</code> elimates duplicates, <code>intersect all</code> retain duplicates.</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">intersect</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h4 id="except"><a class="markdownIt-Anchor" href="#except"></a> Except</h4><p>Finding all courses taught in the Fall 2017 semester but not in the Spring 2018 semester</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">except</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h3 id="aggregate-functions"><a class="markdownIt-Anchor" href="#aggregate-functions"></a> Aggregate Functions</h3><ul><li>Average: <code>avg</code></li><li>Minimum: <code>min</code></li><li>Maximum: <code>max</code></li><li>Total: <code>sum</code></li><li>Count: <code>count</code></li></ul><h4 id="aggregation-with-grouping"><a class="markdownIt-Anchor" href="#aggregation-with-grouping"></a> Aggregation with Grouping</h4><ul><li>The attribute or attributes given in the group by clause are used to form groups.</li></ul><p>Find the average salary in each department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span> (salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name;</code></pre><h4 id="the-having-clause"><a class="markdownIt-Anchor" href="#the-having-clause"></a> The Having Clause</h4><p>a condition that applies to groups rather than to tuples.</p><p>Finding those departments where the average salary of the instructors is more than $42,000.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_name,<span class="hljs-keyword">avg</span>(salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> salary<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name<span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(salary) &gt; <span class="hljs-number">42000</span>;</code></pre><h3 id="nested-subqueries"><a class="markdownIt-Anchor" href="#nested-subqueries"></a> Nested Subqueries</h3><h4 id="set-membership"><a class="markdownIt-Anchor" href="#set-membership"></a> Set Membership</h4><p><code>in</code> or <code>not in</code> test for set membership</p><p>Find those courses that were taught in the Fall 2017 and that appear in the set of courses obtained in the subquery.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester=<span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>=<span class="hljs-number">2017</span> <span class="hljs-keyword">and</span> course_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester=<span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>=<span class="hljs-number">2018</span>);</code></pre><p><code>in</code> and <code>not in</code> can be used on enumerated sets</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">name</span><span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">'Mozart'</span>,<span class="hljs-string">'Einstein'</span>);</code></pre><h4 id="set-comparison"><a class="markdownIt-Anchor" href="#set-comparison"></a> Set Comparison</h4><p>Find the names of all instructors whose salary is greater than at least one instructor in the Biology department.</p><p><code>some</code> means at least one</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> instuctor<span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">some</span>(<span class="hljs-keyword">select</span> salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">where</span> dept_name=<span class="hljs-string">'Biology'</span>);``` <span class="hljs-comment">#### Subqueries in the From Clause</span>Find the average instructors’ salaries of those departmentswhere the average salary is greater than $42,000.```sql<span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span>salary<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span> (salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name)<span class="hljs-keyword">where</span> avg_salary &gt; <span class="hljs-number">42000</span>;</code></pre><p>Find the maximum across all departments<br />of the total of all instructors’ salaries in each department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(tot_salary)<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> dept_name,<span class="hljs-keyword">sum</span>(salary)<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name) <span class="hljs-keyword">as</span> dept_total(dept_name,tot_salary);</code></pre><h2 id="intermediate-sql"><a class="markdownIt-Anchor" href="#intermediate-sql"></a> Intermediate SQL</h2><h3 id="join-expressions"><a class="markdownIt-Anchor" href="#join-expressions"></a> Join Expressions</h3><h4 id="the-natural-join"><a class="markdownIt-Anchor" href="#the-natural-join"></a> The Natural Join</h4><p>The <code>natural join</code> operation, unlike Cartesian product of two relations, only considers those pairs of tuples with the same value on those attributes that appear in the schemas of both relations.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> student, takes<span class="hljs-keyword">where</span> student.ID = takes.ID;</code></pre><p>equals</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> takes;</code></pre><p>because two relations have the same attribute <strong>ID</strong></p><p>The operation <code>join … using</code> requires a list of attribute to be specified. All attributes must have the same value.</p><p>List the names of students along with the titles of courses that they have taken.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,title<span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> tasks,course<span class="hljs-keyword">where</span> tasks.course_id == course.course_id;</code></pre><p>note that <code>tasks.course_id</code> from the result of natural join and <code>course_id</code> is from tasks.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,title<span class="hljs-keyword">from</span> (student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> tasks) <span class="hljs-keyword">join</span> course <span class="hljs-keyword">using</span>(course_id);</code></pre><h4 id="join-conditions"><a class="markdownIt-Anchor" href="#join-conditions"></a> Join Conditions</h4><p>The <code>on</code> condation allows a general predicate over the relation being joined.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.ID <span class="hljs-keyword">as</span> <span class="hljs-keyword">ID</span>, <span class="hljs-keyword">name</span>, dept_name, tot_cred,    course_id, sec_id, semester, <span class="hljs-keyword">year</span>, grade<span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> takes <span class="hljs-keyword">on</span> student.ID = takes.ID;</code></pre><h4 id="outer-joins"><a class="markdownIt-Anchor" href="#outer-joins"></a> Outer Joins</h4><p>The <strong>out-join</strong> preserve some tuples missed in join.</p><ul><li><code>left outer join</code> preserve tuples only in the named before (to the left) <strong>left outer join</strong> operation.</li><li><code>left outer join</code> preserve tuples only in the named after (to the right) <strong>left outer join</strong> operation.</li><li>The <code>full outer join</code> preserves tuples in both relations.</li></ul><p>That do not preserve nonmatched tuples are called <strong>inner join</strong>.</p><p>outer join operation</p><ol><li>compute inner join</li><li>for every tuples in the left relation that do not match any tuple in the right relation in the inner join, add a tuple with null of right attributes to the result</li></ol><p>Find all students who have not taken a course.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">ID</span><span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> tasks<span class="hljs-keyword">where</span> course_id == <span class="hljs-literal">null</span>;</code></pre><p>Display<br />a list of all students in the Comp. Sci. department, along with the course sections, if<br />any, that they have taken in Spring 2017; all course sections from Spring 2017 must be displayed, even if no student from the Comp. Sci. department has taken the course<br />section.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> dept_name == <span class="hljs-string">'Comp.Sci.'</span>)<span class="hljs-keyword">natural</span> <span class="hljs-keyword">full</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tasks <span class="hljs-keyword">where</span> semester == <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span> == <span class="hljs-number">2017</span>);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux programing</title>
    <link href="/2020/10/09/linux/"/>
    <url>/2020/10/09/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="interaction-with-the-execution-environment"><a class="markdownIt-Anchor" href="#interaction-with-the-execution-environment"></a> Interaction With the Execution environment</h1><h2 id="using-getopt_long"><a class="markdownIt-Anchor" href="#using-getopt_long"></a> Using getopt_long</h2><p><code>#include &lt;getopt.h&gt;</code><br />for example:<br /><code>$ program -h -v -o name</code></p><p><code>const char* const short_options = &quot;ho:v&quot;;</code><br /><code>:</code>indicate a argument followed</p><pre><code class="hljs c"><span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">long_options</span>[] = &#123;</span>    <span class="hljs-comment">// long option,has argument,NULL,short option</span>&#123; <span class="hljs-string">"help"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'h'</span> &#125;,&#123; <span class="hljs-string">"output"</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'0'</span> &#125;,&#123; <span class="hljs-string">"verbose"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'v'</span> &#125;,&#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;    <span class="hljs-comment">// ended with 0</span>&#125;;</code></pre><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;getopt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-comment">/* The name of this program. */</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* program_name;<span class="hljs-comment">/* Prints usage information for this program to STREAM (typically</span><span class="hljs-comment">stdout or stderr), and exit the program with EXIT_CODE. Does not</span><span class="hljs-comment">return. */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_usage</span> <span class="hljs-params">(FILE* stream, <span class="hljs-keyword">int</span> exit_code)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">fprintf</span> (stream, <span class="hljs-string">"Usage: %s options [ inputfile ... ]\n"</span>, program_name);    <span class="hljs-built_in">fprintf</span> (stream,    <span class="hljs-string">" -h --help Display this usage information.\n"</span>    <span class="hljs-string">" -o --output filename Write output to file.\n"</span>    <span class="hljs-string">" -v --verbose Print verbose messages.\n"</span>);    <span class="hljs-built_in">exit</span> (exit_code);&#125;<span class="hljs-comment">/* Main program entry point. ARGC contains number of argument list</span><span class="hljs-comment">elements; ARGV is an array of pointers to them. */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> next_option;    <span class="hljs-comment">/* A string listing valid short options letters. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> short_options = <span class="hljs-string">"ho:v"</span>;    <span class="hljs-comment">/* An array describing valid long options. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">long_options</span>[] = &#123;</span>    <span class="hljs-comment">// long option,has argument,NULL,short option</span>&#123; <span class="hljs-string">"help"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'h'</span> &#125;,&#123; <span class="hljs-string">"output"</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'0'</span> &#125;,&#123; <span class="hljs-string">"verbose"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'v'</span> &#125;,&#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;&#125;;    <span class="hljs-comment">// ended with 0</span>    <span class="hljs-comment">/* The name of the file to receive program output, or NULL for</span><span class="hljs-comment">    standard output. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* output_filename = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">/* Whether to display verbose messages. */</span>    <span class="hljs-keyword">int</span> verbose = <span class="hljs-number">0</span>;    <span class="hljs-comment">/* Remember the name of the program, to incorporate in messages.</span><span class="hljs-comment">    The name is stored in argv[0]. */</span>    program_name = argv[<span class="hljs-number">0</span>];    <span class="hljs-keyword">do</span> &#123;        next_option = getopt_long (argc, argv, short_options,        long_options, <span class="hljs-literal">NULL</span>);        <span class="hljs-keyword">switch</span> (next_option)        &#123;        <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>: <span class="hljs-comment">/* -h or --help */</span>            <span class="hljs-comment">/* User has requested usage information. Print it to standard</span><span class="hljs-comment">            output, and exit with exit code zero (normal termination). */</span>            print_usage (<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);        <span class="hljs-keyword">case</span> <span class="hljs-string">'o'</span>: <span class="hljs-comment">/* -o or --output */</span>            <span class="hljs-comment">/* This option takes an argument, the name of the output file. */</span>            output_filename = optarg;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">'v'</span>: <span class="hljs-comment">/* -v or --verbose */</span>            verbose = <span class="hljs-number">1</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">'?'</span>: <span class="hljs-comment">/* The user specified an invalid option. */</span>            <span class="hljs-comment">/* Print usage information to standard error, and exit with exit</span><span class="hljs-comment">            code one (indicating abnormal termination). */</span>            print_usage (<span class="hljs-built_in">stderr</span>, <span class="hljs-number">1</span>);        <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>: <span class="hljs-comment">/* Done with options. */</span>            <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>: <span class="hljs-comment">/* Something else: unexpected. */</span>            <span class="hljs-built_in">abort</span> ();        &#125;    &#125;    <span class="hljs-keyword">while</span> (next_option != <span class="hljs-number">-1</span>);    <span class="hljs-comment">/* Done with options. OPTIND points to first nonoption argument.</span><span class="hljs-comment">    For demonstration purposes, print them if the verbose option was</span><span class="hljs-comment">    specified. */</span>&#125;;</code></pre><h2 id="standard-io"><a class="markdownIt-Anchor" href="#standard-io"></a> Standard I/O</h2><ul><li><code>stdin</code></li><li><code>stdout</code> default line buffered</li><li><code>stderr</code> default no buffered</li></ul><p><code>fprint(stderr,msg)</code></p><p><code>$ program &gt; output_file.txt 2&gt;&amp;1</code><br /><code>$ program 2&gt;&amp;1 | filter</code><br /><code>2&gt;&amp;1</code> indicate fd <strong>2</strong>(<code>stderr</code>) merged into fd <strong>1</strong>(<code>stdout</code>)</p><h2 id="the-environment"><a class="markdownIt-Anchor" href="#the-environment"></a> The Environment</h2><ul><li>access environment variable value using <code>$varname</code>.<br /><code>$ echo $HOME</code><br /><code>$ echo $PATH</code></li><li>export variable<br /><code>$ export HOME=&quot;/bin&quot;</code></li><li>functions in <code>&lt;stdlib.h&gt;</code><br /><code>char *getenv (const char *__name)</code><br /><code>int setenv (const char *__name, const char *__value, int __replace)</code></li></ul><h1 id="ipc"><a class="markdownIt-Anchor" href="#ipc"></a> IPC</h1><h2 id="pipe"><a class="markdownIt-Anchor" href="#pipe"></a> Pipe</h2><p><code>pipe(int* fds)</code> create a pipe, fds[0] is read end, dfs[1] is write end.<br /><code>int dup2(int oldfd, int newfd)</code>, newfd equated file with oldfd</p><h3 id="pipe-redirect"><a class="markdownIt-Anchor" href="#pipe-redirect"></a> pipe redirect</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> fds[<span class="hljs-number">2</span>];    <span class="hljs-keyword">pid_t</span> pid;    pipe(fds);    pid = fork();    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;        <span class="hljs-comment">// child</span>        <span class="hljs-built_in">close</span>(fds[<span class="hljs-number">1</span>]);        dup2(fds[<span class="hljs-number">0</span>],STDIN_FILENO); <span class="hljs-comment">// read from `stdin` as same as pipe</span>        execlp(<span class="hljs-string">"sort"</span>,<span class="hljs-string">"sort"</span>,<span class="hljs-number">0</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        FILE* stream = fdopen(fds[<span class="hljs-number">1</span>],<span class="hljs-string">"w"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This is a test.\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This is a test.\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"Hello world\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"My dog\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This prog\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"One fish.\n"</span>);        fflush(stream);        <span class="hljs-built_in">close</span>(fds[<span class="hljs-number">1</span>]);        waitpid(pid,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> Socket</h2><h3 id="local-sockets"><a class="markdownIt-Anchor" href="#local-sockets"></a> Local Sockets</h3><p>server.c</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/un.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-comment">/* Read text from the socket and print it out. Continue until the</span><span class="hljs-comment">socket closes. Return nonzero if the client sent a “quit”</span><span class="hljs-comment">message, zero otherwise. */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">server</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> client_socket)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">int</span> length;        <span class="hljs-keyword">char</span>* <span class="hljs-built_in">text</span>;        <span class="hljs-comment">/* First, read the length of the text message from the socket. If</span><span class="hljs-comment">        read returns zero, the client closed the connection. */</span>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">read</span> (client_socket, &amp;length, <span class="hljs-keyword">sizeof</span> (length)) == <span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-comment">/* Allocate a buffer to hold the text. */</span>        <span class="hljs-built_in">text</span> = (<span class="hljs-keyword">char</span>*) <span class="hljs-built_in">malloc</span> (length);        <span class="hljs-comment">/* Read the text itself, and print it. */</span>        <span class="hljs-built_in">read</span> (client_socket, <span class="hljs-built_in">text</span>, length);        <span class="hljs-built_in">printf</span> (“%s\n”, <span class="hljs-built_in">text</span>);        <span class="hljs-comment">/* Free the buffer. */</span>        <span class="hljs-built_in">free</span> (<span class="hljs-built_in">text</span>);        <span class="hljs-comment">/* If the client sent the message “quit,” we’re all done. */</span>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span> (<span class="hljs-built_in">text</span>, “quit”))            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> socket_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-keyword">int</span> client_sent_quit_message;    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_LOCAL, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">// `PF_LOCAL` local namespace</span>    <span class="hljs-comment">/* Indicate that this is a server. */</span>    name.sun_family = AF_LOCAL;    <span class="hljs-built_in">strcpy</span> (name.sun_path, socket_name);    bind (socket_fd, &amp;name, SUN_LEN (&amp;name));    <span class="hljs-comment">/* Listen for connections. */</span>    <span class="hljs-built_in">listen</span> (socket_fd, <span class="hljs-number">5</span>);    <span class="hljs-comment">/* Repeatedly accept connections, spinning off one server() to deal</span><span class="hljs-comment">    with each client. Continue until a client sends a “quit” message. */</span>    <span class="hljs-keyword">do</span> &#123;        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">client_name</span>;</span>        <span class="hljs-keyword">socklen_t</span> client_name_len;        <span class="hljs-keyword">int</span> client_socket_fd;        <span class="hljs-comment">/* Accept a connection. */</span>        client_socket_fd = accept (socket_fd, &amp;client_name, &amp;client_name_len);        <span class="hljs-comment">/* Handle the connection. */</span>        client_sent_quit_message = server (client_socket_fd);        <span class="hljs-comment">/* Close our end of the connection. */</span>        <span class="hljs-built_in">close</span> (client_socket_fd);    &#125;    <span class="hljs-keyword">while</span> (!client_sent_quit_message);    <span class="hljs-comment">/* Remove the socket file. */</span>    <span class="hljs-built_in">close</span> (socket_fd);    unlink (socket_name);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>client.c</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/un.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write_text</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> socket_fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-built_in">text</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/* Write the number of bytes in the string, including</span><span class="hljs-comment">    NUL-termination. */</span>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span> (<span class="hljs-built_in">text</span>) + <span class="hljs-number">1</span>;    <span class="hljs-built_in">write</span> (socket_fd, &amp;length, <span class="hljs-keyword">sizeof</span> (length));    <span class="hljs-comment">/* Write the string. */</span>    <span class="hljs-built_in">write</span> (socket_fd, <span class="hljs-built_in">text</span>, length);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> socket_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> message = argv[<span class="hljs-number">2</span>];    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_LOCAL, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">/* Store the server’s name in the socket address. */</span>    name.sun_family = AF_LOCAL;    <span class="hljs-built_in">strcpy</span> (name.sun_path, socket_name);    <span class="hljs-comment">/* Connect the socket. */</span>    <span class="hljs-built_in">connect</span> (socket_fd, &amp;name, SUN_LEN (&amp;name));    <span class="hljs-comment">/* Write the text on the command line to the socket. */</span>    write_text (socket_fd, message);    <span class="hljs-built_in">close</span> (socket_fd);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="internet-domain-sockets"><a class="markdownIt-Anchor" href="#internet-domain-sockets"></a> Internet-Domain Sockets</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-comment">/* Print the contents of the home page for the server’s socket.</span><span class="hljs-comment">Return an indication of success. */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_home_page</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> socket_fd)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> <span class="hljs-built_in">buffer</span>[<span class="hljs-number">10000</span>];    <span class="hljs-keyword">ssize_t</span> number_characters_read;    <span class="hljs-comment">/* Send the HTTP GET command for the home page. */</span>    <span class="hljs-built_in">sprintf</span> (<span class="hljs-built_in">buffer</span>, “GET /\n”);    <span class="hljs-built_in">write</span> (socket_fd, <span class="hljs-built_in">buffer</span>, <span class="hljs-built_in">strlen</span> (<span class="hljs-built_in">buffer</span>));    <span class="hljs-comment">/* Read from the socket. The call to read may not</span><span class="hljs-comment">    return all the data at one time, so keep</span><span class="hljs-comment">    trying until we run out. */</span>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;        number_characters_read = <span class="hljs-built_in">read</span> (socket_fd, <span class="hljs-built_in">buffer</span>, <span class="hljs-number">10000</span>);        <span class="hljs-keyword">if</span> (number_characters_read == <span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span>;        <span class="hljs-comment">/* Write the data to standard output. */</span>        fwrite (<span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">char</span>), number_characters_read, <span class="hljs-built_in">stdout</span>);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>* <span class="hljs-title">hostinfo</span>;</span>    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">/* Store the server’s name in the socket address. */</span>    name.sin_family = AF_INET;    <span class="hljs-comment">/* Convert from strings to numbers. */</span>    hostinfo = gethostbyname (argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span> (hostinfo == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span>    name.sin_addr = *((struct in_addr *) hostinfo-&gt;h_addr);    <span class="hljs-comment">/* Web servers use port 80. */</span>    name.sin_port = htons (<span class="hljs-number">80</span>);    <span class="hljs-comment">/* Connect to the Web server */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span> (socket_fd, &amp;name, <span class="hljs-keyword">sizeof</span> (struct sockaddr_in)) == <span class="hljs-number">-1</span>) &#123;        perror (“<span class="hljs-built_in">connect</span>”);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">/* Retrieve the server’s home page. */</span>    get_home_page (socket_fd);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="system-call"><a class="markdownIt-Anchor" href="#system-call"></a> System Call</h1><h2 id="using-strace"><a class="markdownIt-Anchor" href="#using-strace"></a> Using strace</h2><p><code>sudo apt install strace</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>raft implement notice</title>
    <link href="/2020/08/19/raft/"/>
    <url>/2020/08/19/raft/</url>
    
    <content type="html"><![CDATA[<ol><li>server should convert to <code>follower</code> and set <code>currentTerm</code> to be <code>args's Term</code>, when receive a RPC message</li><li>when a <code>follower</code> is disconnected from cluster, connecting back later, it’s term is large than the others. It will send requestVote to others (include <code>leader</code>), then current <code>leader</code> convert to <code>follow</code>, starting a new election. It will eventually convert to <code>leader</code>. Connected <code>follower</code> cannot acquire votes because <code>Election restriction</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>raft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE import table inject</title>
    <link href="/2020/08/06/PE%20%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/"/>
    <url>/2020/08/06/PE%20%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>导入表描述了exe执行时需要加载的dll</p><h2 id="create-a-test-dll"><a class="markdownIt-Anchor" href="#create-a-test-dll"></a> create a test dll</h2><p><img src="/image/PE/dllmain.png" srcset="/img/loading.gif" alt="" /><br /><code>init()</code> 和 <code>destory()</code>分别在dll加载和dll卸载时调用<br /><img src="/image/PE/import.png" srcset="/img/loading.gif" alt="" /><br /><img src="/image/PE/pch.png" srcset="/img/loading.gif" alt="" /><br />dll必须提供导出函数才会被加载</p><h2 id="导入表结构"><a class="markdownIt-Anchor" href="#导入表结构"></a> 导入表结构</h2><p><img src="/image/PE/import_table.png" srcset="/img/loading.gif" alt="导入表结构" /><br />表中地址均为<code>RVA</code></p><h2 id="inject-code"><a class="markdownIt-Anchor" href="#inject-code"></a> inject code</h2><h3 id="read-file"><a class="markdownIt-Anchor" href="#read-file"></a> read file</h3><pre><code class="hljs c++">DWORD ext_size = <span class="hljs-number">0x1000</span>; <span class="hljs-comment">// 文件扩大的大小</span>FILE* g_f = fopen(filename, <span class="hljs-string">"rb"</span>);fseek(g_f, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-keyword">int</span> file_size = ftell(g_f);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"file size : %d\n"</span>, file_size);<span class="hljs-keyword">auto</span> out_size = file_size + ext_size;BYTE* file_buff = (BYTE*)<span class="hljs-built_in">malloc</span>(out_size); <span class="hljs-built_in">memset</span>(file_buff, <span class="hljs-number">0</span>, out_size);fseek(g_f, <span class="hljs-number">0</span>, SEEK_SET);fread(file_buff, file_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);</code></pre><h3 id="extend-the-last-section"><a class="markdownIt-Anchor" href="#extend-the-last-section"></a> extend the last section</h3><pre><code class="hljs c++">PIMAGE_IMPORT_DESCRIPTOR import_table = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + RVA2FOV(section_header, sections_nums, op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress));<span class="hljs-keyword">auto</span> last_section_header = section_header + sections_nums - <span class="hljs-number">1</span>;<span class="hljs-keyword">auto</span> old_last_size = last_section_header-&gt;Misc.VirtualSize;<span class="hljs-keyword">auto</span> N = <span class="hljs-built_in">max</span>(last_section_header-&gt;Misc.VirtualSize, last_section_header-&gt;SizeOfRawData) + ext_size;last_section_header-&gt;Misc.VirtualSize = last_section_header-&gt;SizeOfRawData = N;last_section_header-&gt;Characteristics = <span class="hljs-number">0xc0000040</span>;op_header-&gt;SizeOfImage += ext_size;</code></pre><p><strong><code>Characteristics</code>of<code>section</code>must be<code>0xc0000040</code></strong></p><h3 id="copy-origin-import-table"><a class="markdownIt-Anchor" href="#copy-origin-import-table"></a> copy origin import table</h3><pre><code class="hljs c++"><span class="hljs-comment">// file offset to virtual offset to address in the last section</span><span class="hljs-keyword">auto</span> FOA2RVA = [last_section_header,file_buff](BYTE* addr) &#123;    <span class="hljs-keyword">return</span> (DWORD)(last_section_header-&gt;VirtualAddress + (addr - (last_section_header-&gt;PointerToRawData + file_buff)));&#125;;PIMAGE_IMPORT_DESCRIPTOR dest = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + file_size);op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress = FOA2RVA((BYTE*)dest);op_header-&gt;DataDirectory[IMPORT_TABLE].Size += <span class="hljs-keyword">sizeof</span>(*dest);<span class="hljs-keyword">auto</span> p = dest;<span class="hljs-keyword">for</span> (; *(DWORD*)import_table != <span class="hljs-number">0</span>;++import_table,++p) &#123;    <span class="hljs-built_in">memcpy</span>(p,import_table,<span class="hljs-keyword">sizeof</span>(*import_table));&#125;</code></pre><h2 id="add-new-import-table-and-int-iat"><a class="markdownIt-Anchor" href="#add-new-import-table-and-int-iat"></a> add new import table and INT IAT</h2><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> patch = p; <span class="hljs-comment">// the new import talbe fixed later</span>DWORD* int_table =(DWORD*)(p + <span class="hljs-number">2</span>);DWORD* iat_table = (DWORD*)(int_table + <span class="hljs-number">2</span>);WORD* name = (WORD*)(iat_table + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(name + <span class="hljs-number">1</span>, <span class="hljs-string">"add"</span>, <span class="hljs-number">4</span>);iat_table[<span class="hljs-number">0</span>] = int_table[<span class="hljs-number">0</span>] = FOA2RVA((BYTE*)name);BYTE* dll_addr = (BYTE*)(name + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(dll_addr, dllname, <span class="hljs-built_in">strlen</span>(dllname) + <span class="hljs-number">1</span>);<span class="hljs-comment">// fix new import talbe address</span>patch-&gt;Name = FOA2RVA((BYTE*)dll_addr);patch-&gt;FirstThunk = FOA2RVA((BYTE*)iat_table);patch-&gt;OriginalFirstThunk = FOA2RVA((BYTE*)int_table);</code></pre><h3 id="the-whole-code"><a class="markdownIt-Anchor" href="#the-whole-code"></a> the whole code</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">injectImportTable</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* filename,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* newname,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* dllname)</span> </span>&#123;DWORD ext_size = <span class="hljs-number">0x1000</span>;FILE* g_f = fopen(filename, <span class="hljs-string">"rb"</span>);fseek(g_f, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-keyword">int</span> file_size = ftell(g_f);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"file size : %d\n"</span>, file_size);<span class="hljs-keyword">auto</span> out_size = file_size + ext_size;BYTE* file_buff = (BYTE*)<span class="hljs-built_in">malloc</span>(out_size); <span class="hljs-built_in">memset</span>(file_buff, <span class="hljs-number">0</span>, out_size);fseek(g_f, <span class="hljs-number">0</span>, SEEK_SET);fread(file_buff, file_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)file_buff;<span class="hljs-keyword">auto</span> pe_header_offset = dos_header-&gt;e_lfanew;PIMAGE_NT_HEADERS nt_header = (PIMAGE_NT_HEADERS)(file_buff + pe_header_offset);PIMAGE_FILE_HEADER file_header = &amp;nt_header-&gt;FileHeader;<span class="hljs-keyword">auto</span> sections_nums = file_header-&gt;NumberOfSections;PIMAGE_OPTIONAL_HEADER op_header = &amp;nt_header-&gt;OptionalHeader;<span class="hljs-keyword">auto</span> headers_size = op_header-&gt;SizeOfHeaders;<span class="hljs-keyword">auto</span> image_base = op_header-&gt;ImageBase;<span class="hljs-keyword">auto</span> image_size = op_header-&gt;SizeOfImage;PIMAGE_SECTION_HEADER section_header = PIMAGE_SECTION_HEADER((BYTE*)op_header + file_header-&gt;SizeOfOptionalHeader);<span class="hljs-comment">// extend last section</span>PIMAGE_IMPORT_DESCRIPTOR import_table = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + RVA2FOV(section_header, sections_nums, op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress));<span class="hljs-keyword">auto</span> text_attr = section_header-&gt;Characteristics; <span class="hljs-comment">// characteristics of text</span><span class="hljs-keyword">auto</span> last_section_header = section_header + sections_nums - <span class="hljs-number">1</span>;<span class="hljs-keyword">auto</span> old_last_size = last_section_header-&gt;Misc.VirtualSize;<span class="hljs-keyword">auto</span> N = <span class="hljs-built_in">max</span>(last_section_header-&gt;Misc.VirtualSize, last_section_header-&gt;SizeOfRawData) + ext_size;last_section_header-&gt;Misc.VirtualSize = last_section_header-&gt;SizeOfRawData = N;last_section_header-&gt;Characteristics = <span class="hljs-number">0xc0000040</span>;op_header-&gt;SizeOfImage += ext_size;<span class="hljs-keyword">auto</span> FOA2RVA = [last_section_header,file_buff](BYTE* addr) &#123;<span class="hljs-keyword">return</span> (DWORD)(last_section_header-&gt;VirtualAddress + (addr - (last_section_header-&gt;PointerToRawData + file_buff)));&#125;;PIMAGE_IMPORT_DESCRIPTOR dest = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + file_size);op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress = FOA2RVA((BYTE*)dest);op_header-&gt;DataDirectory[IMPORT_TABLE].Size += <span class="hljs-keyword">sizeof</span>(*dest);<span class="hljs-keyword">auto</span> p = dest;<span class="hljs-keyword">for</span> (; *(DWORD*)import_table != <span class="hljs-number">0</span>;++import_table,++p) &#123;<span class="hljs-built_in">memcpy</span>(p,import_table,<span class="hljs-keyword">sizeof</span>(*import_table));&#125;<span class="hljs-keyword">auto</span> patch = p;DWORD* int_table =(DWORD*)(p + <span class="hljs-number">2</span>);DWORD* iat_table = (DWORD*)(int_table + <span class="hljs-number">2</span>);WORD* name = (WORD*)(iat_table + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(name + <span class="hljs-number">1</span>, <span class="hljs-string">"add"</span>, <span class="hljs-number">4</span>);iat_table[<span class="hljs-number">0</span>] = int_table[<span class="hljs-number">0</span>] = FOA2RVA((BYTE*)name);BYTE* dll_addr = (BYTE*)(name + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(dll_addr, dllname, <span class="hljs-built_in">strlen</span>(dllname) + <span class="hljs-number">1</span>);patch-&gt;Name = FOA2RVA((BYTE*)dll_addr);patch-&gt;FirstThunk = FOA2RVA((BYTE*)iat_table);patch-&gt;OriginalFirstThunk = FOA2RVA((BYTE*)int_table);g_f = fopen(newname, <span class="hljs-string">"wb"</span>);fwrite(file_buff, out_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm template</title>
    <link href="/2020/07/05/code%20template/"/>
    <url>/2020/07/05/code%20template/</url>
    
    <content type="html"><![CDATA[<h1 id="模板题"><a class="markdownIt-Anchor" href="#模板题"></a> 模板题</h1><h2 id="0x00排序"><a class="markdownIt-Anchor" href="#0x00排序"></a> 0x00排序</h2><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><p>给定你一个长度为n的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1-10^{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>范围内），表示整个数列。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1≤n≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例</h4><p>5<br />3 1 2 4 5</p><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例</h4><p>1 2 3 4 5</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> d[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l &gt;=r )        <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> i = l <span class="hljs-number">-1</span>,j = r + <span class="hljs-number">1</span>,pivo = d[l + r &gt;&gt; <span class="hljs-number">1</span>];    <span class="hljs-keyword">while</span>(i &lt; j)&#123;        <span class="hljs-keyword">while</span>(d[++i] &lt; pivo);        <span class="hljs-keyword">while</span>(d[--j] &gt; pivo);        <span class="hljs-keyword">if</span>(i &lt; j) swap(d[i],d[j]);    &#125;    qs(l,j);    qs(j + <span class="hljs-number">1</span>,r);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++ )&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;d[i]);    &#125;    qs(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,d[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> d[M],tmp[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;    merge_sort(l,mid), merge_sort(mid + <span class="hljs-number">1</span>,r);    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>,i = l,j = mid + <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;        <span class="hljs-keyword">if</span>(d[i] &lt;= d[j]) tmp[k++] = d[i++];        <span class="hljs-keyword">else</span> tmp[k++] = d[j++];    &#125;    <span class="hljs-keyword">while</span>(i &lt;= mid) tmp[k++] = d[i++];    <span class="hljs-keyword">while</span>(j &lt;= r) tmp[k++] = d[j++];    <span class="hljs-keyword">for</span>(i = l,j = <span class="hljs-number">0</span>;j &lt; k;j++,i++) d[i] = tmp[j];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++ )&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;d[i]);    &#125;    merge_sort(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,d[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h2><ul><li>有单调性一定可以二分</li><li>没有单调性不一定不能二分</li></ul><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">                        check() == true</span><span class="hljs-comment">    |_______________| |_______________|</span><span class="hljs-comment">    l                 ^               r</span><span class="hljs-comment">                     mid</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(check(mid)) r = mid;        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;     &#125;    <span class="hljs-keyword">return</span> l;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">     check() == true</span><span class="hljs-comment">    |_______________| |_______________|</span><span class="hljs-comment">    l               ^                 r</span><span class="hljs-comment">                   mid</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(check(mid)) l = mid;        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;     &#125;    <span class="hljs-keyword">return</span> l;&#125;</code></pre><h2 id="0x01高精度"><a class="markdownIt-Anchor" href="#0x01高精度"></a> 0x01高精度</h2><h3 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">int</span> c= <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || i &lt;B.<span class="hljs-built_in">size</span>();i++)&#123;        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) c += A[i];        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) c += B[i];        res.push_back(c % <span class="hljs-number">10</span>);        c/= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">if</span>(c) res.push_back(c);    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="减法"><a class="markdownIt-Anchor" href="#减法"></a> 减法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; B)</span></span>&#123;    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i++)&#123;        c = A[i] - c;        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) c = c - B[i];        res.push_back((c + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);        <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-number">0</span>) c = <span class="hljs-number">1</span>; <span class="hljs-comment">// 有借位</span>        <span class="hljs-keyword">else</span> c = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">while</span>(res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.back()==<span class="hljs-number">0</span>) res.pop_back();<span class="hljs-comment">// 去掉前导 0</span>    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A,<span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i++)&#123;        c += A[i]*b;        res.push_back(c % <span class="hljs-number">10</span>);        c /= <span class="hljs-number">10</span>;    &#125;      <span class="hljs-keyword">if</span>(c) res.push_back(c);    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="除法"><a class="markdownIt-Anchor" href="#除法"></a> 除法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span>&amp; r)</span></span>&#123;    r = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = A.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        r = r * <span class="hljs-number">10</span> + A[i];        res.push_back(r / b);        r = r % b;    &#125;    reverse(res.<span class="hljs-built_in">begin</span>(),res.<span class="hljs-built_in">end</span>());    <span class="hljs-keyword">while</span>(res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.back() == <span class="hljs-number">0</span>) res.pop_back();    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h2 id="0x02-前缀和差分"><a class="markdownIt-Anchor" href="#0x02-前缀和差分"></a> 0x02 前缀和差分</h2><p>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">[l,r] + c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 操作变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3><p>输入一个长度为n的整数序列。</p><p>接下来输入m个操作，每个操作包含三个整数l, r, c，表示将序列中[l, r]之间的每个数加上c。</p><p>请你输出进行完所有操作后的序列。</p><h4 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>第二行包含n个整数，表示整数序列。</p><p>接下来m行，每行包含三个整数l，r，c，表示一个操作。</p><h4 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h4><p>共一行，包含n个整数，表示最终序列。</p><h4 id="数据范围-2"><a class="markdownIt-Anchor" href="#数据范围-2"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>100000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤100000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>n</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤l≤r≤n,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−1000≤c≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi mathvariant="normal">整</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">列</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">−1000≤整数序列中元素的值≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例：</h4><p>6 3<br />1 2 2 1 2 1<br />1 3 1<br />3 5 1<br />1 6 1</p><h4 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例：</h4><p>3 4 5 3 4 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> a[M],b[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  =<span class="hljs-number">1</span>;i &lt;=n;i++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);        b[i] = a[i] - a[i<span class="hljs-number">-1</span>]; <span class="hljs-comment">// 计算差分</span>    &#125;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> l,r,c;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;c);        b[l] += c;        b[r+<span class="hljs-number">1</span>] -= c;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) b[i] +=b[i<span class="hljs-number">-1</span>]; <span class="hljs-comment">// 求前缀和</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="矩阵差分"><a class="markdownIt-Anchor" href="#矩阵差分"></a> 矩阵差分</h3><p>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1, y1, x2, y2, c，其中(x1, y1)和(x2, y2)表示一个子矩阵的左上角坐标和右下角坐标。</p><p>每个操作都要将选中的子矩阵中的每个元素的值加上c。</p><p>请你将进行完所有操作后的矩阵输出。</p><h4 id="输入格式-3"><a class="markdownIt-Anchor" href="#输入格式-3"></a> 输入格式</h4><p>第一行包含整数n,m,q。</p><p>接下来n行，每行包含m个整数，表示整数矩阵。</p><p>接下来q行，每行包含5个整数x1, y1, x2, y2, c，表示一个操作。</p><h4 id="输出格式-3"><a class="markdownIt-Anchor" href="#输出格式-3"></a> 输出格式</h4><p>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p><h4 id="数据范围-3"><a class="markdownIt-Anchor" href="#数据范围-3"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>q</mi><mo>≤</mo><mn>100000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤q≤100000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mn>1</mn><mo>≤</mo><mi>x</mi><mn>2</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤x1≤x2≤n,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>y</mi><mn>1</mn><mo>≤</mo><mi>y</mi><mn>2</mn><mo>≤</mo><mi>m</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤y1≤y2≤m,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−1000≤c≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi mathvariant="normal">矩</mi><mi mathvariant="normal">阵</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">−1000≤矩阵内元素的值≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-3"><a class="markdownIt-Anchor" href="#输入样例-3"></a> 输入样例：</h4><p>3 4 3<br />1 2 2 1<br />3 2 2 1<br />1 1 1 1<br />1 1 2 2 1<br />1 3 2 3 2<br />3 1 3 4 1</p><h4 id="输出样例-3"><a class="markdownIt-Anchor" href="#输出样例-3"></a> 输出样例：</h4><p>2 3 4 1<br />4 3 4 1<br />2 2 2 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1010</span>;<span class="hljs-keyword">int</span> a[M][M],b[M][M];<span class="hljs-comment">// 插入</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1,<span class="hljs-keyword">int</span> x2,<span class="hljs-keyword">int</span> y2,<span class="hljs-keyword">int</span> c)</span></span>&#123;    b[x1][y1] += c;    b[x2 + <span class="hljs-number">1</span>][y1] -= c;    b[x1][y2+<span class="hljs-number">1</span>] -= c;    b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>] += c;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m,q;    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m&gt;&gt;q;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i][j]), insert(i,j,i,j,a[i][j]);    <span class="hljs-keyword">while</span>(q--)&#123;        <span class="hljs-keyword">int</span> x1,x2,y1,y2,c;        <span class="hljs-built_in">cin</span> &gt;&gt; x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;        insert(x1,y1,x2,y2,c);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            b[i][j] += b[i<span class="hljs-number">-1</span>][j] + b[i][j<span class="hljs-number">-1</span>] - b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<span class="hljs-comment">// 求前缀和</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[i][j]);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="区间离散"><a class="markdownIt-Anchor" href="#区间离散"></a> 区间离散</h3><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是0。</p><p>现在，我们首先进行 n 次操作，每次操作将某一位置x上的数加c。</p><p>近下来，进行 m 次询问，每个询问包含两个整数l和r，你需要求出在区间[l, r]之间的所有数的和。</p><p>输入格式<br />第一行包含两个整数n和m。</p><p>接下来 n 行，每行包含两个整数x和c。</p><p>再接下里 m 行，每行包含两个整数l和r。</p><h4 id="输出格式-4"><a class="markdownIt-Anchor" href="#输出格式-4"></a> 输出格式</h4><p>共m行，每行输出一个询问中所求的区间内数字和。</p><h4 id="数据范围-4"><a class="markdownIt-Anchor" href="#数据范围-4"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>109</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>109</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−109≤x≤109,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>109</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mn>109</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−109≤l≤r≤109,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>10000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">−10000≤c≤10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-4"><a class="markdownIt-Anchor" href="#输入样例-4"></a> 输入样例</h4><p>3 3<br />1 2<br />3 6<br />7 5<br />1 3<br />4 6<br />7 8</p><h4 id="输出样例-4"><a class="markdownIt-Anchor" href="#输出样例-4"></a> 输出样例</h4><p>8<br />0<br />5</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> PII = pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> a[M],b[M];<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; alls; <span class="hljs-comment">// 所有使用到的点</span><span class="hljs-built_in">vector</span>&lt;PII&gt; add,query;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,r = alls.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(alls[mid]&gt;=x) r = mid;        <span class="hljs-keyword">else</span> l = mid +<span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> l + <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n;i++)&#123;        <span class="hljs-keyword">int</span> x,y;        <span class="hljs-built_in">cin</span> &gt;&gt;x&gt;&gt;y;        add.push_back(&#123;x,y&#125;);        alls.push_back(x);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-keyword">int</span> x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; x&gt;&gt;y;        query.push_back(&#123;x,y&#125;);        alls.push_back(x);        alls.push_back(y);    &#125;    sort(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>());    alls.erase(unique(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 去重</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : add)&#123;        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">find</span>(it.first);        a[x] += it.second;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=alls.<span class="hljs-built_in">size</span>();i++)        b[i] = b[i<span class="hljs-number">-1</span>] + a[i];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : query)&#123;        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">find</span>(it.first),y = <span class="hljs-built_in">find</span>(it.second);        <span class="hljs-built_in">cout</span> &lt;&lt; b[y] - b[x<span class="hljs-number">-1</span>] &lt;&lt;<span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> kmp</h2><p>给定一个模式串S，以及一个模板串P，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p><p>模板串P在模式串S中多次作为子串出现。</p><p>求出模板串P在模式串S中所有出现的位置的起始下标。</p><h4 id="输入格式-4"><a class="markdownIt-Anchor" href="#输入格式-4"></a> 输入格式</h4><p>第一行输入整数N，表示字符串P的长度。</p><p>第二行输入字符串P。</p><p>第三行输入整数M，表示字符串S的长度。</p><p>第四行输入字符串S。</p><h4 id="输出格式-5"><a class="markdownIt-Anchor" href="#输出格式-5"></a> 输出格式</h4><p>共一行，输出所有出现位置的起始下标（下标从0开始计数），整数之间用空格隔开。</p><h4 id="数据范围-5"><a class="markdownIt-Anchor" href="#数据范围-5"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤M≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-5"><a class="markdownIt-Anchor" href="#输入样例-5"></a> 输入样例</h4><p>3<br />aba<br />5<br />ababa</p><h4 id="输出样例-5"><a class="markdownIt-Anchor" href="#输出样例-5"></a> 输出样例</h4><p>0 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">char</span> s[M],p[M];<span class="hljs-keyword">int</span> ne[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span>&gt;&gt;m &gt;&gt; s + <span class="hljs-number">1</span>;    <span class="hljs-comment">/*</span><span class="hljs-comment">        next[] 从1开始, [1,i] 最大前缀与后缀相同长度</span><span class="hljs-comment">        eg:</span><span class="hljs-comment">            p : "ababa"</span><span class="hljs-comment">                 12345</span><span class="hljs-comment">            next 0 1 2 3 4 5</span><span class="hljs-comment">                 0 0 0 1 2 3</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>,j = <span class="hljs-number">0</span>;i &lt;=n;i++)&#123;        <span class="hljs-comment">// 用 p[j + 1] 和 j[i]  匹配 ， 若失败 则 j = next[j]</span>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;        ne[i] = j;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">0</span>;i &lt;=m;i++)&#123;        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) j++;        <span class="hljs-keyword">if</span>(j == n )&#123;            <span class="hljs-comment">// succ</span>            <span class="hljs-built_in">cout</span> &lt;&lt; i - n &lt;&lt;<span class="hljs-string">" "</span>;            j = ne[j];        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><blockquote><p>高效存储和查找字符串<br />维护一个字符串集合，支持两种操作：</p></blockquote><p>“I x”向集合中插入一个字符串x；<br />“Q x”询问一个字符串在集合中出现了多少次。<br />共有N个操作，输入的字符串总长度不超过 105，字符串仅包含小写英文字母。</p><h4 id="输入格式-5"><a class="markdownIt-Anchor" href="#输入格式-5"></a> 输入格式</h4><p>第一行包含整数N，表示操作数。</p><p>接下来N行，每行包含一个操作指令，指令为”I x”或”Q x”中的一种。</p><h4 id="输出格式-6"><a class="markdownIt-Anchor" href="#输出格式-6"></a> 输出格式</h4><p>对于每个询问指令”Q x”，都要输出一个整数作为结果，表示x在集合中出现的次数。</p><p>每个结果占一行。</p><h4 id="数据范围-6"><a class="markdownIt-Anchor" href="#数据范围-6"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>104</mn></mrow><annotation encoding="application/x-tex">1≤N≤2∗104</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord">0</span><span class="mord">4</span></span></span></span></p><h4 id="输入样例-6"><a class="markdownIt-Anchor" href="#输入样例-6"></a> 输入样例</h4><p>5<br />I abc<br />Q abc<br />Q ab<br />I ab<br />Q ab</p><h4 id="输出样例-6"><a class="markdownIt-Anchor" href="#输出样例-6"></a> 输出样例</h4><p>1<br />0<br />1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> son[M][<span class="hljs-number">26</span>],cnt[M],idx; <span class="hljs-comment">// idx : 0 表示根节点</span><span class="hljs-keyword">char</span> str[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; str[i];i++)&#123;        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u] = ++idx;        p = son[p][u];    &#125;    cnt[p] ++;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        p = son[p][u];    &#125;    <span class="hljs-keyword">return</span> cnt[p];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">char</span> op;        <span class="hljs-built_in">cin</span> &gt;&gt; op;        <span class="hljs-built_in">cin</span>&gt;&gt; str;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'I'</span>)&#123;            insert(str);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; query(str) &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="ac自动机"><a class="markdownIt-Anchor" href="#ac自动机"></a> AC自动机</h2><ul><li>trie+kmp</li></ul><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>原题来自：HDU 2222<br />给定 n 个长度不超过 50 的由小写英文字母组成的单词准备查询，以及一篇长为 m 的文章，问：文中出现了多少个待查询的单词。多组数据。</p><h4 id="输入格式-6"><a class="markdownIt-Anchor" href="#输入格式-6"></a> 输入格式</h4><p>第一行一个整数 T，表示数据组数；</p><p>对于每组数据，第一行一个整数 n，接下去 n 行表示 n 个单词，最后一行输入一个字符串，表示文章。</p><h4 id="输出格式-7"><a class="markdownIt-Anchor" href="#输出格式-7"></a> 输出格式</h4><p>对于每组数据，输出一个数，表示文中出现了多少个待查询的单词。</p><h4 id="数据范围-7"><a class="markdownIt-Anchor" href="#数据范围-7"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi mathvariant="normal">​</mi><mi mathvariant="normal">​</mi></mrow><annotation encoding="application/x-tex">1≤n≤10^4,1≤m≤10^6​​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">​</span><span class="mord">​</span></span></span></span></p><h4 id="输入样例-7"><a class="markdownIt-Anchor" href="#输入样例-7"></a> 输入样例：</h4><p>1<br />5<br />she<br />he<br />say<br />shr<br />her<br />yasherhs</p><h4 id="输出样例-7"><a class="markdownIt-Anchor" href="#输出样例-7"></a> 输出样例：</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>,S = <span class="hljs-number">55</span>,M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> tr[N*S][<span class="hljs-number">26</span>],cnt[N*S],idx;<span class="hljs-keyword">char</span> str[M];<span class="hljs-keyword">int</span> q[N*S],ne[N*S];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> j = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!tr[p][j]) tr[p][j] = ++idx;        p = tr[p][j];    &#125;    cnt[p]++;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;        <span class="hljs-comment">// 加入初始的节点</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)        <span class="hljs-keyword">if</span>(tr[<span class="hljs-number">0</span>][i]) q[++tt] = tr[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">// 利用上层节点更新下层</span>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;            <span class="hljs-keyword">int</span> c = tr[t][i];            <span class="hljs-keyword">if</span>(!c) <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">int</span> j = ne[t]; <span class="hljs-comment">// 上层节点的next</span>            <span class="hljs-keyword">while</span>(j &amp;&amp; !tr[j][i]) j = ne[j];            <span class="hljs-keyword">if</span>(tr[j][i]) j = tr[j][i];            ne[c] = j;            q[++tt] = c;        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span> &gt;&gt; T;    <span class="hljs-keyword">while</span>(T--)&#123;        <span class="hljs-built_in">memset</span>(tr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> tr);        <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> cnt);        idx = <span class="hljs-number">0</span>;        <span class="hljs-built_in">memset</span>(ne,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ne);        <span class="hljs-built_in">cin</span> &gt;&gt; n;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; str;            insert();        &#125;        build();        <span class="hljs-built_in">cin</span> &gt;&gt; str;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;str[i];i++)&#123;            <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">'a'</span>;                        <span class="hljs-keyword">while</span>(j &amp;&amp; !tr[j][t]) j = ne[j];            <span class="hljs-keyword">if</span>(tr[j][t]) j = tr[j][t];                        <span class="hljs-comment">// 加上所有后缀单词的数量</span>            <span class="hljs-keyword">int</span> p = j;            <span class="hljs-keyword">while</span>(p)&#123;                res += cnt[p];                cnt[p] = <span class="hljs-number">0</span>;                p = ne[p];            &#125;                    &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    &#125;</code></pre><ul><li>优化版</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>,S = <span class="hljs-number">55</span>,M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> tr[N*S][<span class="hljs-number">26</span>],cnt[N*S],idx;<span class="hljs-keyword">char</span> str[M];<span class="hljs-keyword">int</span> q[N*S],ne[N*S];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> j = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!tr[p][j]) tr[p][j] = ++idx;        p = tr[p][j];    &#125;    cnt[p]++;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;        <span class="hljs-comment">// 加入初始的节点</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)        <span class="hljs-keyword">if</span>(tr[<span class="hljs-number">0</span>][i]) q[++tt] = tr[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">// 利用上层节点更新下层</span>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;            <span class="hljs-keyword">int</span> p = tr[t][i];            <span class="hljs-keyword">if</span>(!p) tr[t][i] = tr[ne[t]][i]; <span class="hljs-comment">// 直接跳回上层节点的i</span>            <span class="hljs-keyword">else</span>&#123;                ne[p] = tr[ne[t]][i];                 q[++tt] = p;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span> &gt;&gt; T;    <span class="hljs-keyword">while</span>(T--)&#123;        <span class="hljs-built_in">memset</span>(tr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> tr);        <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> cnt);        idx = <span class="hljs-number">0</span>;        <span class="hljs-built_in">memset</span>(ne,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ne);        <span class="hljs-built_in">cin</span> &gt;&gt; n;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; str;            insert();        &#125;        build();        <span class="hljs-built_in">cin</span> &gt;&gt; str;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;str[i];i++)&#123;            <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">'a'</span>;            j = tr[j][t];                        <span class="hljs-keyword">int</span> p = j;            <span class="hljs-keyword">while</span>(p)&#123;                res += cnt[p];                cnt[p] = <span class="hljs-number">0</span>;                p = ne[p];            &#125;                    &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    &#125;</code></pre><h2 id="字符串hash"><a class="markdownIt-Anchor" href="#字符串hash"></a> 字符串hash</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>时间求解某个子串的hash值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">base</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span>通常取131或13331</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000005</span>,base=<span class="hljs-number">131</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">char</span> str[N];ULL p[N],h[N];<span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> h[r]-h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str+<span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str+<span class="hljs-number">1</span>);    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)    &#123;        h[i]=h[i<span class="hljs-number">-1</span>]*base+str[i]-<span class="hljs-string">'a'</span>+<span class="hljs-number">1</span>;        p[i]=p[i<span class="hljs-number">-1</span>]*base;    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><p>用于动态维护序列的区间信息</p><ul><li>单点修改 update(x, v)</li><li>区间查询 query(l, r)</li></ul><p>存储结构</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>    <span class="hljs-keyword">int</span> l,r;  <span class="hljs-comment">//区间范围</span>    <span class="hljs-keyword">int</span> sum,...; <span class="hljs-comment">// 维护信息,例如，max,min,sum...</span>&#125;st[N*<span class="hljs-number">4</span>];</code></pre><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == x &amp;&amp; st[u].r == x) st[u] = &#123;x,x,v&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(x &lt;= mid) update(<span class="hljs-number">2</span>*u,x,v);        <span class="hljs-keyword">else</span> update(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,x,v);        pushup(u); <span class="hljs-comment">// 由子节点更新当前节点</span>    &#125;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-function">Node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == l &amp;&amp; st[u].r == r) <span class="hljs-keyword">return</span> st[u];    <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(r &lt;= mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u,l,r);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,l,r);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">auto</span> left = query(<span class="hljs-number">2</span>*u,l,mid);        <span class="hljs-keyword">auto</span> right = query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        Node res;        pushup(res,left,right);        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h3 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h3><p>给定长度为N的数列A，以及M条指令，每条指令可能是以下两种之一：</p><p>1、“1 x y”，查询区间 [x,y] 中的最大连续子段和，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>y</mi></mrow></munder><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\max \limits_{x\leq l\leq r \leq y} \sum_{i=l}^{r} A[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.692508em;vertical-align:-0.8882159999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span style="top:-2.0478920000000005em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882159999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p><p>2、“2 x y”，把 A[x] 改成 y。</p><p>对于每个查询指令，输出一个整数表示答案。</p><h4 id="输入格式-7"><a class="markdownIt-Anchor" href="#输入格式-7"></a> 输入格式</h4><p>第一行两个整数N,M。</p><p>第二行N个整数A[i]。</p><p>接下来M行每行3个整数k,x,y，k=1表示查询（此时如果x&gt;y，请交换x,y），k=2表示修改。</p><h4 id="输出格式-8"><a class="markdownIt-Anchor" href="#输出格式-8"></a> 输出格式</h4><p>对于每个查询指令输出一个整数表示答案。</p><p>每个答案占一行。</p><h4 id="数据范围-8"><a class="markdownIt-Anchor" href="#数据范围-8"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>≤</mo><mn>500000</mn><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">N≤500000,M≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-8"><a class="markdownIt-Anchor" href="#输入样例-8"></a> 输入样例：</h4><p>5 3<br />1 2 -3 4 5<br />1 2 3<br />2 2 -1<br />1 3 2</p><h4 id="输出样例-8"><a class="markdownIt-Anchor" href="#输出样例-8"></a> 输出样例：</h4><p>2<br />-1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500010</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>    <span class="hljs-keyword">int</span> l,r;    <span class="hljs-keyword">int</span> tmax,lmax,rmax,sum;&#125;st[N*<span class="hljs-number">4</span>];<span class="hljs-keyword">int</span> d[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(Node&amp; root,Node&amp; l,Node&amp; r)</span></span>&#123;    root.l = l.l;    root.r = r.r;    root.sum = l.sum + r.sum;    root.lmax = <span class="hljs-built_in">max</span>(l.lmax,l.sum + r.lmax);    root.rmax = <span class="hljs-built_in">max</span>(r.rmax,r.sum + l.rmax);    root.tmax = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(l.tmax,r.tmax),l.rmax + r.lmax);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;    pushup(st[u],st[u*<span class="hljs-number">2</span>],st[<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>]);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l == r) st[u] = &#123;l,r,d[l],d[l],d[l],d[l]&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        build(<span class="hljs-number">2</span>*u,l,mid),build(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        pushup(u);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == x &amp;&amp; st[u].r == x) st[u] = &#123;x,x,v,v,v,v&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(x &lt;= mid) update(<span class="hljs-number">2</span>*u,x,v);        <span class="hljs-keyword">else</span> update(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,x,v);        pushup(u);    &#125;&#125;<span class="hljs-function">Node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == l &amp;&amp; st[u].r == r) <span class="hljs-keyword">return</span> st[u];    <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(r &lt;= mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u,l,r);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,l,r);    <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">auto</span> left = query(<span class="hljs-number">2</span>*u,l,mid);        <span class="hljs-keyword">auto</span> right = query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        Node res;        pushup(res,left,right);        <span class="hljs-keyword">return</span> res;    &#125;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">cin</span> &gt;&gt; d[i];    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> k,x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt; x &gt;&gt; y;        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">if</span>(x &gt; y) swap(x,y);            <span class="hljs-keyword">auto</span> res = query(<span class="hljs-number">1</span>,x,y);                        <span class="hljs-built_in">cout</span> &lt;&lt; res.tmax &lt;&lt; <span class="hljs-built_in">endl</span>;                    &#125;<span class="hljs-keyword">else</span>&#123;            update(<span class="hljs-number">1</span>,x,y);        &#125;            &#125;    &#125;</code></pre><h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2><p>给定一个包含n个点（编号为1~n）的无向图，初始时图中没有边。</p><p>现在要进行m个操作，操作共有三种：</p><p>“C a b”，在点a和点b之间连一条边，a和b可能相等；<br />“Q1 a b”，询问点a和点b是否在同一个连通块中，a和b可能相等；<br />“Q2 a”，询问点a所在连通块中点的数量；</p><h4 id="输入格式-8"><a class="markdownIt-Anchor" href="#输入格式-8"></a> 输入格式</h4><p>第一行输入整数n和m。</p><p>接下来m行，每行包含一个操作指令，指令为“C a b”，“Q1 a b”或“Q2 a”中的一种。</p><h4 id="输出格式-9"><a class="markdownIt-Anchor" href="#输出格式-9"></a> 输出格式</h4><p>对于每个询问指令”Q1 a b”，如果a和b在同一个连通块中，则输出“Yes”，否则输出“No”。</p><p>对于每个询问指令“Q2 a”，输出一个整数表示点a所在连通块中点的数量</p><p>每个结果占一行。</p><h4 id="数据范围-9"><a class="markdownIt-Anchor" href="#数据范围-9"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-9"><a class="markdownIt-Anchor" href="#输入样例-9"></a> 输入样例</h4><p>5 5<br />C 1 2<br />Q1 1 2<br />Q2 1<br />C 2 5<br />Q2 5</p><h4 id="输出样例-9"><a class="markdownIt-Anchor" href="#输出样例-9"></a> 输出样例</h4><p>Yes<br />2<br />3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> p[M];<span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span>[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);    <span class="hljs-keyword">return</span> p[x];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        p[i] = i,<span class="hljs-built_in">size</span>[i] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">char</span> op[<span class="hljs-number">3</span>];        <span class="hljs-keyword">int</span> a,b;        <span class="hljs-built_in">cin</span> &gt;&gt;op;        <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-string">'C'</span>)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt;a&gt;&gt;b;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 若在同一集合则跳过</span>            <span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(b)] += <span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(a)];            p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>(op[<span class="hljs-number">1</span>] == <span class="hljs-string">'1'</span>)&#123;                <span class="hljs-built_in">cin</span> &gt;&gt;a&gt;&gt;b;                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b))&#123;                    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Yes"</span>;                &#125;<span class="hljs-keyword">else</span>                    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;                <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-built_in">cin</span> &gt;&gt;a;                <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(a)] &lt;&lt;<span class="hljs-string">'\n'</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="模拟堆"><a class="markdownIt-Anchor" href="#模拟堆"></a> 模拟堆</h3><p>维护一个集合，初始时集合为空，支持如下几种操作：</p><p>“I x”，插入一个数x；<br />“PM”，输出当前集合中的最小值；<br />“DM”，删除当前集合中的最小值（数据保证此时的最小值唯一）；<br />“D k”，删除第k个插入的数；<br />“C k x”，修改第k个插入的数，将其变为x；<br />现在要进行N次操作，对于所有第2个操作，输出当前集合的最小值。</p><h4 id="输入格式-9"><a class="markdownIt-Anchor" href="#输入格式-9"></a> 输入格式</h4><p>第一行包含整数N。</p><p>接下来N行，每行包含一个操作指令，操作指令为”I x”，”PM”，”DM”，”D k”或”C k x”中的一种。</p><h4 id="输出格式-10"><a class="markdownIt-Anchor" href="#输出格式-10"></a> 输出格式</h4><p>对于每个输出指令“PM”，输出一个结果，表示当前集合中的最小值。</p><p>每个结果占一行。</p><h4 id="数据范围-10"><a class="markdownIt-Anchor" href="#数据范围-10"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>105</mn></mrow><annotation encoding="application/x-tex">1≤N≤105</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>109</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>109</mn></mrow><annotation encoding="application/x-tex">−109≤x≤109</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span><br />数据保证合法。</p><h4 id="输入样例-10"><a class="markdownIt-Anchor" href="#输入样例-10"></a> 输入样例</h4><p>8<br />I -10<br />PM<br />I -10<br />D 1<br />C 2 8<br />I 6<br />PM<br />DM</p><h4 id="输出样例-10"><a class="markdownIt-Anchor" href="#输出样例-10"></a> 输出样例</h4><p>-10<br />6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],<span class="hljs-built_in">size</span>;<span class="hljs-keyword">int</span> hp[M]; <span class="hljs-comment">// 堆中下标-&gt;插入下标</span><span class="hljs-keyword">int</span> ph[M]; <span class="hljs-comment">// 插入下标-&gt;堆中下标</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;    swap(ph[hp[x]],ph[hp[y]]);    swap(hp[x],hp[y]);    swap(h[x],h[y]);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> t = x;    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * x &lt;= <span class="hljs-built_in">size</span> &amp;&amp; h[<span class="hljs-number">2</span> * x] &lt; h[t]) t = <span class="hljs-number">2</span> * x;    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * x + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">size</span> &amp;&amp; h[<span class="hljs-number">2</span> * x +<span class="hljs-number">1</span>] &lt; h[t]) t = <span class="hljs-number">2</span> * x + <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(x != t)&#123;        heap_swap(t,x);        down(t);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">while</span>(x/<span class="hljs-number">2</span> &amp;&amp; h[x/<span class="hljs-number">2</span>] &gt; h[x])&#123;        heap_swap(x/<span class="hljs-number">2</span>,x);        x/=<span class="hljs-number">2</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-built_in">string</span> op;    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; op;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"I"</span>)&#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">cin</span> &gt;&gt; x;            h[++<span class="hljs-built_in">size</span>] = x;            ++m;            ph[m] = <span class="hljs-built_in">size</span>;            hp[<span class="hljs-built_in">size</span>] = m;            up(<span class="hljs-built_in">size</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"PM"</span>)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"DM"</span>)&#123;            heap_swap(<span class="hljs-number">1</span>,<span class="hljs-built_in">size</span>);            <span class="hljs-built_in">size</span>--;            down(<span class="hljs-number">1</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"D"</span>)&#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">cin</span> &gt;&gt; x;            x = ph[x];  <span class="hljs-comment">// 保存删除位置</span>            heap_swap(x,<span class="hljs-built_in">size</span>);            <span class="hljs-built_in">size</span>--;            down(x),up(x);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">int</span> k,x;            <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt;x;            h[ph[k]] = x;            down(ph[k]),up(ph[k]);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="模拟散列表"><a class="markdownIt-Anchor" href="#模拟散列表"></a> 模拟散列表</h2><p>维护一个集合，支持如下几种操作：</p><p>“I x”，插入一个数x；<br />“Q x”，询问数x是否在集合中出现过；<br />现在要进行N次操作，对于每个询问操作输出对应的结果。</p><h4 id="输入格式-10"><a class="markdownIt-Anchor" href="#输入格式-10"></a> 输入格式</h4><p>第一行包含整数N，表示操作数量。</p><p>接下来N行，每行包含一个操作指令，操作指令为”I x”，”Q x”中的一种。</p><h4 id="输出格式-11"><a class="markdownIt-Anchor" href="#输出格式-11"></a> 输出格式</h4><p>对于每个询问指令“Q x”，输出一个询问结果，如果x在集合中出现过，则输出“Yes”，否则输出“No”。</p><p>每个结果占一行。</p><h4 id="数据范围-11"><a class="markdownIt-Anchor" href="#数据范围-11"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>109</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">−109≤x≤10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-11"><a class="markdownIt-Anchor" href="#输入样例-11"></a> 输入样例</h4><p>5<br />I 1<br />I 2<br />I 3<br />Q 2<br />Q 5</p><h4 id="输出样例-11"><a class="markdownIt-Anchor" href="#输出样例-11"></a> 输出样例</h4><p>Yes<br />No</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">3</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-comment">// chining</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> hv = (x % M + M )%M;    e[idx] = x,ne[idx] = h[hv], h[hv] = idx++;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> hv = (x % M + M )%M;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[hv];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;        <span class="hljs-keyword">if</span>(e[i] == x) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*M);    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">char</span> op;    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; x;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'I'</span>) insert(x);        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Yes"</span>;            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;            <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2><p>给定一个n个点m条边的有向图，图中可能存在重边和自环。</p><p>请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出-1。</p><p>若一个由图中所有点构成的序列A满足：对于图中的每条边(x, y)，x在A中都出现在y之前，则称A是该图的一个拓扑序列。</p><h4 id="输入格式-11"><a class="markdownIt-Anchor" href="#输入格式-11"></a> 输入格式</h4><p>第一行包含两个整数n和m</p><p>接下来m行，每行包含两个整数x和y，表示存在一条从点x到点y的有向边(x, y)。</p><h4 id="输出格式-12"><a class="markdownIt-Anchor" href="#输出格式-12"></a> 输出格式</h4><p>共一行，如果存在拓扑序列，则输出拓扑序列。</p><p>否则输出-1。</p><h4 id="数据范围-12"><a class="markdownIt-Anchor" href="#数据范围-12"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-12"><a class="markdownIt-Anchor" href="#输入样例-12"></a> 输入样例</h4><p>3 3<br />1 2<br />2 3<br />1 3</p><h4 id="输出样例-12"><a class="markdownIt-Anchor" href="#输出样例-12"></a> 输出样例</h4><p>1 2 3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> q[M],d[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh =<span class="hljs-number">0</span> ,tt = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)        <span class="hljs-keyword">if</span>(!d[i]) q[++tt] = i;    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            d[j] --;            <span class="hljs-keyword">if</span>(!d[j]) q[++tt] = j;        &#125;    &#125;    <span class="hljs-keyword">return</span> tt == n<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b;        add(a,b);        d[b] ++;    &#125;    <span class="hljs-keyword">if</span>(topsort())&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)            <span class="hljs-built_in">cout</span> &lt;&lt; q[i] &lt;&lt;<span class="hljs-string">" "</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"-1"</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="最短路"><a class="markdownIt-Anchor" href="#最短路"></a> 最短路</h2><h3 id="朴素dijkstra-on2"><a class="markdownIt-Anchor" href="#朴素dijkstra-on2"></a> 朴素Dijkstra <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h3><ul><li>没有负权边</li><li>稠密图 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>&lt;</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m &lt; n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br />给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。</li></ul><p>请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。</p><h4 id="输入格式-12"><a class="markdownIt-Anchor" href="#输入格式-12"></a> 输入格式</h4><p>第一行包含整数n和m。</p><p>接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-13"><a class="markdownIt-Anchor" href="#输出格式-13"></a> 输出格式</h4><p>输出一个整数，表示1号点到n号点的最短距离。</p><p>如果路径不存在，则输出-1。</p><h4 id="数据范围-13"><a class="markdownIt-Anchor" href="#数据范围-13"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br />图中涉及边长均不超过10000。</p><h4 id="输入样例-13"><a class="markdownIt-Anchor" href="#输入样例-13"></a> 输入样例</h4><p>3 3<br />1 2 2<br />2 3 1<br />1 3 4</p><h4 id="输出样例-13"><a class="markdownIt-Anchor" href="#输出样例-13"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">510</span>;<span class="hljs-keyword">int</span> g[M][M],d[M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x7f7f7f7f</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">djstra</span><span class="hljs-params">()</span></span>&#123;    d[<span class="hljs-number">1</span>] =<span class="hljs-number">0</span> ;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || d[j] &lt; d[t])) t = j;        &#125;        st[t] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n; j++)&#123;            <span class="hljs-keyword">if</span>(g[t][j] != INF) d[j] = <span class="hljs-built_in">min</span>(d[j],d[t] + g[t][j]);        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(g));    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b&gt;&gt; c;        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b],c);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; djstra();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="堆优化dijkstra-omlogn"><a class="markdownIt-Anchor" href="#堆优化dijkstra-omlogn"></a> 堆优化Dijkstra <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><ul><li>没有负权边</li><li>稀疏图<br />给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为非负值。</li></ul><p>请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。</p><h4 id="输入格式-13"><a class="markdownIt-Anchor" href="#输入格式-13"></a> 输入格式</h4><p>第一行包含整数n和m。</p><p>接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-14"><a class="markdownIt-Anchor" href="#输出格式-14"></a> 输出格式</h4><p>输出一个整数，表示1号点到n号点的最短距离。</p><p>如果路径不存在，则输出-1。</p><h4 id="数据范围-14"><a class="markdownIt-Anchor" href="#数据范围-14"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br />图中涉及边长均不小于0，且不超过10000。</p><h4 id="输入样例-14"><a class="markdownIt-Anchor" href="#输入样例-14"></a> 输入样例</h4><p>3 3<br />1 2 2<br />2 3 1<br />1 3 4</p><h4 id="输出样例-14"><a class="markdownIt-Anchor" href="#输出样例-14"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx,w[M];<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x7f7f7f7f</span><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; PII;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">djs</span><span class="hljs-params">()</span></span>&#123;    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    priority_queue&lt;PII,<span class="hljs-built_in">vector</span>&lt;PII&gt;,greater&lt;PII&gt;&gt; pq;    pq.push(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);    <span class="hljs-keyword">while</span>(pq.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">auto</span> t= pq.top();pq.pop();        <span class="hljs-keyword">if</span>(st[t.second]) <span class="hljs-keyword">continue</span>;        st[t.second] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t.second]; i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            <span class="hljs-keyword">if</span>(d[j] &gt; d[t.second] + w[i])&#123;                d[j] = d[t.second] + w[i];                pq.push(&#123;d[j],j&#125;);            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt; a&gt;&gt; b&gt;&gt; c;        add(a,b,c);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; djs();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="b-f算法-onm"><a class="markdownIt-Anchor" href="#b-f算法-onm"></a> B-F算法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><ul><li>允许负权边</li><li>用于求限制k条边的最短路</li></ul><p>给定一个n个点m条边的有向图，图中可能存在重边和自环， 边权可能为负数。</p><p>请你求出从1号点到n号点的最多经过k条边的最短距离，如果无法从1号点走到n号点，输出impossible。</p><p>注意：图中可能 存在负权回路 。</p><h4 id="输入格式-14"><a class="markdownIt-Anchor" href="#输入格式-14"></a> 输入格式</h4><p>第一行包含三个整数n，m，k。</p><p>接下来m行，每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-15"><a class="markdownIt-Anchor" href="#输出格式-15"></a> 输出格式</h4><p>输出一个整数，表示从1号点到n号点的最多经过k条边的最短距离。</p><p>如果不存在满足条件的路径，则输出“impossible”。</p><h4 id="数据范围-15"><a class="markdownIt-Anchor" href="#数据范围-15"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>k</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,k≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>10000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤10000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br />任意边长的绝对值不超过10000。</p><h4 id="输入样例-15"><a class="markdownIt-Anchor" href="#输入样例-15"></a> 输入样例</h4><p>3 3 1<br />1 2 1<br />2 3 1<br />1 3 3</p><h4 id="输出样例-15"><a class="markdownIt-Anchor" href="#输出样例-15"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> a,b,w;&#125;edges[M];<span class="hljs-keyword">int</span> n,m,k;<span class="hljs-keyword">bool</span> st[N];<span class="hljs-keyword">int</span> d[N];<span class="hljs-keyword">int</span> backup[N]; <span class="hljs-comment">// 备份上一次循环的结果</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bf</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; k;i++)&#123;        <span class="hljs-built_in">memcpy</span>(backup,d,<span class="hljs-keyword">sizeof</span>(d));        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;m;j++)&#123;            <span class="hljs-comment">// 使用上一次循环结果更新， 防止连续更新</span>            <span class="hljs-keyword">if</span>(d[edges[j].b] &gt; backup[edges[j].a] + edges[j].w)&#123;                d[edges[j].b] = backup[edges[j].a] + edges[j].w;            &#125;        &#125;    &#125;    <span class="hljs-comment">// 由于负权边 d[n] 可能比INF小</span>    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">0x7f7f7f7f</span> /<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m&gt;&gt;k;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b &gt;&gt; c;        edges[i] = &#123;a,b,c&#125;;    &#125;    <span class="hljs-keyword">int</span> res = bf();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="spfa-平均om-最坏onm"><a class="markdownIt-Anchor" href="#spfa-平均om-最坏onm"></a> spfa 平均<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span> 最坏<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><blockquote><p>bf算法每次遍历所有边，spfa仅更新距离发生变化的边</p></blockquote><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],w[M],idx;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx ++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push(<span class="hljs-number">1</span>);    st[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">int</span> t = q.front();        q.pop();        st[t] = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            <span class="hljs-keyword">if</span>(d[j] &gt; d[t] + w[i])&#123;                d[j] = d[t] + w[i];                <span class="hljs-keyword">if</span>(!st[j]) &#123;                    st[j] = <span class="hljs-number">1</span>;                    q.push(j);                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">0x7f7f7f7f</span> /<span class="hljs-number">2</span> ) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        add(a,b,c);    &#125;    <span class="hljs-keyword">int</span> res = spfa();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2><h3 id="朴素prim-on2"><a class="markdownIt-Anchor" href="#朴素prim-on2"></a> 朴素prim  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h3><ul><li>用于稠密图</li></ul><p>给定一个n个点m条边的无向图，图中可能存在重边和自环，边权可能为负数。</p><p>求最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><p>给定一张边带权的无向图G=(V, E)，其中V表示图中点的集合，E表示图中边的集合，n=|V|，m=|E|。</p><p>由V中的全部n个顶点和E中n-1条边构成的无向连通子图被称为G的一棵生成树，其中边的权值之和最小的生成树被称为无向图G的最小生成树。</p><h4 id="输入格式-15"><a class="markdownIt-Anchor" href="#输入格式-15"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含三个整数u，v，w，表示点u和点v之间存在一条权值为w的边。</p><h4 id="输出格式-16"><a class="markdownIt-Anchor" href="#输出格式-16"></a> 输出格式</h4><p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><h4 id="数据范围-16"><a class="markdownIt-Anchor" href="#数据范围-16"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br />图中涉及边的边权的绝对值均不超过10000。</p><h4 id="输入样例-16"><a class="markdownIt-Anchor" href="#输入样例-16"></a> 输入样例</h4><p>4 5<br />1 2 1<br />1 3 2<br />1 4 3<br />2 3 2<br />3 4 4</p><h4 id="输出样例-16"><a class="markdownIt-Anchor" href="#输出样例-16"></a> 输出样例</h4><p>6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">510</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF =<span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-keyword">int</span> g[M][M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 循环n次，每次加入一个点到mst集合</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; n;i++)&#123;        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j&lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || d[j] &lt; d[t])) t =  j;        &#125;        <span class="hljs-keyword">if</span>(i &amp;&amp; d[t] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;         st[t] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(i) res += d[t];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(g[t][j] != INF)&#123;                d[j] = <span class="hljs-built_in">min</span>(d[j],g[t][j]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span> d);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)            <span class="hljs-keyword">if</span>(i == j) g[i][j] = <span class="hljs-number">0</span>;            <span class="hljs-keyword">else</span> g[i][j] = INF;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        g[a][b] = g[b][a] = <span class="hljs-built_in">min</span>(g[a][b],c);    &#125;    <span class="hljs-keyword">int</span> res = prim();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="克鲁斯卡尔-omlogm"><a class="markdownIt-Anchor" href="#克鲁斯卡尔-omlogm"></a> 克鲁斯卡尔 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><ul><li>用于稀疏图<br />给定一个n个点m条边的无向图，图中可能存在重边和自环，边权可能为负数。</li></ul><p>求最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><p>给定一张边带权的无向图G=(V, E)，其中V表示图中点的集合，E表示图中边的集合，n=|V|，m=|E|。</p><p>由V中的全部n个顶点和E中n-1条边构成的无向连通子图被称为G的一棵生成树，其中边的权值之和最小的生成树被称为无向图G的最小生成树。</p><h4 id="输入格式-16"><a class="markdownIt-Anchor" href="#输入格式-16"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含三个整数u，v，w，表示点u和点v之间存在一条权值为w的边。</p><h4 id="输出格式-17"><a class="markdownIt-Anchor" href="#输出格式-17"></a> 输出格式</h4><p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><h4 id="数据范围-17"><a class="markdownIt-Anchor" href="#数据范围-17"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤2∗105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br />图中涉及边的边权的绝对值均不超过1000。</p><h4 id="输入样例-17"><a class="markdownIt-Anchor" href="#输入样例-17"></a> 输入样例</h4><p>4 5<br />1 2 1<br />1 3 2<br />1 4 3<br />2 3 2<br />3 4 4</p><h4 id="输出样例-17"><a class="markdownIt-Anchor" href="#输出样例-17"></a> 输出样例</h4><p>6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> a,b,w;    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge&amp; e)&#123;        <span class="hljs-keyword">return</span> w &lt; e.w;    &#125;&#125;e[M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> p[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);    <span class="hljs-keyword">return</span> p[x];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        p[i] = i;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        e[i] = &#123;a,b,c&#125;;    &#125;    sort(e,e + m);    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>,cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        a = <span class="hljs-built_in">find</span>(e[i].a),b = <span class="hljs-built_in">find</span>(e[i].b);        <span class="hljs-keyword">if</span>(a != b)&#123;            p[a] = b;            cnt ++;            res += e[i].w;        &#125;;    &#125;    <span class="hljs-keyword">if</span>(cnt != n<span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="二分图"><a class="markdownIt-Anchor" href="#二分图"></a> 二分图</h2><ul><li>充要条件: 没有奇数环</li></ul><h3 id="染色法判定二分图"><a class="markdownIt-Anchor" href="#染色法判定二分图"></a> 染色法判定二分图</h3><p>给定一个n个点m条边的无向图，图中可能存在重边和自环。</p><p>请你判断这个图是否是二分图。</p><h4 id="输入格式-17"><a class="markdownIt-Anchor" href="#输入格式-17"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含两个整数u和v，表示点u和点v之间存在一条边。</p><h4 id="输出格式-18"><a class="markdownIt-Anchor" href="#输出格式-18"></a> 输出格式</h4><p>如果给定图是二分图，则输出“Yes”，否则输出“No”。</p><h4 id="数据范围-18"><a class="markdownIt-Anchor" href="#数据范围-18"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-18"><a class="markdownIt-Anchor" href="#输入样例-18"></a> 输入样例</h4><p>4 4<br />1 3<br />1 4<br />2 3<br />2 4</p><h4 id="输出样例-18"><a class="markdownIt-Anchor" href="#输出样例-18"></a> 输出样例</h4><p>Yes</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> color[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-comment">// 将点u染成c色</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> c)</span></span>&#123;    color[u] = c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u];i !=<span class="hljs-number">-1</span>;i = ne[i])&#123;        <span class="hljs-keyword">int</span> j = e[i];        <span class="hljs-keyword">if</span>(!color[j])&#123;            <span class="hljs-keyword">if</span>(!dfs(j,<span class="hljs-number">3</span> - c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        add(a,b),add(b,a);    &#125;    <span class="hljs-keyword">bool</span> res = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!color[i])&#123;            <span class="hljs-keyword">if</span>(!dfs(i,<span class="hljs-number">1</span>))&#123;                res = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(res) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Yes"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="最大匹配"><a class="markdownIt-Anchor" href="#最大匹配"></a> 最大匹配</h3><p>给定一个二分图，其中左半部包含n1个点（编号1<sub>n1），右半部包含n2个点（编号1</sub>n2），二分图共包含m条边。</p><p>数据保证任意一条边的两个端点都不可能在同一部分中。</p><p>请你求出二分图的最大匹配数。</p><blockquote><p>二分图的匹配：给定一个二分图G，在G的一个子图M中，M的边集{E}中的任意两条边都不依附于同一个顶点，则称M是一个匹配。<br />二分图的最大匹配：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><h4 id="输入格式-18"><a class="markdownIt-Anchor" href="#输入格式-18"></a> 输入格式</h4><p>第一行包含三个整数 n1、 n2 和 m。</p><p>接下来m行，每行包含两个整数u和v，表示左半部点集中的点u和右半部点集中的点v之间存在一条边。</p><h4 id="输出格式-19"><a class="markdownIt-Anchor" href="#输出格式-19"></a> 输出格式</h4><p>输出一个整数，表示二分图的最大匹配数。</p><h4 id="数据范围-19"><a class="markdownIt-Anchor" href="#数据范围-19"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mn>2</mn><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n1,n2≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>u</mi><mo>≤</mo><mi>n</mi><mn>1</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤u≤n1,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>v</mi><mo>≤</mo><mi>n</mi><mn>2</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤v≤n2,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-19"><a class="markdownIt-Anchor" href="#输入样例-19"></a> 输入样例</h4><p>2 2 4<br />1 1<br />1 2<br />2 1<br />2 2</p><h4 id="输出样例-19"><a class="markdownIt-Anchor" href="#输出样例-19"></a> 输出样例</h4><p>2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>,M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> n1,n2,m;<span class="hljs-keyword">bool</span> st[N];<span class="hljs-keyword">int</span> match[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx]= h[a],h[a] = idx++;&#125;<span class="hljs-comment">// 为x找到对应点</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])&#123;        <span class="hljs-keyword">int</span> j = e[i];        <span class="hljs-keyword">if</span>(!st[j])&#123; <span class="hljs-comment">// 女生j没有访问过</span>            st[j] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))&#123; <span class="hljs-comment">// 女生j没有男友或给j的男友找到新的女友</span>                match[j] = x;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);    <span class="hljs-built_in">cin</span> &gt;&gt; n1&gt;&gt; n2&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        add(a,b);    &#125;    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n1;i++)&#123;        <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> st); <span class="hljs-comment">// 将女生初始化，每个女生仅访问一次</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) res++;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="简单数学"><a class="markdownIt-Anchor" href="#简单数学"></a> 简单数学</h2><ul><li>对于正整数n，仅有一个大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的素数</li></ul><h3 id="筛素数"><a class="markdownIt-Anchor" href="#筛素数"></a> 筛素数</h3><h4 id="埃氏筛法-onloglogn"><a class="markdownIt-Anchor" href="#埃氏筛法-onloglogn"></a> 埃氏筛法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nloglogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span>+ <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> prime[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i])&#123;            prime[cnt++];            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i;j &lt;=n;j +=i) <span class="hljs-comment">// 筛掉i的倍数</span>                st[j] = <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; cnt;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="线性筛法-on"><a class="markdownIt-Anchor" href="#线性筛法-on"></a> 线性筛法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h4><ul><li>x只会被最小质因子筛掉</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span>+ <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> prime[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i]) prime[cnt++] = i;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;prime[j] &lt;= n/i;j++)&#123;            st[prime[j] * i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// prime[j] 小于i的所有质因子，则prime[j] 为 prime[j]*i 的最小质因子</span>            <span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// prime[j] 是i的最小质因子,因此，prime[j] 是i*prime[j] 的最小质因子</span>        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; cnt;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h3><h4 id="求约数-onsqrtn"><a class="markdownIt-Anchor" href="#求约数-onsqrtn"></a> 求约数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; p;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= x/i;i++)&#123;            <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;                p.push_back(i);                <span class="hljs-keyword">if</span>(i != x/i)p.push_back(x/i);            &#125;        &#125;        sort(p.<span class="hljs-built_in">begin</span>(),p.<span class="hljs-built_in">end</span>());        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : p)            <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt;<span class="hljs-string">" "</span>;        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;        p.<span class="hljs-built_in">clear</span>();    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">算</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">基</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">理</mi><mo>:</mo><mi>N</mi><mo>=</mo><munder><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><msubsup><mi>p</mi><mi>i</mi><msub><mi>α</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">算数基本定理:N=\prod_{i=1}p_i^{\alpha_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="约数个数"><a class="markdownIt-Anchor" href="#约数个数"></a> 约数个数</h4><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>中约数的个数等于每个数倍数的个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mi>n</mi><mi>i</mi></mfrac><mo>=</mo><mi>n</mi><mi>l</mi><mi>n</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n}{\frac{n}{i}} = nlnn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149292em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span></span></span></span></p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>α</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\prod_{i=1}^{n}(\alpha_i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> +<span class="hljs-number">7</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=x/i;i++)&#123;            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                x/=i;                cnt ++;            &#125;            <span class="hljs-keyword">if</span>(cnt) <span class="hljs-built_in">map</span>[i] += cnt;        &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">map</span>[x] += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : <span class="hljs-built_in">map</span>)&#123;        res = res *(a.second + <span class="hljs-number">1</span>) %mod;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="约数之和"><a class="markdownIt-Anchor" href="#约数之和"></a> 约数之和</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><munder><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow></munder><msubsup><mi>p</mi><mi>i</mi><msub><mi>α</mi><mi>j</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">\prod_{i=1}^{n}\sum_{j=0}p_i^{\alpha_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0651740000000003em;vertical-align:-1.413777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.843512em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.2421200000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>给定n个正整数ai，请你输出这些数的乘积的约数之和，答案对109+7取模。</p><h4 id="输入格式-19"><a class="markdownIt-Anchor" href="#输入格式-19"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含一个整数ai。</p><h4 id="输出格式-20"><a class="markdownIt-Anchor" href="#输出格式-20"></a> 输出格式</h4><p>输出一个整数，表示所给正整数的乘积的约数之和，答案需对109+7取模。</p><h4 id="数据范围-20"><a class="markdownIt-Anchor" href="#数据范围-20"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤100,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mi>i</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>109</mn></mrow><annotation encoding="application/x-tex">1≤ai≤2∗109</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></p><h4 id="输入样例-20"><a class="markdownIt-Anchor" href="#输入样例-20"></a> 输入样例</h4><p>3<br />2<br />6<br />8</p><h4 id="输出样例-20"><a class="markdownIt-Anchor" href="#输出样例-20"></a> 输出样例</h4><p>252</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= x/i;i++)&#123;            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                x/=i;                cnt ++;            &#125;            <span class="hljs-keyword">if</span>(cnt) <span class="hljs-built_in">map</span>[i] += cnt;        &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">map</span>[x] += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t : <span class="hljs-built_in">map</span>)&#123;        <span class="hljs-keyword">long</span> p = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> a = t.first,b = t.second;        <span class="hljs-keyword">while</span>(b--)&#123;            p = (p * a + <span class="hljs-number">1</span>)%mod;        &#125;        res = res * p %mod;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="欧几里得算法"><a class="markdownIt-Anchor" href="#欧几里得算法"></a> 欧几里得算法</h4><ul><li>if d/a,d/b then d/(ax+by)</li></ul><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(b,a\ mod \ b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(a - c*b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>−</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>d</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d/a,d/b-&gt;d/(a-c*b)-&gt;d/(a-d*b+c*b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br />公约数集合相同</p></blockquote><h3 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h3><ul><li>互质:公约数只有1的两个整数</li></ul><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">中</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">数</mi></mrow><annotation encoding="application/x-tex">\phi(n):[1,n]中与n互质的数的个数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span></span></span></span><br />给定n个正整数ai，请你求出每个数的欧拉函数。</p></blockquote><h4 id="欧拉函数的定义"><a class="markdownIt-Anchor" href="#欧拉函数的定义"></a> 欧拉函数的定义</h4><p>1 ~ n 中与 n 互质的数的个数被称为欧拉函数，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。<br />若在算数基本定理中， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>p</mi><mi>x</mi><msub><mi>a</mi><mi>x</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">N=p_1^{a_1}p_2^{a_2}...p_x^{a_x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> ，则：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n) = n\prod_{i=1}^x(1-\frac{1}{p_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><h4 id="输入格式-20"><a class="markdownIt-Anchor" href="#输入格式-20"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含一个正整数ai。</p><h4 id="输出格式-21"><a class="markdownIt-Anchor" href="#输出格式-21"></a> 输出格式</h4><p>输出共n行，每行输出一个正整数ai的欧拉函数。</p><h4 id="数据范围-21"><a class="markdownIt-Anchor" href="#数据范围-21"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤100,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mi>i</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1≤ai≤2∗10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-21"><a class="markdownIt-Anchor" href="#输入样例-21"></a> 输入样例</h4><p>3<br />3<br />6<br />8</p><h4 id="输出样例-21"><a class="markdownIt-Anchor" href="#输出样例-21"></a> 输出样例</h4><p>2<br />2<br />4</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">int</span> res = x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=x/i;i++)            <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;                res = res / i * (i - <span class="hljs-number">1</span>);                <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                    x/=i;                &#125;            &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) res = res /x*(x<span class="hljs-number">-1</span>);        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="筛法求欧拉函数"><a class="markdownIt-Anchor" href="#筛法求欧拉函数"></a> 筛法求欧拉函数</h3><p>给定一个正整数n，求1~n中每个数的欧拉函数之和。</p><h4 id="输入格式-21"><a class="markdownIt-Anchor" href="#输入格式-21"></a> 输入格式</h4><p>共一行，包含一个整数n。</p><h4 id="输出格式-22"><a class="markdownIt-Anchor" href="#输出格式-22"></a> 输出格式</h4><p>共一行，包含一个整数，表示1~n中每个数的欧拉函数之和。</p><h4 id="数据范围-22"><a class="markdownIt-Anchor" href="#数据范围-22"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">1≤n≤10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-22"><a class="markdownIt-Anchor" href="#输入样例-22"></a> 输入样例</h4><p>6</p><h4 id="输出样例-22"><a class="markdownIt-Anchor" href="#输出样例-22"></a> 输出样例</h4><p>12</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> primes[M];<span class="hljs-keyword">int</span> cnt;<span class="hljs-keyword">int</span> phi[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i])&#123;            primes[cnt++] = i;            phi[i] = i<span class="hljs-number">-1</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)&#123;            st[primes[j] * i] = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">if</span>(i % primes[j] == <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">// primes[j] 为i的质因子</span>                phi[i * primes[j]] = phi[i]*primes[j];                <span class="hljs-keyword">break</span>;            &#125;            phi[i * primes[j]] = phi[i]*(primes[j] - <span class="hljs-number">1</span>);        &#125;    &#125;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i &lt;=n;i++) res += phi[i];    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="欧拉定理"><a class="markdownIt-Anchor" href="#欧拉定理"></a> 欧拉定理</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mo separator="true">,</mo><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a,n互质,a^{\phi(n)}\equiv1(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h4 id="证明"><a class="markdownIt-Anchor" href="#证明"></a> 证明</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">中</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">为</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">let\ [1,n]中与n互质的数为a_1,a_2,...,a_{\phi(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">为</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><mi>a</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>a</mi><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>a</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mi mathvariant="normal">与</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">为</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">集</mi><mi mathvariant="normal">合</mi></mrow><annotation encoding="application/x-tex">则aa_1,aa_2,...,aa_{\phi(n)}\ mod\ n 与a_1,a_2,...a_{\phi(n)}为同一集合</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04964em;vertical-align:-0.3551999999999999em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">与</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">集</span><span class="mord cjk_fallback">合</span></span></span></span></p><blockquote><p>反证：若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mi>a</mi><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">则</mi><mi>a</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">且</mi><mi>a</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">则</mi><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">矛</mi><mi mathvariant="normal">盾</mi></mrow><annotation encoding="application/x-tex">aa_i=aa_j,则a(a_i-a_j)\equiv0(mod\ n),且a与n互质，则a_i=a_j,矛盾</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">且</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">矛</span><span class="mord cjk_fallback">盾</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{\phi(n)}(a_1a_2...a_{\phi(n)})\equiv(a_1a_2...a_{\phi(n)}) (mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2431999999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">则a^{\phi(n)}\equiv1(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">则</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p></blockquote><h3 id="扩展欧几里得"><a class="markdownIt-Anchor" href="#扩展欧几里得"></a> 扩展欧几里得</h3><p>给定n对正整数ai,bi，对于每对数，求出一组xi,yi，使其满足ai∗xi+bi∗yi=gcd(ai,bi)。</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>b</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = gcd(b,a-\lfloor{\frac{a}{b}}\rfloor*b,y,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">即</mi><mo>:</mo><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">即:x(a-\lfloor{\frac{a}{b}}\rfloor*b)+by = d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">xa+(y-\lfloor{\frac{a}{b}}\rfloor*x) = d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></p></blockquote><h4 id="输入格式-22"><a class="markdownIt-Anchor" href="#输入格式-22"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含两个整数ai,bi。</p><h4 id="输出格式-23"><a class="markdownIt-Anchor" href="#输出格式-23"></a> 输出格式</h4><p>输出共n行，对于每组ai,bi，求出一组满足条件的xi,yi，每组结果占一行。</p><p>本题答案不唯一，输出任意满足条件的xi,yi均可。</p><h4 id="数据范围-23"><a class="markdownIt-Anchor" href="#数据范围-23"></a> 数据范围</h4><p>1≤n≤105,<br />1≤ai,bi≤2∗109</p><h4 id="输入样例-23"><a class="markdownIt-Anchor" href="#输入样例-23"></a> 输入样例</h4><p>2<br />4 6<br />8 18</p><h4 id="输出样例-23"><a class="markdownIt-Anchor" href="#输出样例-23"></a> 输出样例</h4><p>-1 1<br />-2 1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span>&amp;x,<span class="hljs-keyword">int</span>&amp;y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!b)&#123;        x = <span class="hljs-number">1</span>,y= <span class="hljs-number">0</span>;         <span class="hljs-keyword">return</span> a;    &#125;    <span class="hljs-keyword">int</span> d = exgcd(b,a%b,y,x);    y -= a/b*x;    <span class="hljs-keyword">return</span> d;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> a,b,x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        exgcd(a,b,x,y);        <span class="hljs-built_in">cout</span> &lt;&lt; x&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;y&lt;&lt;<span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="高斯消元"><a class="markdownIt-Anchor" href="#高斯消元"></a> 高斯消元</h3><p>输入一个包含n个方程n个未知数的线性方程组。</p><p>方程组中的系数为实数。</p><p>求解这个方程组。</p><h4 id="输入格式-23"><a class="markdownIt-Anchor" href="#输入格式-23"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含n+1个实数，表示一个方程的n个系数以及等号右侧的常数。</p><h4 id="输出格式-24"><a class="markdownIt-Anchor" href="#输出格式-24"></a> 输出格式</h4><p>如果给定线性方程组存在唯一解，则输出共n行，其中第i行输出第i个未知数的解，结果保留两位小数。</p><p>如果给定线性方程组存在无数解，则输出“Infinite group solutions”。</p><p>如果给定线性方程组无解，则输出“No solution”。</p><h4 id="数据范围-24"><a class="markdownIt-Anchor" href="#数据范围-24"></a> 数据范围</h4><p>1≤n≤100,<br />所有输入系数以及常数均保留两位小数，绝对值均不超过100。</p><h4 id="输入样例-24"><a class="markdownIt-Anchor" href="#输入样例-24"></a> 输入样例</h4><p>3<br />1.00 2.00 -1.00 -6.00<br />2.00 1.00 -3.00 -9.00<br />-1.00 -1.00 2.00 7.00</p><h4 id="输出样例-24"><a class="markdownIt-Anchor" href="#输出样例-24"></a> 输出样例</h4><p>1.00<br />-2.00<br />3.00</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">110</span>;<span class="hljs-keyword">double</span> m[M][M];<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> esp = <span class="hljs-number">1e-5</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;=n;j++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf "</span>,m[i][j]);        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;c &lt;n;c++)&#123;        <span class="hljs-keyword">int</span> t = r;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r;i &lt; n;i++)            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][c]) &gt; <span class="hljs-built_in">fabs</span>(m[t][c])) t = i;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[t][c]) &lt; esp) <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = c;i &lt;=n;i++) swap(m[t][i],m[r][i]);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n;i &gt;=c;i--) m[r][i] /= m[r][c];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r + <span class="hljs-number">1</span>;i &lt; n;i++)&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][c]) &gt; esp)&#123;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = n;j &gt;=c;j--)                    m[i][j] -= m[r][j]*m[i][c];            &#125;        &#125;        r++;    &#125;    <span class="hljs-keyword">if</span>(r &lt; n)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r;i &lt; n;i++)            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][n]) &gt; esp)                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>;j &lt; n;j++)            m[i][n] -= m[j][n]*m[i][j];    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;=n;j++)            <span class="hljs-built_in">cin</span> &gt;&gt; m[i][j];    <span class="hljs-keyword">int</span> t = solve();    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Infinite group solutions"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>)<span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No solution"</span>;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>,m[i][n]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/03/hello-world/"/>
    <url>/2020/07/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;mutex&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> RET,<span class="hljs-keyword">typename</span>... ARGS&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Obserable</span>&#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-keyword">using</span> Functor = function&lt;<span class="hljs-keyword">void</span> (ARGS...)&gt;;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(Functor&amp;&amp; func)</span></span>&#123;        <span class="hljs-function">lock_guard&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;        functors_.push_back(forward&lt;Functor&gt;(func));    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(ARGS&amp;&amp;... args)</span></span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> Functor&amp; f :functors_)&#123;            f(args...);        &#125;    &#125;<span class="hljs-keyword">private</span>:    mutex mutex_;    <span class="hljs-built_in">vector</span>&lt;Functor&gt; functors_;&#125;;</code></pre><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>w</mi><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\int_{-\infty}^{\infty}f(t)e^{-jwt}dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.384573em;vertical-align:-0.970281em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.970281em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span></span></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
