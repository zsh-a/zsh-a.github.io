<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux 网络编程</title>
    <link href="/2021/03/28/linux%20network%20programming/"/>
    <url>/2021/03/28/linux%20network%20programming/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>network programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Parsing</title>
    <link href="/2021/03/20/parsing/"/>
    <url>/2021/03/20/parsing/</url>
    
    <content type="html"><![CDATA[<h2 id="chomsky-文法"><a class="markdownIt-Anchor" href="#chomsky-文法"></a> CHOMSKY 文法</h2><h3 id="type-0"><a class="markdownIt-Anchor" href="#type-0"></a> Type 0</h3><ul><li>可以从<strong>任意多</strong>个符号产生<strong>任意多</strong>个符号</li></ul><p><code>, N E -&gt; and N</code></p><h3 id="type-1"><a class="markdownIt-Anchor" href="#type-1"></a> Type 1</h3><ul><li><p><em>monotonic</em></p><ul><li>左侧符号不多于右侧符号</li></ul></li><li><p><em>context-sensitive</em></p><ul><li>左侧仅有一个非终结符，并且替换后顺序不变</li><li><code>Name Comma Name End -&gt; Name and Name End</code> means `Comma -&gt; and``</li><li>context 不受影响</li></ul></li></ul><h3 id="type-2context-free"><a class="markdownIt-Anchor" href="#type-2context-free"></a> Type 2(context-free)</h3><ul><li>左侧仅有一个非终结符</li></ul><h4 id="extended-cf-grammars"><a class="markdownIt-Anchor" href="#extended-cf-grammars"></a> Extended CF grammars</h4><ul><li><code>Sequence -&gt; Something | Something Sequence</code> 可以写为 <code>Something^+</code></li><li><code>Something^?</code> zero or one Something</li></ul><p><strong>Book grammar</strong></p><pre><code class="hljs xl">B<span class="hljs-function"><span class="hljs-title">ook</span> -&gt;</span> Preface Chapter^+ ConclusionP<span class="hljs-function"><span class="hljs-title">reface</span> -&gt;</span> <span class="hljs-string">"PREFACE"</span> Paragraph+C<span class="hljs-function"><span class="hljs-title">hapter</span> -&gt;</span> <span class="hljs-string">"CHAPTER"</span> Number Paragraph^+P<span class="hljs-function"><span class="hljs-title">aragraph</span> -&gt;</span> Sentence^+S<span class="hljs-function"><span class="hljs-title">entence</span> -&gt;</span> ...C<span class="hljs-function"><span class="hljs-title">onclusion</span> -&gt;</span> <span class="hljs-string">"CONCLUSION"</span> Paragraph^+</code></pre><h3 id="type-3-regular-grammarsre"><a class="markdownIt-Anchor" href="#type-3-regular-grammarsre"></a> Type 3 (regular grammars,RE)</h3><ul><li><p>右侧只能包含一个非终结符，且该非终结符在最后</p></li><li><p>仅包含两个规则</p><ul><li>一个非终结符产生一个终结符</li><li>一个非终结符产生一个终结符并接一个非终结符</li></ul></li><li><p>e.g.</p><ul><li>&amp; == and</li><li><code>Sentence -&gt; t | d | h | List</code></li><li><code>List -&gt; t ListTail | d ListTail | h ListTai</code></li><li><code>ListTail -&gt; , List | &amp;t | &amp;d | &amp;h</code></li><li>可以简化为 <code>S -&gt; (([tdh],)*[tdh]&amp;)?[tdh]</code></li></ul></li></ul><h3 id="type-4finite-choice"><a class="markdownIt-Anchor" href="#type-4finite-choice"></a> Type 4(finite-choice)</h3><ul><li>右边不包含非终结符</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>computer network</title>
    <link href="/2021/03/09/computer%20network/"/>
    <url>/2021/03/09/computer%20network/</url>
    
    <content type="html"><![CDATA[<h1 id="如何连接nodes到网络"><a class="markdownIt-Anchor" href="#如何连接nodes到网络"></a> 如何连接Nodes到网络</h1><p>需要解决以下问题</p><ol><li><p><strong>encoding</strong></p><p>将bits编码发送到传输媒介上</p></li><li><p><strong>framing</strong></p><p>将bits描绘成可以传送到终端节点的完整消息</p></li><li><p><strong>error detection</strong></p><p>由于frame在传输过程中可能出错，因此需要错误检测功能</p></li><li><p><strong>reliable delivery</strong></p><p>使链路看起来可靠，尽管有时会出错</p></li><li><p><strong>media access control</strong></p><p>链路可能被多个主机共享，因此需要协调访问控制</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>os</title>
    <link href="/2021/02/19/os/"/>
    <url>/2021/02/19/os/</url>
    
    <content type="html"><![CDATA[<h1 id="内存管理"><a class="markdownIt-Anchor" href="#内存管理"></a> 内存管理</h1><h2 id="分页虚拟内存"><a class="markdownIt-Anchor" href="#分页虚拟内存"></a> 分页虚拟内存</h2><h3 id="tlb刷新"><a class="markdownIt-Anchor" href="#tlb刷新"></a> TLB刷新</h3><ul><li><p>AARCH64内核和应用程序使用不同页表</p><ul><li>页表地址分别存放在TTBR0_EL1和TTBR1_EL1</li><li>系统调用无需切换页表</li></ul></li><li><p>x86_64唯一页表基址存放在CR3</p><ul><li>将内核映射到高地址</li><li>避免系统调用TLB刷新开销</li></ul></li></ul><h3 id="如何降低tlb刷新开销"><a class="markdownIt-Anchor" href="#如何降低tlb刷新开销"></a> 如何降低TLB刷新开销</h3><ul><li><p><strong>为不同的页表打上标签</strong></p><ul><li>TLB缓存项都有标签，切换页表不需要刷新TLB</li></ul></li><li><p><strong>x86_64:PCID</strong></p><ul><li>PCID存储在CR3的低12位</li></ul></li><li><p><strong>AARCH64:ASID</strong></p><ul><li>OS为不同进程分配8/16位ASID,将ASID存在TTBR0_EL1的高8/16位</li></ul></li></ul><h3 id="tlb与多核"><a class="markdownIt-Anchor" href="#tlb与多核"></a> TLB与多核</h3><ul><li>需要刷新其他核的TLB吗？<ul><li>一个进程可能在多个核上运行</li></ul></li><li>如何知道需要刷新哪些核心?<ul><li>通过系统的调度信息</li></ul></li><li>怎么刷新其他核?<ul><li>x86_64 ：发送IPI中断某个核，通知他主动刷新</li><li>AARCH64 : 可在local CPU上刷新其他核TLB</li></ul></li></ul><h1 id="进程与线程"><a class="markdownIt-Anchor" href="#进程与线程"></a> 进程与线程</h1><h2 id="纤程"><a class="markdownIt-Anchor" href="#纤程"></a> 纤程</h2><h3 id="linux纤程支持-ucontext"><a class="markdownIt-Anchor" href="#linux纤程支持-ucontext"></a> Linux纤程支持 : ucontext</h3><ul><li><code>makecontext</code> 创建新ucontext</li><li><code>setcontext</code>  纤程切换</li><li><code>getcontext</code> 保存当前ucontext</li></ul><h1 id="ipc"><a class="markdownIt-Anchor" href="#ipc"></a> IPC</h1><h2 id="共享内存"><a class="markdownIt-Anchor" href="#共享内存"></a> 共享内存</h2><ul><li>操作系统为两个进程映射共同的内存区域</li><li>需要轮询是否有数据到达，导致资源浪费</li></ul><h2 id="消息传递"><a class="markdownIt-Anchor" href="#消息传递"></a> 消息传递</h2><ul><li>通过内核消息传递机制发送和接收消息</li><li><code>Send(message)</code> <code>Recv(message)</code> 会阻塞进程，不会浪费资源</li><li><code>Send</code> 可以非阻塞，增大通信带宽，引入超时机制防止资源浪费</li></ul><h1 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步</h1><h2 id="解决临界区问题的三个要求"><a class="markdownIt-Anchor" href="#解决临界区问题的三个要求"></a> 解决临界区问题的三个要求</h2><ul><li><strong>互斥访问</strong>：同一时刻仅有一个进程可以进入临界区</li><li><strong>有限等待</strong>：当一个进程在申请进入临界区后，必须在有限的时间获得许可进入临界区，不能无限等待</li><li><strong>空闲让进</strong>：当没有进程在临界区中时，必须在请求进入临界区的进程中选择一个进入临界区，保证程序正常推进</li></ul><h2 id="互斥访问实现"><a class="markdownIt-Anchor" href="#互斥访问实现"></a> 互斥访问实现</h2><ul><li><strong>关中断</strong>：保证执行过程不被打断. <em>仅适用于单核</em></li></ul><h3 id="compare-and-swapcas"><a class="markdownIt-Anchor" href="#compare-and-swapcas"></a> Compare And Swap(CAS)</h3><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CAS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* addr,<span class="hljs-keyword">int</span> expected,<span class="hljs-keyword">int</span> new_value)</span></span>&#123;    <span class="hljs-keyword">int</span> tmp = *addr;    <span class="hljs-keyword">if</span>(*addr == expected)        *addr = new_value;    <span class="hljs-keyword">return</span> tmp;&#125;</code></pre><p>CAS为硬件原子操作：</p><ul><li>Intel锁总线实现</li><li>ARM：采用Load Link, Store Condition<pre><code class="hljs asm">retry:   ldxr x0,addr #ll  cmp x0,expected  bne out  stxr x1,new_value,addr #sc  cbnx x1,retryout:</code></pre>修改时看addr是否被修改过，若修改过则重试</li></ul><h3 id="锁实现"><a class="markdownIt-Anchor" href="#锁实现"></a> 锁实现</h3><h4 id="自旋锁spinlock"><a class="markdownIt-Anchor" href="#自旋锁spinlock"></a> 自旋锁(Spinlock)</h4><p>lock操作</p><pre><code class="hljs c"><span class="hljs-keyword">while</span>(atomic_CAS(lock,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) != <span class="hljs-number">0</span>);</code></pre><p>unlock</p><pre><code class="hljs c">*lock = <span class="hljs-number">0</span>;</code></pre><ul><li>可能出现饥饿现象</li></ul><h4 id="排号锁ticket-lock"><a class="markdownIt-Anchor" href="#排号锁ticket-lock"></a> 排号锁(Ticket Lock)</h4><ul><li>保证竞争者的公平性</li><li>根据竞争者到达的先后顺序传递锁</li></ul><p><strong>lock操作</strong></p><pre><code class="hljs c"><span class="hljs-comment">// 拿号</span>my_ticket = atomic_FAA(&amp;lock-&gt;next,<span class="hljs-number">1</span>); <span class="hljs-comment">// fetch and add </span><span class="hljs-comment">// 等号</span><span class="hljs-keyword">while</span>(lock-&gt;owner != my_ticket);</code></pre><p><strong>unlock操作</strong></p><pre><code class="hljs c">lock-&gt;owner++;</code></pre><h4 id="读写锁"><a class="markdownIt-Anchor" href="#读写锁"></a> 读写锁</h4><ul><li>多个读者不互斥</li><li>读者与写者互斥</li></ul><h5 id="读者优先"><a class="markdownIt-Anchor" href="#读者优先"></a> 读者优先</h5><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rw_lock</span>&#123;</span>    <span class="hljs-keyword">int</span> reader;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">reader_lock</span>;</span> <span class="hljs-comment">// 锁住reader变量</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lock</span> <span class="hljs-title">writer_lock</span>;</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_reader</span><span class="hljs-params">(struct rw_lock* lock)</span></span>&#123;    lock(&amp;lock-&gt;reader_lock);    lock-&gt;reader++;    <span class="hljs-keyword">if</span>(lock-&gt;reader == <span class="hljs-number">1</span>)        lock(&amp;lock-&gt;writer_lock);    unlock(&amp;lock-&gt;reader_lock);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock_reader</span><span class="hljs-params">(struct rw_lock* lock)</span></span>&#123;    lock(&amp;lock-&gt;reader_lock);    lock-&gt;reader--;    <span class="hljs-keyword">if</span>(lock-&gt;reader == <span class="hljs-number">0</span>)        unlock(&amp;lock-&gt;writer_lock);    unlock(&amp;lock-&gt;reader_lock);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock_writer</span><span class="hljs-params">(struct rw_lock* lock)</span></span>&#123;    lock(&amp;lock-&gt;writer_lock);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock_writer</span><span class="hljs-params">(struct rw_lock* lock)</span></span>&#123;    unlock(&amp;lock-&gt;writer_lock);&#125;</code></pre><ul><li>需要一个reader_lock保护reader变量，如何提高读者性能</li></ul><p><strong>Read Copy Update(RCU)</strong></p><ul><li>减少读者进入临界区的操作，提高读者效率</li></ul><p>硬件原子操作</p><ol><li>最大128bit</li><li>锁总线，性能瓶颈</li></ol><p>链表删除节点<br /><img src="/image/os/link%20list%20delete.png" srcset="/img/loading.gif" alt="" /></p><p><strong>局限</strong></p><ul><li>需要将源数据复制一份，导致内存消耗</li><li>删除后的节点不能立即删除，因为可能有读者正在读</li></ul><p><strong>RCU宽限期</strong></p><ul><li>需要知道进入临界区和离开临界区的时间</li><li>当最后一个访问旧值的读者离开临界区后释放内存</li></ul><h3 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h3><p><strong>原因</strong></p><ul><li>互斥访问</li><li>持有并等待</li><li>资源非抢占</li><li>循环等待</li></ul><h4 id="检测死锁与回复"><a class="markdownIt-Anchor" href="#检测死锁与回复"></a> 检测死锁与回复</h4><p>找到资源分配图中的环</p><ul><li>kill所有进程</li><li>kill一个进程</li><li>全部回滚到前面状态</li></ul><h4 id="死锁预防"><a class="markdownIt-Anchor" href="#死锁预防"></a> 死锁预防</h4><ol><li><p>避免互斥访问：通过其他手段（ie:代理执行）</p></li><li><p>不允许持有并等待：一次申请所有资源</p><ul><li>可能带来活锁(live lock)</li><li><img src="../image/os/live_lock.png" srcset="/img/loading.gif" alt="" /></li></ul></li><li><p>资源允许抢占：需要考虑如何恢复（取决于场景）</p></li><li><p>打破循环等待</p></li></ol><h4 id="死锁避免"><a class="markdownIt-Anchor" href="#死锁避免"></a> 死锁避免</h4><p>银行家算法</p><h2 id="多核与并行"><a class="markdownIt-Anchor" href="#多核与并行"></a> 多核与并行</h2><p><strong>并行加速比（理论上限）</strong><br />Amdahl’s Law</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mi>p</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">s = \frac{1}{(1-p)+p/s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">/</span><span class="mord mathdefault">s</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">p:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>可并行部分所占比例<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">s:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>并行核心数</p></blockquote><p>多核访问共享数据导致性能断崖</p><h3 id="缓存一致性"><a class="markdownIt-Anchor" href="#缓存一致性"></a> 缓存一致性</h3><h4 id="msi状态"><a class="markdownIt-Anchor" href="#msi状态"></a> MSI状态</h4><p><img src="/image/os/modified.png" srcset="/img/loading.gif" alt="" /><br /><img src="/image/os/shared.png" srcset="/img/loading.gif" alt="" /><br /><img src="/image/os/invalid.png" srcset="/img/loading.gif" alt="" /></p><p><img src="/image/os/cache.png" srcset="/img/loading.gif" alt="" /></p><p>多cpu对单一缓存行竞争导致性能下降</p><p><strong>MCS lock</strong></p><ul><li>避免多核对于单一缓存行的竞争<br /><img src="/image/os/mcs.png" srcset="/img/loading.gif" alt="" /></li></ul><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>&#123;</span>    <span class="hljs-keyword">volatile</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>* <span class="hljs-title">next</span>;</span>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> flag;&#125;;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_lock</span>&#123;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>* <span class="hljs-title">tail</span>;</span>&#125;;__thread <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span> <span class="hljs-title">my_node</span>;</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">(struct mcs_lock* lock)</span></span>&#123;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>* <span class="hljs-title">me</span> = &amp;<span class="hljs-title">my_node</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>* <span class="hljs-title">tail</span> = 0;</span>    me-&gt;next = <span class="hljs-literal">NULL</span>;    me-&gt;flag = WATTING;    tail = atomic_XCHG(&amp;lock-&gt;tail,me);    <span class="hljs-keyword">if</span>(tail)&#123;        barrier();        tail-&gt;next = me;        <span class="hljs-keyword">while</span>(me-&gt;flag != GRANTED);    &#125;<span class="hljs-keyword">else</span>&#123;        me-&gt;flag = GRANTED;    &#125;    barrier();&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unlock</span><span class="hljs-params">(struct mcs_lock* lock)</span></span>&#123;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_node</span>* <span class="hljs-title">me</span> = &amp;<span class="hljs-title">my_node</span>;</span>    barrier();    <span class="hljs-keyword">if</span>(!me-&gt;next)&#123;        <span class="hljs-keyword">if</span>(atomic_CAS(&amp;lock-&gt;tail,me,<span class="hljs-number">0</span>) == me)            <span class="hljs-keyword">return</span>;        <span class="hljs-keyword">while</span>(!me-&gt;next);    &#125;    me-&gt;next-&gt;flag = GRANTED;&#125;</code></pre><ul><li>unlock操作仅写一个私缓存行，不存在高度竞争的全局缓存行</li></ul><p>在非一致内存访问(NUMA)下，在临界区访问多cache行导致性能下降</p><p><img src="/image/os/numa.png" srcset="/img/loading.gif" alt="" /></p><ul><li>跨节点的缓存一致性协议开销巨大(cpu需要访问其他节点的cache取回数据)</li></ul><p><strong>NUMA-aware设计：cohort</strong></p><ul><li>先获取每节点的本地锁，在获取全局锁</li><li>成功获取全局锁，释放时将其传递给<strong>本地等待队列</strong>的下一位</li><li>全局锁在一段时间内只在一个节点内部传递</li></ul><h3 id="内存模型"><a class="markdownIt-Anchor" href="#内存模型"></a> 内存模型</h3><h4 id="严格一致性模型strict-consistency"><a class="markdownIt-Anchor" href="#严格一致性模型strict-consistency"></a> 严格一致性模型(Strict Consistency)</h4><ul><li>对任意地址的读操作都能读到这个地址最近一次写的数据</li><li>访存操作顺序与全局时钟顺序一致</li><li>有唯一的执行结果</li></ul><h4 id="顺序一致性sequential-consistency"><a class="markdownIt-Anchor" href="#顺序一致性sequential-consistency"></a> 顺序一致性(Sequential Consistency)</h4><ul><li>不要求操作按照真实的时间顺序全局可见</li><li>执行结果必须与一个全局的顺序一致</li><li>在调度下具有多种结果</li></ul><h4 id="tsototal-store-ordering"><a class="markdownIt-Anchor" href="#tsototal-store-ordering"></a> TSO(Total Store Ordering)</h4><ul><li><p>对不同地址<strong>RR</strong>,<strong>RW</strong>,<strong>WW</strong>顺序可以保证</p></li><li><p><strong>WR</strong>的顺序不能保证</p></li><li><p>CPU存在乱序执行<br />CPU写cache后需要执行缓存一致性算法，为了提升性能，在CPU与cache之间增加一个<strong>Load/Store Buffer</strong>,CPU写数据首先写入<strong>Buffer</strong>,之后将数据批量写入cache，减少缓存一致性算法执行次数。但是导致了写延时，所以导致<strong>WR</strong>的顺序不能保证</p></li></ul><h4 id="弱一致性模型"><a class="markdownIt-Anchor" href="#弱一致性模型"></a> 弱一致性模型</h4><ul><li>不保证任何对不同地址的读写操作顺序<br />ARM采用弱一致性模型，为了保证读写顺序，ARM提供了<code>barrier()</code>保证执行顺序。在<code>lock</code>时需要加<code>barrier</code></li></ul><h1 id="文件与存储"><a class="markdownIt-Anchor" href="#文件与存储"></a> 文件与存储</h1><h2 id="基于inode的文件系统"><a class="markdownIt-Anchor" href="#基于inode的文件系统"></a> 基于inode的文件系统</h2><ul><li>字符/块设备文件<ul><li>记录设备的Major(表示设备类型)和minor(表示设备编号)号</li><li>可以作为系统调用参数</li></ul></li><li>FIFO文件<ul><li>命名管道，用于进程通信</li><li>提供一个标识符，对该文件操作都在内存中，实现了<code>read()</code>,<code>write()</code>等接口</li></ul></li><li>SOCK文件<ul><li>UNIX域套接字，用于进程间通信</li><li>通过<strong>socket</strong>API创建，当进程位于不同机器上时，仅需要修改少部分代码</li></ul></li></ul><p>这些方式复用了文件API，通过文件API实现不同的功能.</p><blockquote><p>everything is a file.</p></blockquote><h2 id="基于table的文件系统"><a class="markdownIt-Anchor" href="#基于table的文件系统"></a> 基于Table的文件系统</h2><h3 id="ntfs"><a class="markdownIt-Anchor" href="#ntfs"></a> NTFS</h3><p><img src="/image/os/ntfs.png" srcset="/img/loading.gif" alt="" /></p><ul><li>每个文件在MFT中保留一项，记录了文件的元数据</li><li>查询文件仅需变量MFT，查询速度快  eg:everything</li><li>文件较小时可以内嵌在MFT中</li></ul><p><img src="/image/os/filesystem.png" srcset="/img/loading.gif" alt="" /></p><p><img src="/image/os/clone.png" srcset="/img/loading.gif" alt="" /></p><ul><li>使用COW实现快照功能<ul><li>将inode复制一份作为快照</li><li>标记数据块为COW</li></ul></li></ul><h3 id="fuse"><a class="markdownIt-Anchor" href="#fuse"></a> FUSE</h3><p><img src="/image/os/fuse.png" srcset="/img/loading.gif" alt="" /></p><ul><li>在用户态实现文件系统，eg：将百度网盘映射到文件系统</li></ul><h2 id="崩溃一致性"><a class="markdownIt-Anchor" href="#崩溃一致性"></a> 崩溃一致性</h2><h3 id="各种数据结构之间存在依赖关系与一致性要求"><a class="markdownIt-Anchor" href="#各种数据结构之间存在依赖关系与一致性要求"></a> 各种数据结构之间存在依赖关系与一致性要求</h3><ul><li>inode中保存的文件大小，应该与其索引中保存的数据块个数相匹配- inode中保存的链接数，应与指向其的目录项个数相同</li><li>超级块中保存的文件系统大小，应该与文件系统所管理的空间大小相同</li><li>所有inode分配表中标记为空闲的inode均未被使用;标记为已用的inode均可以通过文件系统操作访问</li></ul><p><strong>系统崩溃情况下这些数据可能不一致</strong></p><h3 id="日志"><a class="markdownIt-Anchor" href="#日志"></a> 日志</h3><ul><li>在文件操作之前，先将操作记录在日志中</li><li>所有操作记录完毕后，提交日志</li><li>再对文件进行操作</li></ul><p><strong>问题</strong></p><ul><li>每个操作都要写硬盘，内存缓存机制无意义</li><li>每个修改需要拷贝新数据到日志</li><li>相同块的修改被记录多次</li></ul><p><strong>解决方案</strong></p><ul><li>利用内存的页缓存：将日志保存在内存中，文件操作之前将日志写入磁盘</li><li>批量处理日志减少磁盘读写：将多个文件操作合并，每个修改的块仅需记录一次</li></ul><p><strong>日志提交</strong></p><ul><li><p>定时触发</p><ul><li>每一段时间触发一次</li><li>日志达到一定数量触发一次</li></ul></li><li><p>用户触发</p><ul><li>应用程序调用<code>fsync()</code></li></ul></li></ul><h1 id="系统虚拟化"><a class="markdownIt-Anchor" href="#系统虚拟化"></a> 系统虚拟化</h1><ul><li><p>操作系统的接口层次</p><ul><li>ISA层<ul><li>用户ISA：用户态可执行 eg:<code>mov, add</code></li><li>系统ISA：特权态可执行 eg:<code>msr</code></li></ul></li><li>ABI<ul><li>提供操作系统服务或硬件功能</li><li>包含用户ISA和syscall</li></ul></li><li>API<ul><li>不同用户态库提供的接口</li><li>包含库接口和用户ISA eg:<code>libc</code></li></ul></li></ul></li><li><p>虚拟机监控器(VMM/Hypervisor)</p><ul><li>向上层虚拟机暴漏其所需的ISA</li><li>可同时运行多台虚拟机(VM)</li><li>需要VMM实现系统ISA的功能：eg：切换内核页表寄存器(TTBR1)</li></ul></li></ul><h2 id="如何实现vmm"><a class="markdownIt-Anchor" href="#如何实现vmm"></a> 如何实现VMM</h2><ul><li>实现系统ISA<br />系统ISA设计时仅考虑只有一个人调，不允许多个人执行，要实现让多个人调用系统ISA，当运行系统ISA时，不能由硬件真正运行系统ISA</li></ul><p><img src="/image/os/trap.png" srcset="/img/loading.gif" alt="" /></p><ol><li>捕捉所有系统ISA并陷入(Trap)</li><li>由具体指令实现相应虚拟化<ul><li>控制虚拟处理器行为</li><li>控制虚拟内存行为</li><li>控制设备行为</li></ul></li><li>回到虚拟机继续执行</li></ol><h2 id="cpu虚拟化"><a class="markdownIt-Anchor" href="#cpu虚拟化"></a> CPU虚拟化</h2><p><img src="/image/os/vis1.png" srcset="/img/loading.gif" alt="" /></p><ul><li>将VMM运行在EL1</li><li>将guest操作系统和其进程运行在EL0</li><li>当操作系统执行ISA指令时Trap进入EL1的VMM由VMM模拟实现</li><li><img src="/image/os/vis11.png" srcset="/img/loading.gif" alt="" /></li></ul><p>x86和arm有些指令不能虚拟化(在EL0和EL1下执行效果不一样),在用户态执行被当作<code>NOP</code>指令，不会产生Trap</p><h3 id="如何处理不会产生trap的系统指令"><a class="markdownIt-Anchor" href="#如何处理不会产生trap的系统指令"></a> 如何处理不会产生Trap的系统指令</h3><ol><li>解释执行</li><li>二级制翻译</li><li>半虚拟化</li><li>硬件虚拟化(修改硬件)</li></ol><h4 id="1解释执行"><a class="markdownIt-Anchor" href="#1解释执行"></a> 1.解释执行</h4><ul><li>用软件对所有的虚拟机代码模拟执行<ul><li>不区分是否敏感指令</li><li>没有虚拟机指令直接在硬件上执行</li></ul></li><li>在内存中维护虚拟机的状态<br /><img src="/image/os/trap1.png" srcset="/img/loading.gif" alt="" /></li></ul><p>pros</p><ul><li>解决了敏感函数不Trap问题</li><li>可以模拟不同ISA的虚拟机</li><li>实现简单</li></ul><p>cons</p><ul><li>执行速度慢，一条指令会被模拟为多条指令</li></ul><h4 id="2二级制翻译"><a class="markdownIt-Anchor" href="#2二级制翻译"></a> 2.二级制翻译</h4><ul><li>提出两个加速技术<ul><li>执行前<strong>批量翻译</strong>虚拟机指令</li><li><strong>缓存</strong>已经翻译的指令</li></ul></li><li>使用基本块(Basic Block)为翻译粒度<br /><img src="/image/os/trap2.png" srcset="/img/loading.gif" alt="" /></li></ul><p>cons:</p><ul><li>不能处理自修改的代码(eg:jvm)</li><li>中断插入粒度变大<ul><li>模拟执行可在任意指令位置插入中毒</li><li>二进制翻译只能在Basic Block边界插入中断(执行Basic Block时VMM没有介入)</li></ul></li></ul><h4 id="3半虚拟化"><a class="markdownIt-Anchor" href="#3半虚拟化"></a> 3.半虚拟化</h4><ul><li>让VMM提供接口给虚拟机，称为<strong>Hypercall</strong></li><li>修改guest操作系统源码，将敏感指令替换为<strong>Hypercall</strong></li></ul><p>cons</p><ul><li>需要修改操作系统源码</li></ul><h4 id="4硬件虚拟化"><a class="markdownIt-Anchor" href="#4硬件虚拟化"></a> 4.硬件虚拟化</h4><ul><li><p>x86和arm引入了虚拟化特权级</p></li><li><p>x86引入了<strong>root mode</strong>和<strong>non-root mode</strong></p><ul><li>intel 推出了VT-x硬件虚拟化扩展</li><li><strong>root mode</strong>是最高特权级，控制物理资源</li><li>VMM运行在<strong>root mode</strong>,虚拟机运行在<strong>non-root mode</strong></li><li>两个mode内都有4个特权级：ring0-ring3</li></ul></li><li><p>arm引入了EL2</p><ul><li>VMM运行在EL2</li><li>EL2是最高特权级，控制物理资源</li><li>VMM的操作系统和应用程序分别运行在EL1和EL0</li></ul></li></ul><h4 id="vt-x"><a class="markdownIt-Anchor" href="#vt-x"></a> VT-x</h4><p><img src="/image/os/trap41.png" srcset="/img/loading.gif" alt="" /></p><h5 id="virtual-machine-control-structurevmcs"><a class="markdownIt-Anchor" href="#virtual-machine-control-structurevmcs"></a> Virtual Machine Control Structure(VMCS)</h5><ul><li><p>VMM提供给硬件的内存页(4KB)</p><ul><li>记录当前VM的运行状态</li></ul></li><li><p>VM Entry</p><ul><li>硬件自动将当前CPU中的VMM状态保存到VMCS</li><li>硬件自动从VMCS中加载VM状态到CPU</li></ul></li><li><p>VM　Exit</p><ul><li>硬件自动将当前CPU中的VM状态保存到VMCS</li><li>硬件自动从VMCS中加载VMM状态到CPU</li></ul></li><li><p>包含6个部分</p><ul><li>Guest-state area:发生VM exit时，CPU的状态会被硬件自动保存至该区域;发生VM Entry时，硬件自动从该区域加载状态至CPU中</li><li>Host-state area:发生VM exit时，硬件自动从该区域加载状态至CPU中;发生VM Entry时，CPU的状态会被自动保存至该区域</li><li>VM-execution control fields :控制Non-root模式中虚拟机的行为</li><li>VM-exit control fields :控制VM exit的行为</li><li>VM-entry control fields :控制VM entry的行为</li><li>VM-exit information fields : VM Exit的原因和相关信息（只读区域)</li></ul></li></ul><ol><li>VMXON 开启VT-x</li><li>VMLAUNCH 进入虚拟机(加载虚拟机的状态)</li><li>当遇到满足VMEXIT指令 -&gt; VMM ring0, VMM执行该指令</li><li>VMRESUME 回到虚拟机</li></ol><p><strong>x86修改CPU为了给VM一个新环境，arm修改虚拟机为了给VMM一个新环境</strong></p><h4 id="arm虚拟化"><a class="markdownIt-Anchor" href="#arm虚拟化"></a> ARM虚拟化</h4><p><img src="/image/os/armvirtual.png" srcset="/img/loading.gif" alt="" /></p><ul><li><p>VM Entry</p><ul><li>使用ERET指令从VMM进入VM</li><li>进入VM之前VMM需要主动加载VM的运行状态(各种寄存器)</li></ul></li><li><p>VM Exit</p><ul><li>虚拟机执行敏感指令或收到中断</li><li>以Exception、IRQ、FIQ形式回到VMM</li><li>VMM主动保存VM的状态</li></ul></li><li><p>VM Exit时VMM可以访问VM的EL0和EL1寄存器</p></li></ul><h3 id="vm和vcpu"><a class="markdownIt-Anchor" href="#vm和vcpu"></a> VM和VCPU</h3><ul><li><p>VM</p><ul><li>静态部分：内存，设备等</li><li>动态部分：VCPU</li></ul></li><li><p>VCPU</p><ul><li>用线程模拟CPU</li><li>虚拟寄存器<ul><li>PC</li><li>通用寄存器</li><li>…</li></ul></li><li>切换VCPU时切换到其虚拟寄存器</li></ul></li></ul><h3 id="qemukvm"><a class="markdownIt-Anchor" href="#qemukvm"></a> QEMU/KVM</h3><ul><li><p>qemu运行在用户态，实现策略</p><ul><li>也提供虚拟设备支持</li></ul></li><li><p>KVM以linux内核模块运行，实现机制</p><ul><li>可以直接使用linux的功能(内存管理，进程调度)</li><li>使用硬件虚拟化功能</li></ul></li><li><p>KVM捕捉所有敏感指令和事件，传递给QEMU</p></li><li><p>KVM不提供设备虚拟化，需要使用QEMU的虚拟设备</p></li><li><p>1个虚拟机对应1个QEMU进程</p></li><li><p>VM的VCPU对应QEMU的线程</p></li><li><p>QEMU使用<code>/dev/kvm</code>与内核态的KVM通信</p><ul><li>使用ioctl向KVM传递命令：<code>CREATE_VM</code>,<code>CREATE_VCPU</code>,<code>KVM_RUN</code>…</li><li>创建虚拟机所需的运行环境(memory,VCPU,…)后调用<code>KVM_RUN</code>进入<strong>non-root mode</strong>执行<br /><img src="/image/os/kvm.png" srcset="/img/loading.gif" alt="" /></li></ul></li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kvm.h&gt;</span></span>  <span class="hljs-keyword">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">"/dev/kvm"</span>);  ioctl(fd,KVM_CREATE_VM);  ioctl(fd,KVM_CREATE_VCPU);  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;    ioctl(fd,KVM_RUN); <span class="hljs-comment">// 进入内核 -&gt; 返回到VM</span>    <span class="hljs-comment">// VM执行到敏感指令 -&gt; trap kernel -&gt; KVM [-&gt; qemu]</span>    reason = get_exit_reason();    <span class="hljs-keyword">switch</span>(reason)&#123;      <span class="hljs-keyword">case</span> ...    &#125;  &#125;</code></pre><h4 id="ioctlfdkvm_run"><a class="markdownIt-Anchor" href="#ioctlfdkvm_run"></a> ioctl(fd,KVM_RUN)</h4><ul><li><p>ARM</p><ul><li>KVM主动加载VCPU的所有状态</li><li>使用<code>eret</code>进入VM</li></ul></li><li><p>x86</p><ul><li>KVM找到VCPU对应的VMCS</li><li>使用指令加载VMCS</li><li><code>VMLAUNCH</code>/<code>VMRESUME</code>进入<strong>non-root node</strong><ul><li>硬件自动同步状态</li><li>PC = VMCS-&gt;GUEST_RIP</li></ul></li></ul></li></ul><h4 id="io处理流程"><a class="markdownIt-Anchor" href="#io处理流程"></a> IO处理流程</h4><p><img src="/image/os/kvmio.png" srcset="/img/loading.gif" alt="" /></p><h2 id="内存虚拟化"><a class="markdownIt-Anchor" href="#内存虚拟化"></a> 内存虚拟化</h2><ul><li><p>为虚拟机提供虚拟的物理地址空间</p></li><li><p>三种地址</p><ul><li>Guest Virtual Address(GVA)<ul><li>虚拟机内进程使用的虚拟地址</li></ul></li><li>Guest Physical Address(GPA)<ul><li>虚拟机内使用的假物理地址</li></ul></li><li>Host Physical Address(HPA)<ul><li>真实的物理地址</li><li>GPA需要翻译为HPA</li></ul></li></ul></li><li><p>实现内存虚拟化</p><ul><li>影子页表(Shadow Page Table):为每个进程提供一个<code>GVA-&gt;HPA</code>的页表</li><li>直接页表(Direct Page Table):告诉VM运行在虚拟机中</li><li>硬件虚拟化</li></ul></li></ul><h3 id="硬件虚拟化"><a class="markdownIt-Anchor" href="#硬件虚拟化"></a> 硬件虚拟化</h3><ul><li>Intel Extended Page Table(EPT)</li><li>ARM Stage-2 Page Table(第二阶段页表)</li><li>新页表<ul><li>将GPA翻译为HPA</li><li>被VMM控制</li><li>每个VM有一个对应页表</li></ul></li></ul><h4 id="翻译过程"><a class="markdownIt-Anchor" href="#翻译过程"></a> 翻译过程</h4><p><img src="/image/os/step2.png" srcset="/img/loading.gif" alt="" /></p><ul><li>Guest Page Table 中保存 GPA</li><li>Host Page Table 中保存 HPA</li><li>共24次访存</li></ul><h4 id="tlb刷新-2"><a class="markdownIt-Anchor" href="#tlb刷新-2"></a> TLB刷新</h4><ul><li>刷TLB相关指令<ul><li>清空全部 <code>TLBI VMALLS12E1IS</code></li><li>清空指定GVA <code>TLBI VAE1IS</code></li><li>情况指定GPA <code>TLBI IPAS2E1IS</code></li></ul></li></ul><h4 id="如何处理缺页异常"><a class="markdownIt-Anchor" href="#如何处理缺页异常"></a> 如何处理缺页异常</h4><ul><li>第一阶段缺页异常<ul><li>调用VM的Page fault handler</li><li>不会引起VM <strong>Trap</strong></li></ul></li><li>第二阶段缺页异常<ul><li>VM Trap，直接调用VMM的Page fault handler</li></ul></li></ul><p>pros：</p><ul><li>不需要捕捉Guest Page Table的更新</li><li>减少内存开销：每个VM对应一个页表</li></ul><p>cons：</p><ul><li>TLB miss时性能开销大</li></ul><h2 id="io虚拟化"><a class="markdownIt-Anchor" href="#io虚拟化"></a> IO虚拟化</h2><ul><li>为VM提供虚拟设备</li><li>隔离不同VM对设备的访问</li><li>提高物理设备的利用率</li></ul><h3 id="如何实现io虚拟化"><a class="markdownIt-Anchor" href="#如何实现io虚拟化"></a> 如何实现IO虚拟化</h3><ul><li>设备模拟</li><li>半虚拟化</li><li>设备直通</li></ul><h4 id="设备模拟"><a class="markdownIt-Anchor" href="#设备模拟"></a> 设备模拟</h4><ul><li><p>OS与设备交互的接口</p><ul><li>模拟寄存器(中断)</li><li>捕捉MMIO,PIO指令</li></ul></li><li><p>软件模拟方式</p><ul><li>将PIO指令替换为系统调用</li><li>MMIO对应内存的第二阶段页表设为invalid(Trap)</li></ul></li><li><p>硬件虚拟化方式</p><ul><li>硬件捕捉PIO指令</li><li>MMIO对应内存的第二阶段页表设为invalid</li></ul></li></ul><p><img src="/image/os/netemu1.png" srcset="/img/loading.gif" alt="" /><br /><img src="/image/os/netemu2.png" srcset="/img/loading.gif" alt="" /></p><h4 id="半虚拟化"><a class="markdownIt-Anchor" href="#半虚拟化"></a> 半虚拟化</h4><ul><li>VM知道自己运行在虚拟环境</li><li>VM运行<strong>front-end</strong></li><li>VMM运行<strong>back-end</strong></li><li>VMM给VM提供<strong>Hypercall</strong></li><li>通过共享内存传递指令和数据</li></ul><p><img src="/image/os/netemu3.png" srcset="/img/loading.gif" alt="" /></p><ul><li><strong>back-end</strong>可以在内核中实现</li></ul><p><img src="/image/os/netemu4.png" srcset="/img/loading.gif" alt="" /></p><p>pros:</p><ul><li>多个MMIO/PIO指令可以整合为一次Hypercall</li></ul><p>cons:</p><ul><li>需要修改操作系统内核</li></ul><h4 id="设备直通"><a class="markdownIt-Anchor" href="#设备直通"></a> 设备直通</h4><ul><li>由于网卡直接访问<strong>HPA</strong>,可能造成恶意读写</li><li>让网卡访问<strong>GPA</strong>,VM只能访问自己的内存</li></ul><p><strong>增加IOMMU</strong></p><p><img src="/image/os/iommu.png" srcset="/img/loading.gif" alt="" /></p><p><img src="/image/os/iommu2.png" srcset="/img/loading.gif" alt="" /></p><p><strong>设备独占问题</strong></p><ul><li>single root i/o virtualization<ul><li><p>在物理层实现设备虚拟化</p></li><li><p>能够创建多个Virtual Function(VF),每个VM分配一个VF</p></li><li><p>物理设备称为Physical Function(PF),由Host管理</p></li><li><p>需要特定硬件(IOMMU等)支持</p></li></ul></li></ul><h2 id="中断虚拟化"><a class="markdownIt-Anchor" href="#中断虚拟化"></a> 中断虚拟化</h2><ul><li>VMM完成IO操作(DMA)后通知VM</li><li>VMM在<code>VM ENTRY</code>时插入中断</li></ul><h3 id="virtual-cpu-interface"><a class="markdownIt-Anchor" href="#virtual-cpu-interface"></a> virtual CPU interface</h3><ul><li><p>GIC为VM提供硬件功能</p><ul><li>VM通过virtual CPU interface与GIC交互</li><li>VMM通过physical CPU interface与GIC交互</li></ul></li><li><p>插入中断</p></li><li><p>通过<strong>GIC List Register</strong>插入中断号</p></li></ul><p><img src="/image/os/int.png" srcset="/img/loading.gif" alt="" /></p><ul><li>v4中，VMM需要通知GIC当前的调度信息，GIC才能将中断插入正确的CPU</li></ul><h2 id="轻量级虚拟化"><a class="markdownIt-Anchor" href="#轻量级虚拟化"></a> 轻量级虚拟化</h2><h3 id="fassfunction-as-a-service-and-serverless"><a class="markdownIt-Anchor" href="#fassfunction-as-a-service-and-serverless"></a> Fass(Function as a service) and Serverless</h3><ul><li><p>现有方案：虚拟机</p><ul><li>Function执行时创建虚拟机</li><li>Function执行完销毁虚拟机</li></ul></li><li><p>过于重量级，启动延时高</p></li><li><p>不用虚拟化方案</p><ul><li>window server允许多个用户同时访问远程桌面</li><li>缺点：缺少文件隔离</li></ul></li></ul><p><strong>chroot</strong></p><ul><li>为每个执行环境提供独立的文件系统视图</li><li>改变进程的根目录</li></ul><p>简单实现</p><ul><li>内核为每个用户保存其根目录</li><li>注意检查<code>../</code></li></ul><h3 id="基于namespace的限制"><a class="markdownIt-Anchor" href="#基于namespace的限制"></a> 基于namespace的限制</h3><ul><li><p>通过文件系统的namespace限制用户</p></li><li><p>可以在其他层(inode number)限制用户</p></li></ul><p>问题</p><ul><li>如何共享部分文件(<code>ls</code>)</li></ul><h2 id="linux容器"><a class="markdownIt-Anchor" href="#linux容器"></a> linux容器</h2><ul><li>由linux内核提供资源隔离</li><li>安全隔离：<code>linux namespace</code></li><li>性能隔离：<code>linux cgroup</code></li></ul><h3 id="linux-namespace"><a class="markdownIt-Anchor" href="#linux-namespace"></a> linux namespace</h3><ul><li>每种<strong>linux namespace</strong>封装一种全局资源</li></ul><ol><li>mount namespace</li></ol><ul><li><p>在内核分别记录每个NS对于挂载点的修改</p></li><li><p>访问挂载点时，根据当前NS的记录访问文件</p></li><li><p>每个NS有独立的NS文件系统树</p></li><li><p>修改挂载点只会修改自己的NS树</p></li><li><p>实现了文件的共享</p></li></ul><ol start="2"><li>IPC namespace</li></ol><ul><li>每个IPC对象只能属于一个NS</li><li>进程只能在当前NS中寻找IPC对象</li></ul><ol start="3"><li>network namespace</li></ol><p>linux 对多IP的支持</p><ul><li>内核中创建一个虚拟交换机</li><li>VM的网卡连接到交换机上</li></ul><p>Linux namespace</p><ul><li><p>每个NS拥有一套独立的网络资源(ip,网络设备)</p></li><li><p>新的NS默认仅有loopback设备</p></li><li><p>NS中的网卡连接到虚拟交换机上</p></li><li><p>通过ARP协议将多个ip与物理网卡MAC地址绑定，实现收多个ip的数据包</p></li></ul><ol start="4"><li>PID namespace</li></ol><ul><li>每个namespace只能看到自己namespace得到PID</li><li>parent NS可以看到child NS的PID，反之不行</li><li>子NS中进程在父NS中也有PID</li><li>子NS中进程无法向外部发送信号</li></ul><ol start="5"><li>user namespace</li></ol><ul><li>隔离用户权限</li><li>对NS内外UID和GID映射</li><li>每个NS都有UID为0的root用户，映射为外部的其他UID，在NS外部无root权限</li></ul><ol start="6"><li>UTS namespace</li></ol><ul><li>每个NS拥有自己的hostname</li></ul><ol start="7"><li>Cgroup(control group) namespace</li></ol><ul><li>实现资源隔离</li><li>将线程分组，对每组线程多种物理资源监控</li></ul><h1 id="网络协议栈"><a class="markdownIt-Anchor" href="#网络协议栈"></a> 网络协议栈</h1><h2 id="linux收包过程"><a class="markdownIt-Anchor" href="#linux收包过程"></a> linux收包过程</h2><p><img src="/image/os/linuxnet.png" srcset="/img/loading.gif" alt="" /></p><ol><li>DMA将数据传送到内核RX缓冲区</li><li>触发中断</li><li>cpu收到中断,触发中断处理程序(上半部)</li></ol><ul><li>分配<code>sk_buff</code>数据结构，将数据帧copy到接收队列</li><li>发出<strong>NET_RX_SOFTIRQ</strong>软中断，通知内核接收到数据帧</li></ul><ol start="4"><li>内核在合适的时机(返回用户态之前)检查softirq队列并处理软中断(进入下半部)</li><li>将接收队列的数据帧copy到<code>sk_buff</code>缓冲区中</li><li>根据数据包的类型，调用对应的协议处理函数</li></ol><ul><li>TCP会将数据copy到socket的<strong>Recv-Q</strong>,唤醒等待在socket上的线程</li><li>用户调用<code>recv(buff)</code>将数据copy到用户态</li></ul><h1 id="操作系统调试"><a class="markdownIt-Anchor" href="#操作系统调试"></a> 操作系统调试</h1><ul><li>中断程序运行读取内部状态</li><li>获取程序异常退出原因</li><li>动态修改程序状态</li><li>控制追踪流</li></ul><h2 id="linux调试支持ptrace系统调用"><a class="markdownIt-Anchor" href="#linux调试支持ptrace系统调用"></a> linux调试支持：ptrace系统调用</h2><ol><li>子进程通过<code>PTRACE_TRACEME</code>将调试权交给父进程，父进程可以读取，修改子进程的状态</li><li>通过<code>PTRACE_ATTACH</code>调试指定进程</li></ol><p><strong>GDB捕捉异常信号</strong></p><p>GDB等待子进程事件，子进程发生时间后会通知父进程</p><ul><li><code>PTRACE_GETSIGINFO</code>获取被调试进程signal</li><li><code>PTRACE_GETREGS</code>获取被调试进程的RIP</li></ul><p><strong>断点</strong></p><ul><li><p>断点异常指令</p><ul><li>在执行到特定指令时，触发断点异常陷入内核</li><li>x86: <code>int 3</code>, AARCH64: <code>BKP</code></li></ul></li><li><p>单步调试</p><ul><li>在用户态执行一条指令后立即陷入内核</li><li>x86 Trap flag</li></ul></li></ul><ol><li><code>PTRACE_POKETEXT</code>修改进程代码为断点指令</li><li>子进程执行到断点，触发断点异常，产生<code>SIGTRAP</code>signal并通知GDB</li></ol><p><strong>内存断点</strong></p><ul><li><p>基本实现</p><ul><li>将内存地址所在页设为只读</li><li>访问时触发page fault</li><li>对该页所有的写操作均导致page fault</li></ul></li><li><p>断点寄存器</p><ul><li>当访存地址为寄存器中的值时，触发断点异常</li></ul></li></ul><p><strong>远程调试</strong></p><p><img src="/image/os/remotedebug.png" srcset="/img/loading.gif" alt="" /></p><ul><li><p>GDB客户端负责指令发送</p><ul><li>GDB远端串行协议(GDB remote serial protocol,RSP)</li></ul></li><li><p>GDB stub 控制调试应用</p></li></ul><h2 id="性能调试"><a class="markdownIt-Anchor" href="#性能调试"></a> 性能调试</h2><h3 id="确定内核执行中耗时较长的函数"><a class="markdownIt-Anchor" href="#确定内核执行中耗时较长的函数"></a> 确定内核执行中耗时较长的函数</h3><p><strong>硬件计数器</strong></p><ul><li><p>监控程序执行过程中处理器发生某些事件的次数</p><ul><li>e.g., 执行指令数量，缓存失效次数</li></ul></li><li><p>方法1：获取事件发生次数</p><ul><li>设置事件类型，打开计数器</li><li>一段时间后读取计数器</li><li>缺点：可能涉及对源代码修改(插桩)</li></ul></li><li><p>方法2：采样</p><ul><li>设置事件类型，打开计数器</li><li>当计数器溢出时，产生中断<ul><li>在中断处理中获取地址信息</li><li>清空计数器，等待下一次中断</li></ul></li><li>每经过一定cycle触发一次中断，统计中断时指令地址，获取这些地址属于哪些函数</li></ul></li></ul><h4 id="linux-性能计数器采样支持"><a class="markdownIt-Anchor" href="#linux-性能计数器采样支持"></a> linux 性能计数器采样支持</h4><ul><li><p>性能相关事件 perf events</p><ul><li>以event的抽象暴露性能计数器</li><li>perf_event_open通知内核需要使用哪些计数器</li><li>采样过程有内核完成</li><li>采样结果放入内核与用户共享内存中</li></ul></li><li><p>前端工具perf</p><ul><li>perf工具包包装常见的性能分析方法</li><li><code>perf record -e cycles &lt;app&gt;</code></li><li><code>perf report</code></li></ul></li></ul><h4 id="基于中断采样的缺点"><a class="markdownIt-Anchor" href="#基于中断采样的缺点"></a> 基于中断采样的缺点</h4><ul><li>采样获取的指令地址不准确<ul><li>中断发送需要时间，CPU收到中断时的指令地址可能有偏移</li><li>乱序执行</li></ul></li></ul><h3 id="控制流追踪"><a class="markdownIt-Anchor" href="#控制流追踪"></a> 控制流追踪</h3><ul><li><p>软件方法backtrace追踪</p><ul><li>问题：编译器优化去除栈帧</li></ul></li><li><p>硬件的控制流追踪</p><ul><li><p>记录jmp、call、中断导致跳转的前后位置</p></li><li><p>e.g.Last Branch Record(intel)</p><ul><li>两组寄存器分别构成栈，记录最近N次跳转信息</li></ul></li><li><p><code>perf record -e cycles -g &lt;app&gt;</code></p></li><li><p><code>perf report</code></p></li></ul></li></ul><h3 id="静态追踪方法"><a class="markdownIt-Anchor" href="#静态追踪方法"></a> 静态追踪方法</h3><ul><li><p>在代码编写时插桩</p><ul><li>打印</li></ul></li><li><p>预置静态追踪函数</p><ul><li>e.g.,linux Tracepoint</li></ul></li><li><p>缺点</p><ul><li>修改跟踪点需要重新编译</li><li>有些函数没有tracepoint</li></ul></li></ul><h3 id="动态追踪方法"><a class="markdownIt-Anchor" href="#动态追踪方法"></a> 动态追踪方法</h3><ul><li>程序运行时，在不确定的代码位置插入一段动态指定的追踪函数</li><li>e.g.,linux kprobe，类似于断点调试</li></ul><ol><li>使用断点指令替换原指令</li><li>执行时产生异常</li><li>调用handler</li><li>恢复原指令，单步调试</li><li>重新设置断点指令，返回继续执行</li></ol><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">vfs_read</span><span class="hljs-params">(struct file* file,<span class="hljs-keyword">char</span> *buff,<span class="hljs-keyword">size_t</span> count,<span class="hljs-keyword">loff_t</span>*pos)</span></span>;</code></pre><ul><li>检查count的大小<br /><code>perf probe --add 'vfs_read count=%dx:u64'</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>operating system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lexcial</title>
    <link href="/2021/01/25/lex/"/>
    <url>/2021/01/25/lex/</url>
    
    <content type="html"><![CDATA[<h2 id="regex-to-nfa"><a class="markdownIt-Anchor" href="#regex-to-nfa"></a> Regex to NFA</h2><h3 id="thompsons-algorithm"><a class="markdownIt-Anchor" href="#thompsons-algorithm"></a> Thompson’s Algorithm</h3><p><img src="../image/reg.png" srcset="/img/loading.gif" alt="" /></p><p>Using the above basic elements, we can construct NFA recursively.</p><h3 id="data-struct"><a class="markdownIt-Anchor" href="#data-struct"></a> Data Struct</h3><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NFA_Node</span>&#123;</span>    NFA_Node* next_edge1_&#123;<span class="hljs-literal">nullptr</span>&#125;,*next_edge2_&#123;<span class="hljs-literal">nullptr</span>&#125;;    <span class="hljs-comment">// every node only have at most two edge in Thompson's Algorithm</span>    <span class="hljs-comment">// </span>    <span class="hljs-keyword">char</span> value_&#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-comment">// 1 : accepted state</span>    <span class="hljs-comment">// 0 : non-accepted state</span>    <span class="hljs-comment">// State state_&#123;&#125;; </span>    <span class="hljs-keyword">int</span> id_ = <span class="hljs-number">-1</span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(NFA_Node* to)</span></span>;&#125;;</code></pre><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NFA</span>&#123;</span>    NFA_Node* start_&#123;<span class="hljs-literal">nullptr</span>&#125;,*end_&#123;<span class="hljs-literal">nullptr</span>&#125;;<span class="hljs-keyword">public</span>:    <span class="hljs-comment">// NFA(NFA_Node* start,NFA_Node* end):start_(start),end_(end)&#123;&#125;</span>    NFA(<span class="hljs-keyword">char</span> ch);    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">concat</span><span class="hljs-params">(NFA* to)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">star</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">un</span><span class="hljs-params">(NFA* second)</span></span>;&#125;;</code></pre><h3 id="implement"><a class="markdownIt-Anchor" href="#implement"></a> Implement</h3><p>evaluating a arithmetic expressions:</p><p>using a operator number stack and a operand stack.</p><ol><li>if it’s a number, push it on stack</li><li>if it’s a oprand<ul><li>it’s <code>(</code> : push on the stack</li><li>it’s <code>)</code> : pop and evaluate until <code>(</code></li><li>if the priority of oprand in the top of stack greater than the current oprand, pop and evalation until current priority greater that the top’s of stack then push it on stack</li></ul></li><li>pop and evaluate the reminder elements in stack</li></ol><p>evaluating a regex expression is similar to evaluating arithmetic expressions. The difference is that the star operation only pops one element from the stack. Additionally, the concatenation operation is not denoted by any symbol, so we would have to detect it. We insert <code>.</code> into regex to represent concatenation operation.</p><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> isOperand = [](<span class="hljs-keyword">char</span> ch)&#123;    <span class="hljs-keyword">return</span> ch != <span class="hljs-string">'('</span> &amp;&amp; ch != <span class="hljs-string">'.'</span> &amp;&amp; ch != <span class="hljs-string">'|'</span>;&#125;;<span class="hljs-built_in">string</span> s;<span class="hljs-keyword">int</span> prev = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; reg.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i++)&#123;    s += reg[i];    <span class="hljs-keyword">auto</span> next = reg[i + <span class="hljs-number">1</span>];    <span class="hljs-keyword">if</span>(isOperand(reg[i]) &amp;&amp; next != <span class="hljs-string">'|'</span> &amp;&amp; next != <span class="hljs-string">'*'</span> &amp;&amp; next != <span class="hljs-string">')'</span>)&#123;        s += <span class="hljs-string">'.'</span>;    &#125;&#125;s += reg[reg.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];</code></pre><h2 id="nfa-to-dfa"><a class="markdownIt-Anchor" href="#nfa-to-dfa"></a> NFA to DFA</h2><h3 id="data-struct-2"><a class="markdownIt-Anchor" href="#data-struct-2"></a> Data Struct</h3><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DFA_Node</span>&#123;</span>    <span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">State</span>&#123;</span>        ACCEPT,NON_ACCEPT    &#125;;    <span class="hljs-keyword">int</span> id_ = <span class="hljs-number">-1</span>;    State state_&#123;State::NON_ACCEPT&#125;;    <span class="hljs-built_in">vector</span>&lt;DFA_Node*&gt; edges_;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt; values_;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">char</span> value,DFA_Node* to)</span></span>;&#125;;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DFA</span>&#123;</span>    DFA_Node* start_;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,DFA_Node*&gt; id_to_node_;    <span class="hljs-comment">//...</span>&#125;;</code></pre><h3 id="sub-set-construct-algorithm"><a class="markdownIt-Anchor" href="#sub-set-construct-algorithm"></a> Sub-Set Construct Algorithm</h3><ul><li><p><em>Epsilon Closure</em><br />find all states can be arrived through <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">NFA::epsilon_closure</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; st)</span></span>&#123;    <span class="hljs-keyword">auto</span> res = st;    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; stk;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : st) stk.push(u);        <span class="hljs-keyword">while</span>(stk.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">auto</span> t = stk.top();stk.pop();        <span class="hljs-keyword">auto</span> node = id_to_node_[t];        <span class="hljs-keyword">if</span>(node-&gt;value_ == NFA_Node::EPSILON)&#123;            <span class="hljs-keyword">if</span>(node-&gt;next_edge1_ &amp;&amp; !res.count(node-&gt;next_edge1_-&gt;id_)) &#123;                res.insert(node-&gt;next_edge1_-&gt;id_);                stk.push(node-&gt;next_edge1_-&gt;id_);            &#125;            <span class="hljs-keyword">if</span>(node-&gt;next_edge2_ &amp;&amp; !res.count(node-&gt;next_edge2_-&gt;id_)) &#123;                res.insert(node-&gt;next_edge2_-&gt;id_);                stk.push(node-&gt;next_edge2_-&gt;id_);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre></li><li><p><em>Move</em><br />find all states can be arrived through <code>value</code></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">NFA::move</span><span class="hljs-params">(<span class="hljs-keyword">char</span> value,<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; st)</span></span>&#123;    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : st)&#123;           <span class="hljs-keyword">auto</span> node = id_to_node_[u];        <span class="hljs-keyword">if</span>(node-&gt;value_ == value)&#123;            <span class="hljs-keyword">if</span>(node-&gt;next_edge1_) res.insert(node-&gt;next_edge1_-&gt;id_);            <span class="hljs-keyword">if</span>(node-&gt;next_edge2_) res.insert(node-&gt;next_edge2_-&gt;id_);        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;</code></pre></li></ul><p>using the above operator, we can achieve sub-set construct algorithm</p><pre><code class="hljs clean">q0 &lt;- epsilon_closure(n0)R &lt;- &#123;q0&#125;Q &lt;- q0while(Q is not empty)&#123;    pop q <span class="hljs-keyword">from</span> Q    foreach c <span class="hljs-keyword">in</span> character&#123;        t &lt;- epsilon_closure(move(q,c))        D[q,c] &lt;- t        <span class="hljs-keyword">if</span>(t has not <span class="hljs-keyword">in</span> Q)            Q &lt;- t    &#125;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-function">DFA* <span class="hljs-title">NFA::to_DFA</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;    DFA* dfa = <span class="hljs-keyword">new</span> DFA&#123;&#125;;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hash</span>&#123;</span>        <span class="hljs-function"><span class="hljs-keyword">size_t</span>  <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; st)</span> <span class="hljs-keyword">const</span></span>&#123;            <span class="hljs-keyword">size_t</span> ret = <span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : st) ret ^= hash&lt;<span class="hljs-keyword">int</span>&gt;&#123;&#125;(u);            <span class="hljs-keyword">return</span> ret;        &#125;    &#125;;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;,<span class="hljs-keyword">int</span>,Hash&gt; set_to_id;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; id_to_set;    <span class="hljs-keyword">auto</span> out = [](<span class="hljs-keyword">const</span> <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; st)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"set&#123;"</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : st) <span class="hljs-built_in">cout</span> &lt;&lt; u &lt;&lt;<span class="hljs-string">","</span>;        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"&#125;\n"</span>;    &#125;;    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    <span class="hljs-keyword">auto</span> q0 = epsilon_closure(&#123;start_-&gt;id_&#125;);    dfa-&gt;id_to_node_[idx] = <span class="hljs-keyword">new</span> DFA_Node&#123;id_:idx&#125;;    id_to_set[idx] = q0;    set_to_id[q0] = idx++;    <span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-keyword">int</span>&gt; inq;    q.push(<span class="hljs-number">0</span>);    inq.insert(<span class="hljs-number">0</span>);    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">auto</span> t = q.front();q.pop();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">127</span>;i++)&#123;            <span class="hljs-keyword">auto</span> tt = epsilon_closure(<span class="hljs-built_in">move</span>(i,id_to_set[t]));            <span class="hljs-keyword">if</span>(!tt.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">// out(tt); cout &lt;&lt; char(i) &lt;&lt; endl;</span>                        <span class="hljs-keyword">if</span>(!set_to_id.count(tt))&#123;                set_to_id[tt] = idx;                id_to_set[idx] = tt;                dfa-&gt;id_to_node_[idx] = <span class="hljs-keyword">new</span> DFA_Node&#123;id_:idx&#125;;                idx++;            &#125;            <span class="hljs-keyword">auto</span> tt_id = set_to_id[tt];            <span class="hljs-comment">// cout &lt;&lt; t &lt;&lt;" -&gt; " &lt;&lt; tt_id &lt;&lt; endl;</span>            dfa-&gt;id_to_node_[t]-&gt;add_edge(i,dfa-&gt;id_to_node_[tt_id]);            <span class="hljs-keyword">if</span>(!inq.count(tt_id))&#123;                q.push(tt_id);                inq.insert(tt_id);            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [k,v] : set_to_id)&#123;        <span class="hljs-keyword">if</span>(k.count(end_-&gt;id_)) dfa-&gt;id_to_node_[v]-&gt;state_ = DFA_Node::State::ACCEPT;    &#125;    dfa-&gt;start_ = dfa-&gt;id_to_node_[<span class="hljs-number">0</span>];    <span class="hljs-keyword">return</span> dfa;&#125;</code></pre><h2 id="mini-dfa"><a class="markdownIt-Anchor" href="#mini-dfa"></a> Mini-DFA</h2><h3 id="hopcroft-algorithm"><a class="markdownIt-Anchor" href="#hopcroft-algorithm"></a> Hopcroft Algorithm</h3><ol><li>Initially we place the states of the (not necessarily minimal) DFA into two<br />equivalence classes: final states and nonfinal states.</li><li>We then repeatedly search for<br />an equivalence class X and an input symbol c such that when given c as input,<br />the states in X make transitions to states in k &gt; 1 different equivalence classes.<br />We then partition X into k classes in such a way that all states in a given new class<br />would move to a member of the same old class on c.</li></ol><pre><code class="hljs c++"><span class="hljs-keyword">void</span> DFA::_split(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; all_state,<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; cur_set)&#123;    <span class="hljs-comment">// auto&amp; cur_set = all_state[index];</span>    <span class="hljs-keyword">if</span>(cur_set.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; state_in_set;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-keyword">auto</span>&amp; v : all_state)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : v)&#123;            state_in_set[u] = i;        &#125;        i++;    &#125;    <span class="hljs-comment">// </span>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; setId_to_state;    <span class="hljs-keyword">bool</span> splited = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">127</span>;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> st : cur_set)&#123;            <span class="hljs-comment">// if no trans from `st` through `i` char, then add `st` to it's new set.</span>            <span class="hljs-keyword">bool</span> transed = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-keyword">auto</span> nb : id_to_node_[st]-&gt;edges_)&#123;                <span class="hljs-keyword">if</span>(id_to_node_[st]-&gt;values_[j] == i)&#123;                    setId_to_state[state_in_set[nb-&gt;id_]].insert(st);                    transed = <span class="hljs-literal">true</span>;                &#125;                j++;            &#125;            <span class="hljs-keyword">if</span>(!transed) setId_to_state[state_in_set[st]].insert(st);        &#125;        <span class="hljs-keyword">if</span>(setId_to_state.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)&#123;            all_state.erase(<span class="hljs-built_in">find</span>(all_state.<span class="hljs-built_in">begin</span>(),all_state.<span class="hljs-built_in">end</span>(),cur_set));            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [k,v] : setId_to_state)&#123;                all_state.push_back(v);            &#125;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [k,v] : setId_to_state)&#123;                _split(all_state,v);            &#125;            splited = <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">if</span>(splited) <span class="hljs-keyword">break</span>;        setId_to_state.<span class="hljs-built_in">clear</span>();    &#125;    &#125;<span class="hljs-function">DFA* <span class="hljs-title">DFA::min_DFA</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; accepted,non_accepted;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [k,v] : id_to_node_)&#123;        <span class="hljs-keyword">if</span>(v-&gt;state_ == DFA_Node::State::ACCEPT) accepted.insert(k);        <span class="hljs-keyword">else</span> non_accepted.insert(k);    &#125;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; all_state;    all_state.push_back(non_accepted);    all_state.push_back(accepted);    _split(all_state,accepted);    _split(all_state,non_accepted);    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; state_in_set;    DFA* dfa = <span class="hljs-keyword">new</span> DFA&#123;&#125;;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">auto</span>&amp; s : all_state)&#123;        dfa-&gt;id_to_node_[i] = <span class="hljs-keyword">new</span> DFA_Node&#123;id_:i&#125;;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : s)            state_in_set[u] = i;        i++;    &#125;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Hash</span>&#123;</span>        <span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&amp; pr)</span> <span class="hljs-keyword">const</span></span>&#123;            <span class="hljs-keyword">return</span> hash&lt;<span class="hljs-keyword">int</span>&gt;&#123;&#125;(pr.first) ^ hash&lt;<span class="hljs-keyword">int</span>&gt;&#123;&#125;(pr.second);        &#125;    &#125;;    <span class="hljs-comment">// iterate all of new states</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">auto</span>&amp; s : all_state)&#123;        <span class="hljs-comment">// record added edges in case duplication</span>        <span class="hljs-built_in">unordered_set</span>&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;,Hash&gt; record_edge;         <span class="hljs-comment">// iterate all state in old dfa</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> u : s)&#123;            <span class="hljs-keyword">if</span>(id_to_node_[u]-&gt;state_ == DFA_Node::State::ACCEPT)                dfa-&gt;id_to_node_[state_in_set[u]]-&gt;state_ = DFA_Node::State::ACCEPT;            <span class="hljs-comment">// iterate all edges of node</span>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-keyword">auto</span> nb : id_to_node_[u]-&gt;edges_)&#123;                <span class="hljs-comment">// remove duplication</span>                <span class="hljs-comment">// if the edge has not been record then add it </span>                <span class="hljs-keyword">if</span>(!record_edge.count(&#123;state_in_set[nb-&gt;id_],id_to_node_[u]-&gt;values_[j]&#125;))&#123;                    dfa-&gt;id_to_node_[i]-&gt;add_edge(id_to_node_[u]-&gt;values_[j],dfa-&gt;id_to_node_[state_in_set[nb-&gt;id_]]);                    record_edge.insert(&#123;state_in_set[nb-&gt;id_],id_to_node_[u]-&gt;values_[j]&#125;);                &#125;                j++;            &#125;        &#125;        i++;    &#125;    dfa-&gt;start_ = dfa-&gt;id_to_node_[state_in_set[<span class="hljs-number">0</span>]];    <span class="hljs-comment">// reallocate id for every state for sequence</span>    dfa-&gt;alloc_id();    <span class="hljs-keyword">return</span> dfa;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>compiler</tag>
      
      <tag>regex</tag>
      
      <tag>NFA</tag>
      
      <tag>DFA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2021/01/09/git/"/>
    <url>/2021/01/09/git/</url>
    
    <content type="html"><![CDATA[<h2 id="the-three-states"><a class="markdownIt-Anchor" href="#the-three-states"></a> The Three States</h2><ul><li><strong>Modified</strong> : have changed the file but not commited to the database.</li><li><strong>Staged</strong> : have marked a modifed file in its current to be your next commit snapshot</li><li><strong>Committed</strong> : the data have been stored in local database</li></ul><h2 id="viewing-your-staged-and-unstaged-changes"><a class="markdownIt-Anchor" href="#viewing-your-staged-and-unstaged-changes"></a> Viewing Your Staged and Unstaged Changes</h2><ul><li><code>git diff</code> : compares what is in your working directory with what is in your staging area.</li><li><code>git diff --staged</code> : compares your staged changes to your last commit</li></ul><h2 id="removing-files"><a class="markdownIt-Anchor" href="#removing-files"></a> Removing Files</h2><ul><li><p><code>git rm PROJECTS.md</code> : untrack “<a href="http://PROJECTS.md" target="_blank" rel="noopener">PROJECTS.md</a>”</p></li><li><p><code>git rm --cached README</code> : keep the file on your hard drive but not have Git track it anymore.</p></li></ul><h2 id="moving-files"><a class="markdownIt-Anchor" href="#moving-files"></a> Moving Files</h2><p><code>$ git mv file_from file_to</code> is equivalent to running something like this:</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mv README.md README</span><span class="hljs-meta">$</span><span class="bash"> git rm README.md</span><span class="hljs-meta">$</span><span class="bash"> git add README</span></code></pre><h2 id="undoing-things"><a class="markdownIt-Anchor" href="#undoing-things"></a> Undoing Things</h2><p>when you commit early and forget to add some files, redo that commit, stage changes, and commit again using <code>--amend</code>.</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit --amend</span></code></pre><p>the second commit will replace the first.</p><h2 id="unstaging-a-staged-file"><a class="markdownIt-Anchor" href="#unstaging-a-staged-file"></a> Unstaging a Staged File</h2><ul><li><code>git restore --staged</code> : unstage a staged file</li><li><code>git restore</code> : unmodifying a modified file with git restore</li></ul><h1 id="git-branching"><a class="markdownIt-Anchor" href="#git-branching"></a> Git Branching</h1><p><img src="../image/PE/checkout-master.png" srcset="/img/loading.gif" alt="" /></p><ul><li><p>branch : a pointer to these commited metadata</p></li><li><p>HEAD point to current branch</p></li><li><p><code>git checkout</code> switch branch</p></li><li><p><code>git branch -d</code> delete branch</p></li><li><p>rename a branch<br /><code>$ git branch --move bad-branch-name corrected-branch-name</code><br />push to remote<br /><code>$ git push --set-upstream origin corrected-branch-name</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql</title>
    <link href="/2021/01/02/sql/"/>
    <url>/2021/01/02/sql/</url>
    
    <content type="html"><![CDATA[<h2 id="sql-query"><a class="markdownIt-Anchor" href="#sql-query"></a> SQL query</h2><ol><li>Generate a Cartesian product of the relations listed in the from clause.</li><li>Apply the predicates specified in the where clause on the result of Step 1.</li><li>For each tuple in the result of Step 2, output the attributes (or results of expressions) specified in the select clause.</li></ol><h3 id="the-rename-operation"><a class="markdownIt-Anchor" href="#the-rename-operation"></a> The Rename Operation</h3><p>result column rename</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">as</span> instructor_name, course_id<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> instructor.ID= teaches.ID;</code></pre><p>we wish to compare tuples in the same relation.</p><p>Find the names of all instructor whose salary is greater than at least one instructor in the <strong>Biology</strong> department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> T.name<span class="hljs-keyword">from</span> instructor <span class="hljs-keyword">as</span> T, instructor <span class="hljs-keyword">as</span> S<span class="hljs-keyword">where</span> T.salary &gt; S.salary <span class="hljs-keyword">and</span> S.dept_name=<span class="hljs-string">'Biology'</span>;</code></pre><h3 id="basic-string-operations"><a class="markdownIt-Anchor" href="#basic-string-operations"></a> Basic String Operations</h3><p>String concatenation (using <code>||</code>)</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">'hello'</span> || <span class="hljs-string">'world'</span>;</code></pre><p><code>upper(s)</code>,<code>lower(s)</code>,<code>trim(s)</code></p><h4 id="pattern-matching"><a class="markdownIt-Anchor" href="#pattern-matching"></a> Pattern matching</h4><ul><li><code>%</code> matches any substring.</li><li><code>_</code> matches any character.</li></ul><p>Using <code>like</code> expresses pattern</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept<span class="hljs-keyword">name</span><span class="hljs-keyword">from</span> department<span class="hljs-keyword">where</span> building <span class="hljs-keyword">like</span> <span class="hljs-string">'%Watson%'</span>;</code></pre><p>using <code>escape</code> define escape character</p><ul><li><code>like 'ab∖%cd%' escape '∖'</code> matches all strings beginning with “ab%cd”.</li><li><code>like 'ab∖∖cd%' escape '∖'</code> matches all strings beginning with “ab∖cd”.</li><li></li></ul><h4 id="attribute-specification-in-the-select-clause"><a class="markdownIt-Anchor" href="#attribute-specification-in-the-select-clause"></a> Attribute Specification in the Select Clause</h4><p>using <code>*</code> int the <strong>select</strong> to denote “all attributes”</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> instructor.*<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> instructor.ID= teaches.ID;</code></pre><h4 id="ordering-the-display-of-tuples"><a class="markdownIt-Anchor" href="#ordering-the-display-of-tuples"></a> Ordering the Display of Tuples</h4><p>The <strong>order by</strong> clause causes the tuples in the result of a query to appear in sorted<br />order.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> salary <span class="hljs-keyword">desc</span>, <span class="hljs-keyword">name</span> <span class="hljs-keyword">asc</span>;</code></pre><p>using the notation (v1, v2, … , vn) denote a tuple of arity n containing values v1, v2, … , vn;</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> instructor, teaches<span class="hljs-keyword">where</span> (instructor.ID, dept_name) = (teaches.ID, <span class="hljs-string">'Biology'</span>);</code></pre><h3 id="set-operations"><a class="markdownIt-Anchor" href="#set-operations"></a> Set Operations</h3><ul><li>The set of all courses taught in the Fall 2017 semester:</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>;</code></pre><ul><li>The set of all courses taught in the Spring 2018 semester:</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>;</code></pre><h4 id="union"><a class="markdownIt-Anchor" href="#union"></a> Union</h4><p>Finding the set of all courses taught either in Fall 2017 or in Spring 2018, or both.</p><p><code>union</code> elimates duplicates, <code>union all</code> retain duplicates.</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">union</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h4 id="intersect"><a class="markdownIt-Anchor" href="#intersect"></a> Intersect</h4><p>Finding the set of all courses taught in both the Fall 2017 and Spring 2018.<br /><code>intersect</code> elimates duplicates, <code>intersect all</code> retain duplicates.</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">intersect</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h4 id="except"><a class="markdownIt-Anchor" href="#except"></a> Except</h4><p>Finding all courses taught in the Fall 2017 semester but not in the Spring 2018 semester</p><pre><code class="hljs sql">(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2017</span>)<span class="hljs-keyword">except</span>(<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester = <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>= <span class="hljs-number">2018</span>);</code></pre><h3 id="aggregate-functions"><a class="markdownIt-Anchor" href="#aggregate-functions"></a> Aggregate Functions</h3><ul><li>Average: <code>avg</code></li><li>Minimum: <code>min</code></li><li>Maximum: <code>max</code></li><li>Total: <code>sum</code></li><li>Count: <code>count</code></li></ul><h4 id="aggregation-with-grouping"><a class="markdownIt-Anchor" href="#aggregation-with-grouping"></a> Aggregation with Grouping</h4><ul><li>The attribute or attributes given in the group by clause are used to form groups.</li></ul><p>Find the average salary in each department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span> (salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name;</code></pre><h4 id="the-having-clause"><a class="markdownIt-Anchor" href="#the-having-clause"></a> The Having Clause</h4><p>a condition that applies to groups rather than to tuples.</p><p>Finding those departments where the average salary of the instructors is more than $42,000.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> dept_name,<span class="hljs-keyword">avg</span>(salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> salary<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name<span class="hljs-keyword">having</span> <span class="hljs-keyword">avg</span>(salary) &gt; <span class="hljs-number">42000</span>;</code></pre><h3 id="nested-subqueries"><a class="markdownIt-Anchor" href="#nested-subqueries"></a> Nested Subqueries</h3><h4 id="set-membership"><a class="markdownIt-Anchor" href="#set-membership"></a> Set Membership</h4><p><code>in</code> or <code>not in</code> test for set membership</p><p>Find those courses that were taught in the Fall 2017 and that appear in the set of courses obtained in the subquery.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester=<span class="hljs-string">'Fall'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>=<span class="hljs-number">2017</span> <span class="hljs-keyword">and</span> course_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> course_id<span class="hljs-keyword">from</span> <span class="hljs-keyword">section</span><span class="hljs-keyword">where</span> semester=<span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>=<span class="hljs-number">2018</span>);</code></pre><p><code>in</code> and <code>not in</code> can be used on enumerated sets</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-keyword">name</span><span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">where</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">'Mozart'</span>,<span class="hljs-string">'Einstein'</span>);</code></pre><h4 id="set-comparison"><a class="markdownIt-Anchor" href="#set-comparison"></a> Set Comparison</h4><p>Find the names of all instructors whose salary is greater than at least one instructor in the Biology department.</p><p><code>some</code> means at least one</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span> <span class="hljs-keyword">from</span> instuctor<span class="hljs-keyword">where</span> salary &gt; <span class="hljs-keyword">some</span>(<span class="hljs-keyword">select</span> salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">where</span> dept_name=<span class="hljs-string">'Biology'</span>);``` <span class="hljs-comment">#### Subqueries in the From Clause</span>Find the average instructors’ salaries of those departmentswhere the average salary is greater than $42,000.```sql<span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span>salary<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> dept_name, <span class="hljs-keyword">avg</span> (salary) <span class="hljs-keyword">as</span> avg_salary<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name)<span class="hljs-keyword">where</span> avg_salary &gt; <span class="hljs-number">42000</span>;</code></pre><p>Find the maximum across all departments<br />of the total of all instructors’ salaries in each department.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">max</span>(tot_salary)<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> dept_name,<span class="hljs-keyword">sum</span>(salary)<span class="hljs-keyword">from</span> instructor<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_name) <span class="hljs-keyword">as</span> dept_total(dept_name,tot_salary);</code></pre><h2 id="intermediate-sql"><a class="markdownIt-Anchor" href="#intermediate-sql"></a> Intermediate SQL</h2><h3 id="join-expressions"><a class="markdownIt-Anchor" href="#join-expressions"></a> Join Expressions</h3><h4 id="the-natural-join"><a class="markdownIt-Anchor" href="#the-natural-join"></a> The Natural Join</h4><p>The <code>natural join</code> operation, unlike Cartesian product of two relations, only considers those pairs of tuples with the same value on those attributes that appear in the schemas of both relations.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> student, takes<span class="hljs-keyword">where</span> student.ID = takes.ID;</code></pre><p>equals</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>, course_id<span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> takes;</code></pre><p>because two relations have the same attribute <strong>ID</strong></p><p>The operation <code>join … using</code> requires a list of attribute to be specified. All attributes must have the same value.</p><p>List the names of students along with the titles of courses that they have taken.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,title<span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> tasks,course<span class="hljs-keyword">where</span> tasks.course_id == course.course_id;</code></pre><p>note that <code>tasks.course_id</code> from the result of natural join and <code>course_id</code> is from tasks.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">name</span>,title<span class="hljs-keyword">from</span> (student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> tasks) <span class="hljs-keyword">join</span> course <span class="hljs-keyword">using</span>(course_id);</code></pre><h4 id="join-conditions"><a class="markdownIt-Anchor" href="#join-conditions"></a> Join Conditions</h4><p>The <code>on</code> condation allows a general predicate over the relation being joined.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.ID <span class="hljs-keyword">as</span> <span class="hljs-keyword">ID</span>, <span class="hljs-keyword">name</span>, dept_name, tot_cred,    course_id, sec_id, semester, <span class="hljs-keyword">year</span>, grade<span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> takes <span class="hljs-keyword">on</span> student.ID = takes.ID;</code></pre><h4 id="outer-joins"><a class="markdownIt-Anchor" href="#outer-joins"></a> Outer Joins</h4><p>The <strong>out-join</strong> preserve some tuples missed in join.</p><ul><li><code>left outer join</code> preserve tuples only in the named before (to the left) <strong>left outer join</strong> operation.</li><li><code>right outer join</code> preserve tuples only in the named after (to the right) <strong>right outer join</strong> operation.</li><li>The <code>full outer join</code> preserves tuples in both relations.</li></ul><p>That do not preserve nonmatched tuples are called <strong>inner join</strong>.</p><p>outer join operation</p><ol><li>compute inner join</li><li>for every tuples in the left relation that do not match any tuple in the right relation in the inner join, add a tuple with null of right attributes to the result</li></ol><p>Find all students who have not taken a course.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">ID</span><span class="hljs-keyword">from</span> student <span class="hljs-keyword">natural</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> tasks<span class="hljs-keyword">where</span> course_id == <span class="hljs-literal">null</span>;</code></pre><p>Display<br />a list of all students in the Comp. Sci. department, along with the course sections, if<br />any, that they have taken in Spring 2017; all course sections from Spring 2017 must be displayed, even if no student from the Comp. Sci. department has taken the course<br />section.</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> dept_name == <span class="hljs-string">'Comp.Sci.'</span>)<span class="hljs-keyword">natural</span> <span class="hljs-keyword">full</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tasks <span class="hljs-keyword">where</span> semester == <span class="hljs-string">'Spring'</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span> == <span class="hljs-number">2017</span>);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux programing</title>
    <link href="/2020/10/09/linux/"/>
    <url>/2020/10/09/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="interaction-with-the-execution-environment"><a class="markdownIt-Anchor" href="#interaction-with-the-execution-environment"></a> Interaction With the Execution environment</h1><h2 id="using-getopt_long"><a class="markdownIt-Anchor" href="#using-getopt_long"></a> Using getopt_long</h2><p><code>#include &lt;getopt.h&gt;</code><br />for example:<br /><code>$ program -h -v -o name</code></p><p><code>const char* const short_options = &quot;ho:v&quot;;</code><br /><code>:</code>indicate a argument followed</p><pre><code class="hljs c"><span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">long_options</span>[] = &#123;</span>    <span class="hljs-comment">// long option,has argument,NULL,short option</span>&#123; <span class="hljs-string">"help"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'h'</span> &#125;,&#123; <span class="hljs-string">"output"</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'0'</span> &#125;,&#123; <span class="hljs-string">"verbose"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'v'</span> &#125;,&#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;    <span class="hljs-comment">// ended with 0</span>&#125;;</code></pre><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;getopt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-comment">/* The name of this program. */</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* program_name;<span class="hljs-comment">/* Prints usage information for this program to STREAM (typically</span><span class="hljs-comment">stdout or stderr), and exit the program with EXIT_CODE. Does not</span><span class="hljs-comment">return. */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_usage</span> <span class="hljs-params">(FILE* stream, <span class="hljs-keyword">int</span> exit_code)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">fprintf</span> (stream, <span class="hljs-string">"Usage: %s options [ inputfile ... ]\n"</span>, program_name);    <span class="hljs-built_in">fprintf</span> (stream,    <span class="hljs-string">" -h --help Display this usage information.\n"</span>    <span class="hljs-string">" -o --output filename Write output to file.\n"</span>    <span class="hljs-string">" -v --verbose Print verbose messages.\n"</span>);    <span class="hljs-built_in">exit</span> (exit_code);&#125;<span class="hljs-comment">/* Main program entry point. ARGC contains number of argument list</span><span class="hljs-comment">elements; ARGV is an array of pointers to them. */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> next_option;    <span class="hljs-comment">/* A string listing valid short options letters. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> short_options = <span class="hljs-string">"ho:v"</span>;    <span class="hljs-comment">/* An array describing valid long options. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">option</span> <span class="hljs-title">long_options</span>[] = &#123;</span>    <span class="hljs-comment">// long option,has argument,NULL,short option</span>&#123; <span class="hljs-string">"help"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'h'</span> &#125;,&#123; <span class="hljs-string">"output"</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'0'</span> &#125;,&#123; <span class="hljs-string">"verbose"</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-string">'v'</span> &#125;,&#123; <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span> &#125;&#125;;    <span class="hljs-comment">// ended with 0</span>    <span class="hljs-comment">/* The name of the file to receive program output, or NULL for</span><span class="hljs-comment">    standard output. */</span>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* output_filename = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">/* Whether to display verbose messages. */</span>    <span class="hljs-keyword">int</span> verbose = <span class="hljs-number">0</span>;    <span class="hljs-comment">/* Remember the name of the program, to incorporate in messages.</span><span class="hljs-comment">    The name is stored in argv[0]. */</span>    program_name = argv[<span class="hljs-number">0</span>];    <span class="hljs-keyword">do</span> &#123;        next_option = getopt_long (argc, argv, short_options,        long_options, <span class="hljs-literal">NULL</span>);        <span class="hljs-keyword">switch</span> (next_option)        &#123;        <span class="hljs-keyword">case</span> <span class="hljs-string">'h'</span>: <span class="hljs-comment">/* -h or --help */</span>            <span class="hljs-comment">/* User has requested usage information. Print it to standard</span><span class="hljs-comment">            output, and exit with exit code zero (normal termination). */</span>            print_usage (<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>);        <span class="hljs-keyword">case</span> <span class="hljs-string">'o'</span>: <span class="hljs-comment">/* -o or --output */</span>            <span class="hljs-comment">/* This option takes an argument, the name of the output file. */</span>            output_filename = optarg;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">'v'</span>: <span class="hljs-comment">/* -v or --verbose */</span>            verbose = <span class="hljs-number">1</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-string">'?'</span>: <span class="hljs-comment">/* The user specified an invalid option. */</span>            <span class="hljs-comment">/* Print usage information to standard error, and exit with exit</span><span class="hljs-comment">            code one (indicating abnormal termination). */</span>            print_usage (<span class="hljs-built_in">stderr</span>, <span class="hljs-number">1</span>);        <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>: <span class="hljs-comment">/* Done with options. */</span>            <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>: <span class="hljs-comment">/* Something else: unexpected. */</span>            <span class="hljs-built_in">abort</span> ();        &#125;    &#125;    <span class="hljs-keyword">while</span> (next_option != <span class="hljs-number">-1</span>);    <span class="hljs-comment">/* Done with options. OPTIND points to first nonoption argument.</span><span class="hljs-comment">    For demonstration purposes, print them if the verbose option was</span><span class="hljs-comment">    specified. */</span>&#125;;</code></pre><h2 id="standard-io"><a class="markdownIt-Anchor" href="#standard-io"></a> Standard I/O</h2><ul><li><code>stdin</code></li><li><code>stdout</code> default line buffered</li><li><code>stderr</code> default no buffered</li></ul><p><code>fprint(stderr,msg)</code></p><p><code>$ program &gt; output_file.txt 2&gt;&amp;1</code><br /><code>$ program 2&gt;&amp;1 | filter</code><br /><code>2&gt;&amp;1</code> indicate fd <strong>2</strong>(<code>stderr</code>) merged into fd <strong>1</strong>(<code>stdout</code>)</p><h2 id="the-environment"><a class="markdownIt-Anchor" href="#the-environment"></a> The Environment</h2><ul><li>access environment variable value using <code>$varname</code>.<br /><code>$ echo $HOME</code><br /><code>$ echo $PATH</code></li><li>export variable<br /><code>$ export HOME=&quot;/bin&quot;</code></li><li>functions in <code>&lt;stdlib.h&gt;</code><br /><code>char *getenv (const char *__name)</code><br /><code>int setenv (const char *__name, const char *__value, int __replace)</code></li></ul><h1 id="ipc"><a class="markdownIt-Anchor" href="#ipc"></a> IPC</h1><h2 id="pipe"><a class="markdownIt-Anchor" href="#pipe"></a> Pipe</h2><p><code>pipe(int* fds)</code> create a pipe, fds[0] is read end, dfs[1] is write end.<br /><code>int dup2(int oldfd, int newfd)</code>, newfd equated file with oldfd</p><h3 id="pipe-redirect"><a class="markdownIt-Anchor" href="#pipe-redirect"></a> pipe redirect</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> fds[<span class="hljs-number">2</span>];    <span class="hljs-keyword">pid_t</span> pid;    pipe(fds);    pid = fork();    <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;        <span class="hljs-comment">// child</span>        <span class="hljs-built_in">close</span>(fds[<span class="hljs-number">1</span>]);        dup2(fds[<span class="hljs-number">0</span>],STDIN_FILENO); <span class="hljs-comment">// read from `stdin` as same as pipe</span>        execlp(<span class="hljs-string">"sort"</span>,<span class="hljs-string">"sort"</span>,<span class="hljs-number">0</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        FILE* stream = fdopen(fds[<span class="hljs-number">1</span>],<span class="hljs-string">"w"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This is a test.\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This is a test.\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"Hello world\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"My dog\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"This prog\n"</span>);        <span class="hljs-built_in">fprintf</span>(stream,<span class="hljs-string">"One fish.\n"</span>);        fflush(stream);        <span class="hljs-built_in">close</span>(fds[<span class="hljs-number">1</span>]);        waitpid(pid,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> Socket</h2><h3 id="local-sockets"><a class="markdownIt-Anchor" href="#local-sockets"></a> Local Sockets</h3><p>server.c</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/un.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-comment">/* Read text from the socket and print it out. Continue until the</span><span class="hljs-comment">socket closes. Return nonzero if the client sent a “quit”</span><span class="hljs-comment">message, zero otherwise. */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">server</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> client_socket)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">int</span> length;        <span class="hljs-keyword">char</span>* <span class="hljs-built_in">text</span>;        <span class="hljs-comment">/* First, read the length of the text message from the socket. If</span><span class="hljs-comment">        read returns zero, the client closed the connection. */</span>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">read</span> (client_socket, &amp;length, <span class="hljs-keyword">sizeof</span> (length)) == <span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-comment">/* Allocate a buffer to hold the text. */</span>        <span class="hljs-built_in">text</span> = (<span class="hljs-keyword">char</span>*) <span class="hljs-built_in">malloc</span> (length);        <span class="hljs-comment">/* Read the text itself, and print it. */</span>        <span class="hljs-built_in">read</span> (client_socket, <span class="hljs-built_in">text</span>, length);        <span class="hljs-built_in">printf</span> (“%s\n”, <span class="hljs-built_in">text</span>);        <span class="hljs-comment">/* Free the buffer. */</span>        <span class="hljs-built_in">free</span> (<span class="hljs-built_in">text</span>);        <span class="hljs-comment">/* If the client sent the message “quit,” we’re all done. */</span>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span> (<span class="hljs-built_in">text</span>, “quit”))            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> socket_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-keyword">int</span> client_sent_quit_message;    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_LOCAL, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">// `PF_LOCAL` local namespace</span>    <span class="hljs-comment">/* Indicate that this is a server. */</span>    name.sun_family = AF_LOCAL;    <span class="hljs-built_in">strcpy</span> (name.sun_path, socket_name);    bind (socket_fd, &amp;name, SUN_LEN (&amp;name));    <span class="hljs-comment">/* Listen for connections. */</span>    <span class="hljs-built_in">listen</span> (socket_fd, <span class="hljs-number">5</span>);    <span class="hljs-comment">/* Repeatedly accept connections, spinning off one server() to deal</span><span class="hljs-comment">    with each client. Continue until a client sends a “quit” message. */</span>    <span class="hljs-keyword">do</span> &#123;        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">client_name</span>;</span>        <span class="hljs-keyword">socklen_t</span> client_name_len;        <span class="hljs-keyword">int</span> client_socket_fd;        <span class="hljs-comment">/* Accept a connection. */</span>        client_socket_fd = accept (socket_fd, &amp;client_name, &amp;client_name_len);        <span class="hljs-comment">/* Handle the connection. */</span>        client_sent_quit_message = server (client_socket_fd);        <span class="hljs-comment">/* Close our end of the connection. */</span>        <span class="hljs-built_in">close</span> (client_socket_fd);    &#125;    <span class="hljs-keyword">while</span> (!client_sent_quit_message);    <span class="hljs-comment">/* Remove the socket file. */</span>    <span class="hljs-built_in">close</span> (socket_fd);    unlink (socket_name);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>client.c</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/un.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write_text</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> socket_fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-built_in">text</span>)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/* Write the number of bytes in the string, including</span><span class="hljs-comment">    NUL-termination. */</span>    <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">strlen</span> (<span class="hljs-built_in">text</span>) + <span class="hljs-number">1</span>;    <span class="hljs-built_in">write</span> (socket_fd, &amp;length, <span class="hljs-keyword">sizeof</span> (length));    <span class="hljs-comment">/* Write the string. */</span>    <span class="hljs-built_in">write</span> (socket_fd, <span class="hljs-built_in">text</span>, length);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> socket_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> message = argv[<span class="hljs-number">2</span>];    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_un</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_LOCAL, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">/* Store the server’s name in the socket address. */</span>    name.sun_family = AF_LOCAL;    <span class="hljs-built_in">strcpy</span> (name.sun_path, socket_name);    <span class="hljs-comment">/* Connect the socket. */</span>    <span class="hljs-built_in">connect</span> (socket_fd, &amp;name, SUN_LEN (&amp;name));    <span class="hljs-comment">/* Write the text on the command line to the socket. */</span>    write_text (socket_fd, message);    <span class="hljs-built_in">close</span> (socket_fd);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="internet-domain-sockets"><a class="markdownIt-Anchor" href="#internet-domain-sockets"></a> Internet-Domain Sockets</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-comment">/* Print the contents of the home page for the server’s socket.</span><span class="hljs-comment">Return an indication of success. */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_home_page</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> socket_fd)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> <span class="hljs-built_in">buffer</span>[<span class="hljs-number">10000</span>];    <span class="hljs-keyword">ssize_t</span> number_characters_read;    <span class="hljs-comment">/* Send the HTTP GET command for the home page. */</span>    <span class="hljs-built_in">sprintf</span> (<span class="hljs-built_in">buffer</span>, “GET /\n”);    <span class="hljs-built_in">write</span> (socket_fd, <span class="hljs-built_in">buffer</span>, <span class="hljs-built_in">strlen</span> (<span class="hljs-built_in">buffer</span>));    <span class="hljs-comment">/* Read from the socket. The call to read may not</span><span class="hljs-comment">    return all the data at one time, so keep</span><span class="hljs-comment">    trying until we run out. */</span>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;        number_characters_read = <span class="hljs-built_in">read</span> (socket_fd, <span class="hljs-built_in">buffer</span>, <span class="hljs-number">10000</span>);        <span class="hljs-keyword">if</span> (number_characters_read == <span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span>;        <span class="hljs-comment">/* Write the data to standard output. */</span>        fwrite (<span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">char</span>), number_characters_read, <span class="hljs-built_in">stdout</span>);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* <span class="hljs-keyword">const</span> argv[])</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> socket_fd;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>* <span class="hljs-title">hostinfo</span>;</span>    <span class="hljs-comment">/* Create the socket. */</span>    socket_fd = socket (PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-comment">/* Store the server’s name in the socket address. */</span>    name.sin_family = AF_INET;    <span class="hljs-comment">/* Convert from strings to numbers. */</span>    hostinfo = gethostbyname (argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span> (hostinfo == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span>    name.sin_addr = *((struct in_addr *) hostinfo-&gt;h_addr);    <span class="hljs-comment">/* Web servers use port 80. */</span>    name.sin_port = htons (<span class="hljs-number">80</span>);    <span class="hljs-comment">/* Connect to the Web server */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">connect</span> (socket_fd, &amp;name, <span class="hljs-keyword">sizeof</span> (struct sockaddr_in)) == <span class="hljs-number">-1</span>) &#123;        perror (“<span class="hljs-built_in">connect</span>”);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">/* Retrieve the server’s home page. */</span>    get_home_page (socket_fd);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h1 id="system-call"><a class="markdownIt-Anchor" href="#system-call"></a> System Call</h1><h2 id="using-strace"><a class="markdownIt-Anchor" href="#using-strace"></a> Using strace</h2><p><code>sudo apt install strace</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>raft implement notice</title>
    <link href="/2020/08/19/raft/"/>
    <url>/2020/08/19/raft/</url>
    
    <content type="html"><![CDATA[<ol><li>server should convert to <code>follower</code> and set <code>currentTerm</code> to be <code>args's Term</code>, when receive a RPC message</li><li>when a <code>follower</code> is disconnected from cluster, connecting back later, it’s term is large than the others. It will send requestVote to others (include <code>leader</code>), then current <code>leader</code> convert to <code>follow</code>, starting a new election. It will eventually convert to <code>leader</code>. Connected <code>follower</code> cannot acquire votes because <code>Election restriction</code></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>distributed</tag>
      
      <tag>raft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE import table inject</title>
    <link href="/2020/08/06/PE%20%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/"/>
    <url>/2020/08/06/PE%20%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>导入表描述了exe执行时需要加载的dll</p><h2 id="create-a-test-dll"><a class="markdownIt-Anchor" href="#create-a-test-dll"></a> create a test dll</h2><p><img src="/image/PE/dllmain.png" srcset="/img/loading.gif" alt="" /><br /><code>init()</code> 和 <code>destory()</code>分别在dll加载和dll卸载时调用<br /><img src="/image/PE/import.png" srcset="/img/loading.gif" alt="" /><br /><img src="/image/PE/pch.png" srcset="/img/loading.gif" alt="" /><br />dll必须提供导出函数才会被加载</p><h2 id="导入表结构"><a class="markdownIt-Anchor" href="#导入表结构"></a> 导入表结构</h2><p><img src="/image/PE/import_table.png" srcset="/img/loading.gif" alt="导入表结构" /><br />表中地址均为<code>RVA</code></p><h2 id="inject-code"><a class="markdownIt-Anchor" href="#inject-code"></a> inject code</h2><h3 id="read-file"><a class="markdownIt-Anchor" href="#read-file"></a> read file</h3><pre><code class="hljs c++">DWORD ext_size = <span class="hljs-number">0x1000</span>; <span class="hljs-comment">// 文件扩大的大小</span>FILE* g_f = fopen(filename, <span class="hljs-string">"rb"</span>);fseek(g_f, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-keyword">int</span> file_size = ftell(g_f);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"file size : %d\n"</span>, file_size);<span class="hljs-keyword">auto</span> out_size = file_size + ext_size;BYTE* file_buff = (BYTE*)<span class="hljs-built_in">malloc</span>(out_size); <span class="hljs-built_in">memset</span>(file_buff, <span class="hljs-number">0</span>, out_size);fseek(g_f, <span class="hljs-number">0</span>, SEEK_SET);fread(file_buff, file_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);</code></pre><h3 id="extend-the-last-section"><a class="markdownIt-Anchor" href="#extend-the-last-section"></a> extend the last section</h3><pre><code class="hljs c++">PIMAGE_IMPORT_DESCRIPTOR import_table = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + RVA2FOV(section_header, sections_nums, op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress));<span class="hljs-keyword">auto</span> last_section_header = section_header + sections_nums - <span class="hljs-number">1</span>;<span class="hljs-keyword">auto</span> old_last_size = last_section_header-&gt;Misc.VirtualSize;<span class="hljs-keyword">auto</span> N = <span class="hljs-built_in">max</span>(last_section_header-&gt;Misc.VirtualSize, last_section_header-&gt;SizeOfRawData) + ext_size;last_section_header-&gt;Misc.VirtualSize = last_section_header-&gt;SizeOfRawData = N;last_section_header-&gt;Characteristics = <span class="hljs-number">0xc0000040</span>;op_header-&gt;SizeOfImage += ext_size;</code></pre><p><strong><code>Characteristics</code>of<code>section</code>must be<code>0xc0000040</code></strong></p><h3 id="copy-origin-import-table"><a class="markdownIt-Anchor" href="#copy-origin-import-table"></a> copy origin import table</h3><pre><code class="hljs c++"><span class="hljs-comment">// file offset to virtual offset to address in the last section</span><span class="hljs-keyword">auto</span> FOA2RVA = [last_section_header,file_buff](BYTE* addr) &#123;    <span class="hljs-keyword">return</span> (DWORD)(last_section_header-&gt;VirtualAddress + (addr - (last_section_header-&gt;PointerToRawData + file_buff)));&#125;;PIMAGE_IMPORT_DESCRIPTOR dest = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + file_size);op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress = FOA2RVA((BYTE*)dest);op_header-&gt;DataDirectory[IMPORT_TABLE].Size += <span class="hljs-keyword">sizeof</span>(*dest);<span class="hljs-keyword">auto</span> p = dest;<span class="hljs-keyword">for</span> (; *(DWORD*)import_table != <span class="hljs-number">0</span>;++import_table,++p) &#123;    <span class="hljs-built_in">memcpy</span>(p,import_table,<span class="hljs-keyword">sizeof</span>(*import_table));&#125;</code></pre><h2 id="add-new-import-table-and-int-iat"><a class="markdownIt-Anchor" href="#add-new-import-table-and-int-iat"></a> add new import table and INT IAT</h2><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> patch = p; <span class="hljs-comment">// the new import talbe fixed later</span>DWORD* int_table =(DWORD*)(p + <span class="hljs-number">2</span>);DWORD* iat_table = (DWORD*)(int_table + <span class="hljs-number">2</span>);WORD* name = (WORD*)(iat_table + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(name + <span class="hljs-number">1</span>, <span class="hljs-string">"add"</span>, <span class="hljs-number">4</span>);iat_table[<span class="hljs-number">0</span>] = int_table[<span class="hljs-number">0</span>] = FOA2RVA((BYTE*)name);BYTE* dll_addr = (BYTE*)(name + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(dll_addr, dllname, <span class="hljs-built_in">strlen</span>(dllname) + <span class="hljs-number">1</span>);<span class="hljs-comment">// fix new import talbe address</span>patch-&gt;Name = FOA2RVA((BYTE*)dll_addr);patch-&gt;FirstThunk = FOA2RVA((BYTE*)iat_table);patch-&gt;OriginalFirstThunk = FOA2RVA((BYTE*)int_table);</code></pre><h3 id="the-whole-code"><a class="markdownIt-Anchor" href="#the-whole-code"></a> the whole code</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">injectImportTable</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* filename,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* newname,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* dllname)</span> </span>&#123;DWORD ext_size = <span class="hljs-number">0x1000</span>;FILE* g_f = fopen(filename, <span class="hljs-string">"rb"</span>);fseek(g_f, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-keyword">int</span> file_size = ftell(g_f);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"file size : %d\n"</span>, file_size);<span class="hljs-keyword">auto</span> out_size = file_size + ext_size;BYTE* file_buff = (BYTE*)<span class="hljs-built_in">malloc</span>(out_size); <span class="hljs-built_in">memset</span>(file_buff, <span class="hljs-number">0</span>, out_size);fseek(g_f, <span class="hljs-number">0</span>, SEEK_SET);fread(file_buff, file_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)file_buff;<span class="hljs-keyword">auto</span> pe_header_offset = dos_header-&gt;e_lfanew;PIMAGE_NT_HEADERS nt_header = (PIMAGE_NT_HEADERS)(file_buff + pe_header_offset);PIMAGE_FILE_HEADER file_header = &amp;nt_header-&gt;FileHeader;<span class="hljs-keyword">auto</span> sections_nums = file_header-&gt;NumberOfSections;PIMAGE_OPTIONAL_HEADER op_header = &amp;nt_header-&gt;OptionalHeader;<span class="hljs-keyword">auto</span> headers_size = op_header-&gt;SizeOfHeaders;<span class="hljs-keyword">auto</span> image_base = op_header-&gt;ImageBase;<span class="hljs-keyword">auto</span> image_size = op_header-&gt;SizeOfImage;PIMAGE_SECTION_HEADER section_header = PIMAGE_SECTION_HEADER((BYTE*)op_header + file_header-&gt;SizeOfOptionalHeader);<span class="hljs-comment">// extend last section</span>PIMAGE_IMPORT_DESCRIPTOR import_table = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + RVA2FOV(section_header, sections_nums, op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress));<span class="hljs-keyword">auto</span> text_attr = section_header-&gt;Characteristics; <span class="hljs-comment">// characteristics of text</span><span class="hljs-keyword">auto</span> last_section_header = section_header + sections_nums - <span class="hljs-number">1</span>;<span class="hljs-keyword">auto</span> old_last_size = last_section_header-&gt;Misc.VirtualSize;<span class="hljs-keyword">auto</span> N = <span class="hljs-built_in">max</span>(last_section_header-&gt;Misc.VirtualSize, last_section_header-&gt;SizeOfRawData) + ext_size;last_section_header-&gt;Misc.VirtualSize = last_section_header-&gt;SizeOfRawData = N;last_section_header-&gt;Characteristics = <span class="hljs-number">0xc0000040</span>;op_header-&gt;SizeOfImage += ext_size;<span class="hljs-keyword">auto</span> FOA2RVA = [last_section_header,file_buff](BYTE* addr) &#123;<span class="hljs-keyword">return</span> (DWORD)(last_section_header-&gt;VirtualAddress + (addr - (last_section_header-&gt;PointerToRawData + file_buff)));&#125;;PIMAGE_IMPORT_DESCRIPTOR dest = (PIMAGE_IMPORT_DESCRIPTOR)(file_buff + file_size);op_header-&gt;DataDirectory[IMPORT_TABLE].VirtualAddress = FOA2RVA((BYTE*)dest);op_header-&gt;DataDirectory[IMPORT_TABLE].Size += <span class="hljs-keyword">sizeof</span>(*dest);<span class="hljs-keyword">auto</span> p = dest;<span class="hljs-keyword">for</span> (; *(DWORD*)import_table != <span class="hljs-number">0</span>;++import_table,++p) &#123;<span class="hljs-built_in">memcpy</span>(p,import_table,<span class="hljs-keyword">sizeof</span>(*import_table));&#125;<span class="hljs-keyword">auto</span> patch = p;DWORD* int_table =(DWORD*)(p + <span class="hljs-number">2</span>);DWORD* iat_table = (DWORD*)(int_table + <span class="hljs-number">2</span>);WORD* name = (WORD*)(iat_table + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(name + <span class="hljs-number">1</span>, <span class="hljs-string">"add"</span>, <span class="hljs-number">4</span>);iat_table[<span class="hljs-number">0</span>] = int_table[<span class="hljs-number">0</span>] = FOA2RVA((BYTE*)name);BYTE* dll_addr = (BYTE*)(name + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-built_in">memcpy</span>(dll_addr, dllname, <span class="hljs-built_in">strlen</span>(dllname) + <span class="hljs-number">1</span>);patch-&gt;Name = FOA2RVA((BYTE*)dll_addr);patch-&gt;FirstThunk = FOA2RVA((BYTE*)iat_table);patch-&gt;OriginalFirstThunk = FOA2RVA((BYTE*)int_table);g_f = fopen(newname, <span class="hljs-string">"wb"</span>);fwrite(file_buff, out_size, <span class="hljs-number">1</span>, g_f);fclose(g_f);&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm template</title>
    <link href="/2020/07/05/code%20template/"/>
    <url>/2020/07/05/code%20template/</url>
    
    <content type="html"><![CDATA[<h1 id="模板题"><a class="markdownIt-Anchor" href="#模板题"></a> 模板题</h1><h2 id="0x00排序"><a class="markdownIt-Anchor" href="#0x00排序"></a> 0x00排序</h2><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><p>给定你一个长度为n的整数数列。</p><p>请你使用快速排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1-10^{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>范围内），表示整个数列。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">1≤n≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例</h4><p>5<br />3 1 2 4 5</p><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例</h4><p>1 2 3 4 5</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> d[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l &gt;=r )        <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> i = l <span class="hljs-number">-1</span>,j = r + <span class="hljs-number">1</span>,pivo = d[l + r &gt;&gt; <span class="hljs-number">1</span>];    <span class="hljs-keyword">while</span>(i &lt; j)&#123;        <span class="hljs-keyword">while</span>(d[++i] &lt; pivo);        <span class="hljs-keyword">while</span>(d[--j] &gt; pivo);        <span class="hljs-keyword">if</span>(i &lt; j) swap(d[i],d[j]);    &#125;    qs(l,j);    qs(j + <span class="hljs-number">1</span>,r);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++ )&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;d[i]);    &#125;    qs(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,d[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="快速选择"><a class="markdownIt-Anchor" href="#快速选择"></a> 快速选择</h3><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> d[<span class="hljs-number">100010</span>];<span class="hljs-keyword">int</span> n,k;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; k;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;d[i]);        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,r = n - <span class="hljs-number">1</span>;    srand(time(<span class="hljs-number">0</span>));    <span class="hljs-comment">// 求第k个数</span>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        swap(d[(rand()%(r - l + <span class="hljs-number">1</span>)) + l],d[l]);        <span class="hljs-keyword">int</span> pivo = d[l];        <span class="hljs-keyword">int</span> i = l,j = r;                <span class="hljs-keyword">while</span>(i &lt; j)&#123;            <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; d[j] &gt;= pivo)j--;            d[i] = d[j];            <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; d[i] &lt;= pivo) i++;            d[j]  = d[i];        &#125;                d[i] = pivo;                <span class="hljs-keyword">if</span>(i == k)&#123;            <span class="hljs-keyword">break</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; k)&#123;            l = i + <span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span>            r = i - <span class="hljs-number">1</span>;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; d[k];&#125;</code></pre><h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> d[M],tmp[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;    merge_sort(l,mid), merge_sort(mid + <span class="hljs-number">1</span>,r);    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>,i = l,j = mid + <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;        <span class="hljs-keyword">if</span>(d[i] &lt;= d[j]) tmp[k++] = d[i++];        <span class="hljs-keyword">else</span> tmp[k++] = d[j++];    &#125;    <span class="hljs-keyword">while</span>(i &lt;= mid) tmp[k++] = d[i++];    <span class="hljs-keyword">while</span>(j &lt;= r) tmp[k++] = d[j++];    <span class="hljs-keyword">for</span>(i = l,j = <span class="hljs-number">0</span>;j &lt; k;j++,i++) d[i] = tmp[j];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++ )&#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;d[i]);    &#125;    merge_sort(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,d[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="二分"><a class="markdownIt-Anchor" href="#二分"></a> 二分</h2><ul><li>有单调性一定可以二分</li><li>没有单调性不一定不能二分</li></ul><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">                        check() == true</span><span class="hljs-comment">    |_______________| |_______________|</span><span class="hljs-comment">    l                 ^               r</span><span class="hljs-comment">                     mid</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(check(mid)) r = mid;        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;     &#125;    <span class="hljs-keyword">return</span> l;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">     check() == true</span><span class="hljs-comment">    |_______________| |_______________|</span><span class="hljs-comment">    l               ^                 r</span><span class="hljs-comment">                   mid</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(check(mid)) l = mid;        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;     &#125;    <span class="hljs-keyword">return</span> l;&#125;</code></pre><h2 id="0x01高精度"><a class="markdownIt-Anchor" href="#0x01高精度"></a> 0x01高精度</h2><h3 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">int</span> c= <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>() || i &lt;B.<span class="hljs-built_in">size</span>();i++)&#123;        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) c += A[i];        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) c += B[i];        res.push_back(c % <span class="hljs-number">10</span>);        c/= <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">if</span>(c) res.push_back(c);    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="减法"><a class="markdownIt-Anchor" href="#减法"></a> 减法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; A,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; B)</span></span>&#123;    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i++)&#123;        c = A[i] - c;        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) c = c - B[i];        res.push_back((c + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);        <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-number">0</span>) c = <span class="hljs-number">1</span>; <span class="hljs-comment">// 有借位</span>        <span class="hljs-keyword">else</span> c = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">while</span>(res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.back()==<span class="hljs-number">0</span>) res.pop_back();<span class="hljs-comment">// 去掉前导 0</span>    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A,<span class="hljs-keyword">int</span> b)</span></span>&#123;    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; A.<span class="hljs-built_in">size</span>();i++)&#123;        c += A[i]*b;        res.push_back(c % <span class="hljs-number">10</span>);        c /= <span class="hljs-number">10</span>;    &#125;      <span class="hljs-keyword">if</span>(c) res.push_back(c);    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h3 id="除法"><a class="markdownIt-Anchor" href="#除法"></a> 除法</h3><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span>&amp; r)</span></span>&#123;    r = <span class="hljs-number">0</span>;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = A.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        r = r * <span class="hljs-number">10</span> + A[i];        res.push_back(r / b);        r = r % b;    &#125;    reverse(res.<span class="hljs-built_in">begin</span>(),res.<span class="hljs-built_in">end</span>());    <span class="hljs-keyword">while</span>(res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.back() == <span class="hljs-number">0</span>) res.pop_back();    <span class="hljs-keyword">return</span> res;&#125;</code></pre><h2 id="0x02-前缀和差分"><a class="markdownIt-Anchor" href="#0x02-前缀和差分"></a> 0x02 前缀和差分</h2><p>将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo><mo>+</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">[l,r] + c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> 操作变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3><p>输入一个长度为n的整数序列。</p><p>接下来输入m个操作，每个操作包含三个整数l, r, c，表示将序列中[l, r]之间的每个数加上c。</p><p>请你输出进行完所有操作后的序列。</p><h4 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>第二行包含n个整数，表示整数序列。</p><p>接下来m行，每行包含三个整数l，r，c，表示一个操作。</p><h4 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h4><p>共一行，包含n个整数，表示最终序列。</p><h4 id="数据范围-2"><a class="markdownIt-Anchor" href="#数据范围-2"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>100000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤100000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>n</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤l≤r≤n,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−1000≤c≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi mathvariant="normal">整</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">序</mi><mi mathvariant="normal">列</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">−1000≤整数序列中元素的值≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">序</span><span class="mord cjk_fallback">列</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例：</h4><p>6 3<br />1 2 2 1 2 1<br />1 3 1<br />3 5 1<br />1 6 1</p><h4 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例：</h4><p>3 4 5 3 4 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> a[M],b[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  =<span class="hljs-number">1</span>;i &lt;=n;i++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);        b[i] = a[i] - a[i<span class="hljs-number">-1</span>]; <span class="hljs-comment">// 计算差分</span>    &#125;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> l,r,c;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;c);        b[l] += c;        b[r+<span class="hljs-number">1</span>] -= c;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) b[i] +=b[i<span class="hljs-number">-1</span>]; <span class="hljs-comment">// 求前缀和</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="矩阵差分"><a class="markdownIt-Anchor" href="#矩阵差分"></a> 矩阵差分</h3><p>输入一个n行m列的整数矩阵，再输入q个操作，每个操作包含五个整数x1, y1, x2, y2, c，其中(x1, y1)和(x2, y2)表示一个子矩阵的左上角坐标和右下角坐标。</p><p>每个操作都要将选中的子矩阵中的每个元素的值加上c。</p><p>请你将进行完所有操作后的矩阵输出。</p><h4 id="输入格式-3"><a class="markdownIt-Anchor" href="#输入格式-3"></a> 输入格式</h4><p>第一行包含整数n,m,q。</p><p>接下来n行，每行包含m个整数，表示整数矩阵。</p><p>接下来q行，每行包含5个整数x1, y1, x2, y2, c，表示一个操作。</p><h4 id="输出格式-3"><a class="markdownIt-Anchor" href="#输出格式-3"></a> 输出格式</h4><p>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。</p><h4 id="数据范围-3"><a class="markdownIt-Anchor" href="#数据范围-3"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>q</mi><mo>≤</mo><mn>100000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤q≤100000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>x</mi><mn>1</mn><mo>≤</mo><mi>x</mi><mn>2</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤x1≤x2≤n,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>y</mi><mn>1</mn><mo>≤</mo><mi>y</mi><mn>2</mn><mo>≤</mo><mi>m</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤y1≤y2≤m,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>1000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−1000≤c≤1000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1000</mn><mo>≤</mo><mi mathvariant="normal">矩</mi><mi mathvariant="normal">阵</mi><mi mathvariant="normal">内</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">值</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">−1000≤矩阵内元素的值≤1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord cjk_fallback">矩</span><span class="mord cjk_fallback">阵</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-3"><a class="markdownIt-Anchor" href="#输入样例-3"></a> 输入样例：</h4><p>3 4 3<br />1 2 2 1<br />3 2 2 1<br />1 1 1 1<br />1 1 2 2 1<br />1 3 2 3 2<br />3 1 3 4 1</p><h4 id="输出样例-3"><a class="markdownIt-Anchor" href="#输出样例-3"></a> 输出样例：</h4><p>2 3 4 1<br />4 3 4 1<br />2 2 2 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1010</span>;<span class="hljs-keyword">int</span> a[M][M],b[M][M];<span class="hljs-comment">// 插入</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1,<span class="hljs-keyword">int</span> x2,<span class="hljs-keyword">int</span> y2,<span class="hljs-keyword">int</span> c)</span></span>&#123;    b[x1][y1] += c;    b[x2 + <span class="hljs-number">1</span>][y1] -= c;    b[x1][y2+<span class="hljs-number">1</span>] -= c;    b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>] += c;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m,q;    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m&gt;&gt;q;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i][j]), insert(i,j,i,j,a[i][j]);    <span class="hljs-keyword">while</span>(q--)&#123;        <span class="hljs-keyword">int</span> x1,x2,y1,y2,c;        <span class="hljs-built_in">cin</span> &gt;&gt; x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;        insert(x1,y1,x2,y2,c);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            b[i][j] += b[i<span class="hljs-number">-1</span>][j] + b[i][j<span class="hljs-number">-1</span>] - b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<span class="hljs-comment">// 求前缀和</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=m;j++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,b[i][j]);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="区间离散"><a class="markdownIt-Anchor" href="#区间离散"></a> 区间离散</h3><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是0。</p><p>现在，我们首先进行 n 次操作，每次操作将某一位置x上的数加c。</p><p>近下来，进行 m 次询问，每个询问包含两个整数l和r，你需要求出在区间[l, r]之间的所有数的和。</p><p>输入格式<br />第一行包含两个整数n和m。</p><p>接下来 n 行，每行包含两个整数x和c。</p><p>再接下里 m 行，每行包含两个整数l和r。</p><h4 id="输出格式-4"><a class="markdownIt-Anchor" href="#输出格式-4"></a> 输出格式</h4><p>共m行，每行输出一个询问中所求的区间内数字和。</p><h4 id="数据范围-4"><a class="markdownIt-Anchor" href="#数据范围-4"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−10^9≤x≤10^9,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">−10^9≤l≤r≤10^9,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>10000</mn><mo>≤</mo><mi>c</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">−10000≤c≤10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-4"><a class="markdownIt-Anchor" href="#输入样例-4"></a> 输入样例</h4><p>3 3<br />1 2<br />3 6<br />7 5<br />1 3<br />4 6<br />7 8</p><h4 id="输出样例-4"><a class="markdownIt-Anchor" href="#输出样例-4"></a> 输出样例</h4><p>8<br />0<br />5</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> PII = pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">3e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> a[M],b[M];<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; alls; <span class="hljs-comment">// 所有使用到的点</span><span class="hljs-built_in">vector</span>&lt;PII&gt; add,query;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,r = alls.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;    <span class="hljs-keyword">while</span>(l &lt; r)&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt;<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(alls[mid]&gt;=x) r = mid;        <span class="hljs-keyword">else</span> l = mid +<span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> l + <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n;i++)&#123;        <span class="hljs-keyword">int</span> x,y;        <span class="hljs-built_in">cin</span> &gt;&gt;x&gt;&gt;y;        add.push_back(&#123;x,y&#125;);        alls.push_back(x);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-keyword">int</span> x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; x&gt;&gt;y;        query.push_back(&#123;x,y&#125;);        alls.push_back(x);        alls.push_back(y);    &#125;    sort(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>());    alls.erase(unique(alls.<span class="hljs-built_in">begin</span>(),alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 去重</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : add)&#123;        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">find</span>(it.first);        a[x] += it.second;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=alls.<span class="hljs-built_in">size</span>();i++)        b[i] = b[i<span class="hljs-number">-1</span>] + a[i];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it : query)&#123;        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">find</span>(it.first),y = <span class="hljs-built_in">find</span>(it.second);        <span class="hljs-built_in">cout</span> &lt;&lt; b[y] - b[x<span class="hljs-number">-1</span>] &lt;&lt;<span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> kmp</h2><p>给定一个模式串S，以及一个模板串P，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p><p>模板串P在模式串S中多次作为子串出现。</p><p>求出模板串P在模式串S中所有出现的位置的起始下标。</p><h4 id="输入格式-4"><a class="markdownIt-Anchor" href="#输入格式-4"></a> 输入格式</h4><p>第一行输入整数N，表示字符串P的长度。</p><p>第二行输入字符串P。</p><p>第三行输入整数M，表示字符串S的长度。</p><p>第四行输入字符串S。</p><h4 id="输出格式-5"><a class="markdownIt-Anchor" href="#输出格式-5"></a> 输出格式</h4><p>共一行，输出所有出现位置的起始下标（下标从0开始计数），整数之间用空格隔开。</p><h4 id="数据范围-5"><a class="markdownIt-Anchor" href="#数据范围-5"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤M≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-5"><a class="markdownIt-Anchor" href="#输入样例-5"></a> 输入样例</h4><p>3<br />aba<br />5<br />ababa</p><h4 id="输出样例-5"><a class="markdownIt-Anchor" href="#输出样例-5"></a> 输出样例</h4><p>0 2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">char</span> s[M],p[M];<span class="hljs-keyword">int</span> ne[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p + <span class="hljs-number">1</span>&gt;&gt;m &gt;&gt; s + <span class="hljs-number">1</span>;    <span class="hljs-comment">/*</span><span class="hljs-comment">        next[] 从1开始, [1,i] 最大前缀与后缀相同长度</span><span class="hljs-comment">        eg:</span><span class="hljs-comment">            p : "ababa"</span><span class="hljs-comment">                 12345</span><span class="hljs-comment">            next 0 1 2 3 4 5</span><span class="hljs-comment">                 0 0 0 1 2 3</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>,j = <span class="hljs-number">0</span>;i &lt;=n;i++)&#123;        <span class="hljs-comment">// 用 p[j + 1] 和 j[i]  匹配 ， 若失败 则 j = next[j]</span>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;        ne[i] = j;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">0</span>;i &lt;=m;i++)&#123;        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) j++;        <span class="hljs-keyword">if</span>(j == n )&#123;            <span class="hljs-comment">// succ</span>            <span class="hljs-built_in">cout</span> &lt;&lt; i - n &lt;&lt;<span class="hljs-string">" "</span>;            j = ne[j];        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><blockquote><p>高效存储和查找字符串<br />维护一个字符串集合，支持两种操作：</p></blockquote><p>“I x”向集合中插入一个字符串x；<br />“Q x”询问一个字符串在集合中出现了多少次。<br />共有N个操作，输入的字符串总长度不超过 105，字符串仅包含小写英文字母。</p><h4 id="输入格式-5"><a class="markdownIt-Anchor" href="#输入格式-5"></a> 输入格式</h4><p>第一行包含整数N，表示操作数。</p><p>接下来N行，每行包含一个操作指令，指令为”I x”或”Q x”中的一种。</p><h4 id="输出格式-6"><a class="markdownIt-Anchor" href="#输出格式-6"></a> 输出格式</h4><p>对于每个询问指令”Q x”，都要输出一个整数作为结果，表示x在集合中出现的次数。</p><p>每个结果占一行。</p><h4 id="数据范围-6"><a class="markdownIt-Anchor" href="#数据范围-6"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤2∗10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-6"><a class="markdownIt-Anchor" href="#输入样例-6"></a> 输入样例</h4><p>5<br />I abc<br />Q abc<br />Q ab<br />I ab<br />Q ab</p><h4 id="输出样例-6"><a class="markdownIt-Anchor" href="#输出样例-6"></a> 输出样例</h4><p>1<br />0<br />1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> son[M][<span class="hljs-number">26</span>],cnt[M],idx; <span class="hljs-comment">// idx : 0 表示根节点</span><span class="hljs-keyword">char</span> str[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; str[i];i++)&#123;        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u] = ++idx;        p = son[p][u];    &#125;    cnt[p] ++;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> u = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        p = son[p][u];    &#125;    <span class="hljs-keyword">return</span> cnt[p];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">char</span> op;        <span class="hljs-built_in">cin</span> &gt;&gt; op;        <span class="hljs-built_in">cin</span>&gt;&gt; str;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'I'</span>)&#123;            insert(str);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; query(str) &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="ac自动机"><a class="markdownIt-Anchor" href="#ac自动机"></a> AC自动机</h2><ul><li>trie+kmp</li></ul><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>原题来自：HDU 2222<br />给定 n 个长度不超过 50 的由小写英文字母组成的单词准备查询，以及一篇长为 m 的文章，问：文中出现了多少个待查询的单词。多组数据。</p><h4 id="输入格式-6"><a class="markdownIt-Anchor" href="#输入格式-6"></a> 输入格式</h4><p>第一行一个整数 T，表示数据组数；</p><p>对于每组数据，第一行一个整数 n，接下去 n 行表示 n 个单词，最后一行输入一个字符串，表示文章。</p><h4 id="输出格式-7"><a class="markdownIt-Anchor" href="#输出格式-7"></a> 输出格式</h4><p>对于每组数据，输出一个数，表示文中出现了多少个待查询的单词。</p><h4 id="数据范围-7"><a class="markdownIt-Anchor" href="#数据范围-7"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup><mi mathvariant="normal">​</mi><mi mathvariant="normal">​</mi></mrow><annotation encoding="application/x-tex">1≤n≤10^4,1≤m≤10^6​​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mord">​</span><span class="mord">​</span></span></span></span></p><h4 id="输入样例-7"><a class="markdownIt-Anchor" href="#输入样例-7"></a> 输入样例：</h4><p>1<br />5<br />she<br />he<br />say<br />shr<br />her<br />yasherhs</p><h4 id="输出样例-7"><a class="markdownIt-Anchor" href="#输出样例-7"></a> 输出样例：</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>,S = <span class="hljs-number">55</span>,M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> tr[N*S][<span class="hljs-number">26</span>],cnt[N*S],idx;<span class="hljs-keyword">char</span> str[M];<span class="hljs-keyword">int</span> q[N*S],ne[N*S];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> j = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!tr[p][j]) tr[p][j] = ++idx;        p = tr[p][j];    &#125;    cnt[p]++;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;        <span class="hljs-comment">// 加入初始的节点</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)        <span class="hljs-keyword">if</span>(tr[<span class="hljs-number">0</span>][i]) q[++tt] = tr[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">// 利用上层节点更新下层</span>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;            <span class="hljs-keyword">int</span> c = tr[t][i];            <span class="hljs-keyword">if</span>(!c) <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">int</span> j = ne[t]; <span class="hljs-comment">// 上层节点的next</span>            <span class="hljs-keyword">while</span>(j &amp;&amp; !tr[j][i]) j = ne[j];            <span class="hljs-keyword">if</span>(tr[j][i]) j = tr[j][i];            ne[c] = j;            q[++tt] = c;        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span> &gt;&gt; T;    <span class="hljs-keyword">while</span>(T--)&#123;        <span class="hljs-built_in">memset</span>(tr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> tr);        <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> cnt);        idx = <span class="hljs-number">0</span>;        <span class="hljs-built_in">memset</span>(ne,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ne);        <span class="hljs-built_in">cin</span> &gt;&gt; n;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; str;            insert();        &#125;        build();        <span class="hljs-built_in">cin</span> &gt;&gt; str;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;str[i];i++)&#123;            <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">'a'</span>;                        <span class="hljs-keyword">while</span>(j &amp;&amp; !tr[j][t]) j = ne[j];            <span class="hljs-keyword">if</span>(tr[j][t]) j = tr[j][t];                        <span class="hljs-comment">// 加上所有后缀单词的数量</span>            <span class="hljs-keyword">int</span> p = j;            <span class="hljs-keyword">while</span>(p)&#123;                res += cnt[p];                cnt[p] = <span class="hljs-number">0</span>;                p = ne[p];            &#125;                    &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    &#125;</code></pre><ul><li>优化版</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">10010</span>,S = <span class="hljs-number">55</span>,M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> tr[N*S][<span class="hljs-number">26</span>],cnt[N*S],idx;<span class="hljs-keyword">char</span> str[M];<span class="hljs-keyword">int</span> q[N*S],ne[N*S];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;str[i];i++)&#123;        <span class="hljs-keyword">int</span> j = str[i] - <span class="hljs-string">'a'</span>;        <span class="hljs-keyword">if</span>(!tr[p][j]) tr[p][j] = ++idx;        p = tr[p][j];    &#125;    cnt[p]++;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh = <span class="hljs-number">0</span>,tt = <span class="hljs-number">-1</span>;        <span class="hljs-comment">// 加入初始的节点</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)        <span class="hljs-keyword">if</span>(tr[<span class="hljs-number">0</span>][i]) q[++tt] = tr[<span class="hljs-number">0</span>][i];    <span class="hljs-comment">// 利用上层节点更新下层</span>    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">26</span>;i++)&#123;            <span class="hljs-keyword">int</span> p = tr[t][i];            <span class="hljs-keyword">if</span>(!p) tr[t][i] = tr[ne[t]][i]; <span class="hljs-comment">// 直接跳回上层节点的i</span>            <span class="hljs-keyword">else</span>&#123;                ne[p] = tr[ne[t]][i];                 q[++tt] = p;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span> &gt;&gt; T;    <span class="hljs-keyword">while</span>(T--)&#123;        <span class="hljs-built_in">memset</span>(tr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> tr);        <span class="hljs-built_in">memset</span>(cnt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> cnt);        idx = <span class="hljs-number">0</span>;        <span class="hljs-built_in">memset</span>(ne,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ne);        <span class="hljs-built_in">cin</span> &gt;&gt; n;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt; str;            insert();        &#125;        build();        <span class="hljs-built_in">cin</span> &gt;&gt; str;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;str[i];i++)&#123;            <span class="hljs-keyword">int</span> t = str[i] - <span class="hljs-string">'a'</span>;            j = tr[j][t];                        <span class="hljs-keyword">int</span> p = j;            <span class="hljs-keyword">while</span>(p)&#123;                res += cnt[p];                cnt[p] = <span class="hljs-number">0</span>;                p = ne[p];            &#125;                    &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    &#125;</code></pre><h2 id="字符串hash"><a class="markdownIt-Anchor" href="#字符串hash"></a> 字符串hash</h2><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>时间求解某个子串的hash值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">base</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span>通常取131或13331</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ULL;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1000005</span>,base=<span class="hljs-number">131</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">char</span> str[N];ULL p[N],h[N];<span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> h[r]-h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str+<span class="hljs-number">1</span>);    <span class="hljs-keyword">int</span> len=<span class="hljs-built_in">strlen</span>(str+<span class="hljs-number">1</span>);    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)    &#123;        h[i]=h[i<span class="hljs-number">-1</span>]*base+str[i]-<span class="hljs-string">'a'</span>+<span class="hljs-number">1</span>;        p[i]=p[i<span class="hljs-number">-1</span>]*base;    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><p>用于动态维护序列的区间信息</p><ul><li>单点修改 update(x, v)</li><li>区间查询 query(l, r)</li></ul><p>存储结构</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>    <span class="hljs-keyword">int</span> l,r;  <span class="hljs-comment">//区间范围</span>    <span class="hljs-keyword">int</span> sum,...; <span class="hljs-comment">// 维护信息,例如，max,min,sum...</span>&#125;st[N*<span class="hljs-number">4</span>];</code></pre><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == x &amp;&amp; st[u].r == x) st[u] = &#123;x,x,v&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(x &lt;= mid) update(<span class="hljs-number">2</span>*u,x,v);        <span class="hljs-keyword">else</span> update(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,x,v);        pushup(u); <span class="hljs-comment">// 由子节点更新当前节点</span>    &#125;&#125;</code></pre><pre><code class="hljs c++"><span class="hljs-function">Node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == l &amp;&amp; st[u].r == r) <span class="hljs-keyword">return</span> st[u];    <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(r &lt;= mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u,l,r);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,l,r);    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">auto</span> left = query(<span class="hljs-number">2</span>*u,l,mid);        <span class="hljs-keyword">auto</span> right = query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        Node res;        pushup(res,left,right);        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h3 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h3><p>给定长度为N的数列A，以及M条指令，每条指令可能是以下两种之一：</p><p>1、“1 x y”，查询区间 [x,y] 中的最大连续子段和，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>≤</mo><mi>l</mi><mo>≤</mo><mi>r</mi><mo>≤</mo><mi>y</mi></mrow></munder><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\max \limits_{x\leq l\leq r \leq y} \sum_{i=l}^{r} A[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.692508em;vertical-align:-0.8882159999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span style="top:-2.0478920000000005em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mrel mtight">≤</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882159999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p><p>2、“2 x y”，把 A[x] 改成 y。</p><p>对于每个查询指令，输出一个整数表示答案。</p><h4 id="输入格式-7"><a class="markdownIt-Anchor" href="#输入格式-7"></a> 输入格式</h4><p>第一行两个整数N,M。</p><p>第二行N个整数A[i]。</p><p>接下来M行每行3个整数k,x,y，k=1表示查询（此时如果x&gt;y，请交换x,y），k=2表示修改。</p><h4 id="输出格式-8"><a class="markdownIt-Anchor" href="#输出格式-8"></a> 输出格式</h4><p>对于每个查询指令输出一个整数表示答案。</p><p>每个答案占一行。</p><h4 id="数据范围-8"><a class="markdownIt-Anchor" href="#数据范围-8"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>≤</mo><mn>500000</mn><mo separator="true">,</mo><mi>M</mi><mo>≤</mo><mn>100000</mn></mrow><annotation encoding="application/x-tex">N≤500000,M≤100000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></p><h4 id="输入样例-8"><a class="markdownIt-Anchor" href="#输入样例-8"></a> 输入样例：</h4><p>5 3<br />1 2 -3 4 5<br />1 2 3<br />2 2 -1<br />1 3 2</p><h4 id="输出样例-8"><a class="markdownIt-Anchor" href="#输出样例-8"></a> 输出样例：</h4><p>2<br />-1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">500010</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>    <span class="hljs-keyword">int</span> l,r;    <span class="hljs-keyword">int</span> tmax,lmax,rmax,sum;&#125;st[N*<span class="hljs-number">4</span>];<span class="hljs-keyword">int</span> d[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(Node&amp; root,Node&amp; l,Node&amp; r)</span></span>&#123;    root.l = l.l;    root.r = r.r;    root.sum = l.sum + r.sum;    root.lmax = <span class="hljs-built_in">max</span>(l.lmax,l.sum + r.lmax);    root.rmax = <span class="hljs-built_in">max</span>(r.rmax,r.sum + l.rmax);    root.tmax = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(l.tmax,r.tmax),l.rmax + r.lmax);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>&#123;    pushup(st[u],st[u*<span class="hljs-number">2</span>],st[<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>]);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(l == r) st[u] = &#123;l,r,d[l],d[l],d[l],d[l]&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;        build(<span class="hljs-number">2</span>*u,l,mid),build(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        pushup(u);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> v)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == x &amp;&amp; st[u].r == x) st[u] = &#123;x,x,v,v,v,v&#125;;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(x &lt;= mid) update(<span class="hljs-number">2</span>*u,x,v);        <span class="hljs-keyword">else</span> update(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,x,v);        pushup(u);    &#125;&#125;<span class="hljs-function">Node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;    <span class="hljs-keyword">if</span>(st[u].l == l &amp;&amp; st[u].r == r) <span class="hljs-keyword">return</span> st[u];    <span class="hljs-keyword">int</span> mid = st[u].l + st[u].r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(r &lt;= mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u,l,r);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid) <span class="hljs-keyword">return</span> query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,l,r);    <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">auto</span> left = query(<span class="hljs-number">2</span>*u,l,mid);        <span class="hljs-keyword">auto</span> right = query(<span class="hljs-number">2</span>*u + <span class="hljs-number">1</span>,mid + <span class="hljs-number">1</span>,r);        Node res;        pushup(res,left,right);        <span class="hljs-keyword">return</span> res;    &#125;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">cin</span> &gt;&gt; d[i];    build(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">int</span> k,x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt; x &gt;&gt; y;        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">if</span>(x &gt; y) swap(x,y);            <span class="hljs-keyword">auto</span> res = query(<span class="hljs-number">1</span>,x,y);                        <span class="hljs-built_in">cout</span> &lt;&lt; res.tmax &lt;&lt; <span class="hljs-built_in">endl</span>;                    &#125;<span class="hljs-keyword">else</span>&#123;            update(<span class="hljs-number">1</span>,x,y);        &#125;            &#125;    &#125;</code></pre><h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2><p>给定一个包含n个点（编号为1~n）的无向图，初始时图中没有边。</p><p>现在要进行m个操作，操作共有三种：</p><p>“C a b”，在点a和点b之间连一条边，a和b可能相等；<br />“Q1 a b”，询问点a和点b是否在同一个连通块中，a和b可能相等；<br />“Q2 a”，询问点a所在连通块中点的数量；</p><h4 id="输入格式-8"><a class="markdownIt-Anchor" href="#输入格式-8"></a> 输入格式</h4><p>第一行输入整数n和m。</p><p>接下来m行，每行包含一个操作指令，指令为“C a b”，“Q1 a b”或“Q2 a”中的一种。</p><h4 id="输出格式-9"><a class="markdownIt-Anchor" href="#输出格式-9"></a> 输出格式</h4><p>对于每个询问指令”Q1 a b”，如果a和b在同一个连通块中，则输出“Yes”，否则输出“No”。</p><p>对于每个询问指令“Q2 a”，输出一个整数表示点a所在连通块中点的数量</p><p>每个结果占一行。</p><h4 id="数据范围-9"><a class="markdownIt-Anchor" href="#数据范围-9"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-9"><a class="markdownIt-Anchor" href="#输入样例-9"></a> 输入样例</h4><p>5 5<br />C 1 2<br />Q1 1 2<br />Q2 1<br />C 2 5<br />Q2 5</p><h4 id="输出样例-9"><a class="markdownIt-Anchor" href="#输出样例-9"></a> 输出样例</h4><p>Yes<br />2<br />3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> p[M];<span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span>[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);    <span class="hljs-keyword">return</span> p[x];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n,m;    <span class="hljs-built_in">cin</span> &gt;&gt;n&gt;&gt;m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        p[i] = i,<span class="hljs-built_in">size</span>[i] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-keyword">char</span> op[<span class="hljs-number">3</span>];        <span class="hljs-keyword">int</span> a,b;        <span class="hljs-built_in">cin</span> &gt;&gt;op;        <span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>] == <span class="hljs-string">'C'</span>)&#123;            <span class="hljs-built_in">cin</span> &gt;&gt;a&gt;&gt;b;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 若在同一集合则跳过</span>            <span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(b)] += <span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(a)];            p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>(op[<span class="hljs-number">1</span>] == <span class="hljs-string">'1'</span>)&#123;                <span class="hljs-built_in">cin</span> &gt;&gt;a&gt;&gt;b;                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b))&#123;                    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Yes"</span>;                &#125;<span class="hljs-keyword">else</span>                    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;                <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-built_in">cin</span> &gt;&gt;a;                <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-built_in">size</span>[<span class="hljs-built_in">find</span>(a)] &lt;&lt;<span class="hljs-string">'\n'</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="模拟堆"><a class="markdownIt-Anchor" href="#模拟堆"></a> 模拟堆</h2><p>维护一个集合，初始时集合为空，支持如下几种操作：</p><p>“I x”，插入一个数x；<br />“PM”，输出当前集合中的最小值；<br />“DM”，删除当前集合中的最小值（数据保证此时的最小值唯一）；<br />“D k”，删除第k个插入的数；<br />“C k x”，修改第k个插入的数，将其变为x；<br />现在要进行N次操作，对于所有第2个操作，输出当前集合的最小值。</p><h4 id="输入格式-9"><a class="markdownIt-Anchor" href="#输入格式-9"></a> 输入格式</h4><p>第一行包含整数N。</p><p>接下来N行，每行包含一个操作指令，操作指令为”I x”，”PM”，”DM”，”D k”或”C k x”中的一种。</p><h4 id="输出格式-10"><a class="markdownIt-Anchor" href="#输出格式-10"></a> 输出格式</h4><p>对于每个输出指令“PM”，输出一个结果，表示当前集合中的最小值。</p><p>每个结果占一行。</p><h4 id="数据范围-10"><a class="markdownIt-Anchor" href="#数据范围-10"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">−10^9≤x≤10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span><br />数据保证合法。</p><h4 id="输入样例-10"><a class="markdownIt-Anchor" href="#输入样例-10"></a> 输入样例</h4><p>8<br />I -10<br />PM<br />I -10<br />D 1<br />C 2 8<br />I 6<br />PM<br />DM</p><h4 id="输出样例-10"><a class="markdownIt-Anchor" href="#输出样例-10"></a> 输出样例</h4><p>-10<br />6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],<span class="hljs-built_in">size</span>;<span class="hljs-keyword">int</span> hp[M]; <span class="hljs-comment">// 堆中下标-&gt;插入下标</span><span class="hljs-keyword">int</span> ph[M]; <span class="hljs-comment">// 插入下标-&gt;堆中下标</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>&#123;    swap(ph[hp[x]],ph[hp[y]]);    swap(hp[x],hp[y]);    swap(h[x],h[y]);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> t = x;    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * x &lt;= <span class="hljs-built_in">size</span> &amp;&amp; h[<span class="hljs-number">2</span> * x] &lt; h[t]) t = <span class="hljs-number">2</span> * x;    <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * x + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">size</span> &amp;&amp; h[<span class="hljs-number">2</span> * x +<span class="hljs-number">1</span>] &lt; h[t]) t = <span class="hljs-number">2</span> * x + <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(x != t)&#123;        heap_swap(t,x);        down(t);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">while</span>(x/<span class="hljs-number">2</span> &amp;&amp; h[x/<span class="hljs-number">2</span>] &gt; h[x])&#123;        heap_swap(x/<span class="hljs-number">2</span>,x);        x/=<span class="hljs-number">2</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-built_in">string</span> op;    <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; op;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"I"</span>)&#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">cin</span> &gt;&gt; x;            h[++<span class="hljs-built_in">size</span>] = x;            ++m;            ph[m] = <span class="hljs-built_in">size</span>;            hp[<span class="hljs-built_in">size</span>] = m;            up(<span class="hljs-built_in">size</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"PM"</span>)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"DM"</span>)&#123;            heap_swap(<span class="hljs-number">1</span>,<span class="hljs-built_in">size</span>);            <span class="hljs-built_in">size</span>--;            down(<span class="hljs-number">1</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-string">"D"</span>)&#123;            <span class="hljs-keyword">int</span> x;            <span class="hljs-built_in">cin</span> &gt;&gt; x;            x = ph[x];  <span class="hljs-comment">// 保存删除位置</span>            heap_swap(x,<span class="hljs-built_in">size</span>);            <span class="hljs-built_in">size</span>--;            down(x),up(x);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">int</span> k,x;            <span class="hljs-built_in">cin</span> &gt;&gt; k &gt;&gt;x;            h[ph[k]] = x;            down(ph[k]),up(ph[k]);        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="模拟散列表"><a class="markdownIt-Anchor" href="#模拟散列表"></a> 模拟散列表</h2><p>维护一个集合，支持如下几种操作：</p><p>“I x”，插入一个数x；<br />“Q x”，询问数x是否在集合中出现过；<br />现在要进行N次操作，对于每个询问操作输出对应的结果。</p><h4 id="输入格式-10"><a class="markdownIt-Anchor" href="#输入格式-10"></a> 输入格式</h4><p>第一行包含整数N，表示操作数量。</p><p>接下来N行，每行包含一个操作指令，操作指令为”I x”，”Q x”中的一种。</p><h4 id="输出格式-11"><a class="markdownIt-Anchor" href="#输出格式-11"></a> 输出格式</h4><p>对于每个询问指令“Q x”，输出一个询问结果，如果x在集合中出现过，则输出“Yes”，否则输出“No”。</p><p>每个结果占一行。</p><h4 id="数据范围-11"><a class="markdownIt-Anchor" href="#数据范围-11"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤N≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">−10^9≤x≤10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-11"><a class="markdownIt-Anchor" href="#输入样例-11"></a> 输入样例</h4><p>5<br />I 1<br />I 2<br />I 3<br />Q 2<br />Q 5</p><h4 id="输出样例-11"><a class="markdownIt-Anchor" href="#输出样例-11"></a> 输出样例</h4><p>Yes<br />No</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">3</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-comment">// chining</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> hv = (x % M + M )%M;    e[idx] = x,ne[idx] = h[hv], h[hv] = idx++;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> hv = (x % M + M )%M;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[hv];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;        <span class="hljs-keyword">if</span>(e[i] == x) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)*M);    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">char</span> op;    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; x;        <span class="hljs-keyword">if</span>(op == <span class="hljs-string">'I'</span>) insert(x);        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Yes"</span>;            <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;            <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2><p>给定一个n个点m条边的有向图，图中可能存在重边和自环。</p><p>请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出-1。</p><p>若一个由图中所有点构成的序列A满足：对于图中的每条边(x, y)，x在A中都出现在y之前，则称A是该图的一个拓扑序列。</p><h4 id="输入格式-11"><a class="markdownIt-Anchor" href="#输入格式-11"></a> 输入格式</h4><p>第一行包含两个整数n和m</p><p>接下来m行，每行包含两个整数x和y，表示存在一条从点x到点y的有向边(x, y)。</p><h4 id="输出格式-12"><a class="markdownIt-Anchor" href="#输出格式-12"></a> 输出格式</h4><p>共一行，如果存在拓扑序列，则输出拓扑序列。</p><p>否则输出-1。</p><h4 id="数据范围-12"><a class="markdownIt-Anchor" href="#数据范围-12"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-12"><a class="markdownIt-Anchor" href="#输入样例-12"></a> 输入样例</h4><p>3 3<br />1 2<br />2 3<br />1 3</p><h4 id="输出样例-12"><a class="markdownIt-Anchor" href="#输出样例-12"></a> 输出样例</h4><p>1 2 3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> q[M],d[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> hh =<span class="hljs-number">0</span> ,tt = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)        <span class="hljs-keyword">if</span>(!d[i]) q[++tt] = i;    <span class="hljs-keyword">while</span>(hh &lt;= tt)&#123;        <span class="hljs-keyword">int</span> t = q[hh++];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            d[j] --;            <span class="hljs-keyword">if</span>(!d[j]) q[++tt] = j;        &#125;    &#125;    <span class="hljs-keyword">return</span> tt == n<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b;        add(a,b);        d[b] ++;    &#125;    <span class="hljs-keyword">if</span>(topsort())&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)            <span class="hljs-built_in">cout</span> &lt;&lt; q[i] &lt;&lt;<span class="hljs-string">" "</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"-1"</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="最短路"><a class="markdownIt-Anchor" href="#最短路"></a> 最短路</h2><h3 id="朴素dijkstra-on2"><a class="markdownIt-Anchor" href="#朴素dijkstra-on2"></a> 朴素Dijkstra <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h3><ul><li>没有负权边</li><li>稠密图 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>&lt;</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">m &lt; n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br />给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。</li></ul><p>请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。</p><h4 id="输入格式-12"><a class="markdownIt-Anchor" href="#输入格式-12"></a> 输入格式</h4><p>第一行包含整数n和m。</p><p>接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-13"><a class="markdownIt-Anchor" href="#输出格式-13"></a> 输出格式</h4><p>输出一个整数，表示1号点到n号点的最短距离。</p><p>如果路径不存在，则输出-1。</p><h4 id="数据范围-13"><a class="markdownIt-Anchor" href="#数据范围-13"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤10^5,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br />图中涉及边长均不超过10000。</p><h4 id="输入样例-13"><a class="markdownIt-Anchor" href="#输入样例-13"></a> 输入样例</h4><p>3 3<br />1 2 2<br />2 3 1<br />1 3 4</p><h4 id="输出样例-13"><a class="markdownIt-Anchor" href="#输出样例-13"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">510</span>;<span class="hljs-keyword">int</span> g[M][M],d[M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x7f7f7f7f</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">djstra</span><span class="hljs-params">()</span></span>&#123;    d[<span class="hljs-number">1</span>] =<span class="hljs-number">0</span> ;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || d[j] &lt; d[t])) t = j;        &#125;        st[t] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n; j++)&#123;            <span class="hljs-keyword">if</span>(g[t][j] != INF) d[j] = <span class="hljs-built_in">min</span>(d[j],d[t] + g[t][j]);        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(g));    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b&gt;&gt; c;        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b],c);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; djstra();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="堆优化dijkstra-omlogn"><a class="markdownIt-Anchor" href="#堆优化dijkstra-omlogn"></a> 堆优化Dijkstra <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h3><ul><li>没有负权边</li><li>稀疏图<br />给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为非负值。</li></ul><p>请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。</p><h4 id="输入格式-13"><a class="markdownIt-Anchor" href="#输入格式-13"></a> 输入格式</h4><p>第一行包含整数n和m。</p><p>接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-14"><a class="markdownIt-Anchor" href="#输出格式-14"></a> 输出格式</h4><p>输出一个整数，表示1号点到n号点的最短距离。</p><p>如果路径不存在，则输出-1。</p><h4 id="数据范围-14"><a class="markdownIt-Anchor" href="#数据范围-14"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br />图中涉及边长均不小于0，且不超过10000。</p><h4 id="输入样例-14"><a class="markdownIt-Anchor" href="#输入样例-14"></a> 输入样例</h4><p>3 3<br />1 2 2<br />2 3 1<br />1 3 4</p><h4 id="输出样例-14"><a class="markdownIt-Anchor" href="#输出样例-14"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx,w[M];<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x7f7f7f7f</span><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; PII;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">djs</span><span class="hljs-params">()</span></span>&#123;    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    priority_queue&lt;PII,<span class="hljs-built_in">vector</span>&lt;PII&gt;,greater&lt;PII&gt;&gt; pq;    pq.push(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);    <span class="hljs-keyword">while</span>(pq.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">auto</span> t= pq.top();pq.pop();        <span class="hljs-keyword">if</span>(st[t.second]) <span class="hljs-keyword">continue</span>;        st[t.second] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t.second]; i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            <span class="hljs-keyword">if</span>(d[j] &gt; d[t.second] + w[i])&#123;                d[j] = d[t.second] + w[i];                pq.push(&#123;d[j],j&#125;);            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    ios::sync_with_stdio(<span class="hljs-literal">false</span>);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt; a&gt;&gt; b&gt;&gt; c;        add(a,b,c);    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; djs();    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="b-f算法-onm"><a class="markdownIt-Anchor" href="#b-f算法-onm"></a> B-F算法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><ul><li>允许负权边</li><li>用于求限制k条边的最短路</li></ul><p>给定一个n个点m条边的有向图，图中可能存在重边和自环， 边权可能为负数。</p><p>请你求出从1号点到n号点的最多经过k条边的最短距离，如果无法从1号点走到n号点，输出impossible。</p><p>注意：图中可能 存在负权回路 。</p><h4 id="输入格式-14"><a class="markdownIt-Anchor" href="#输入格式-14"></a> 输入格式</h4><p>第一行包含三个整数n，m，k。</p><p>接下来m行，每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。</p><h4 id="输出格式-15"><a class="markdownIt-Anchor" href="#输出格式-15"></a> 输出格式</h4><p>输出一个整数，表示从1号点到n号点的最多经过k条边的最短距离。</p><p>如果不存在满足条件的路径，则输出“impossible”。</p><h4 id="数据范围-15"><a class="markdownIt-Anchor" href="#数据范围-15"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>k</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n,k≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>10000</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤10000,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br />任意边长的绝对值不超过10000。</p><h4 id="输入样例-15"><a class="markdownIt-Anchor" href="#输入样例-15"></a> 输入样例</h4><p>3 3 1<br />1 2 1<br />2 3 1<br />1 3 3</p><h4 id="输出样例-15"><a class="markdownIt-Anchor" href="#输出样例-15"></a> 输出样例</h4><p>3</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> a,b,w;&#125;edges[M];<span class="hljs-keyword">int</span> n,m,k;<span class="hljs-keyword">bool</span> st[N];<span class="hljs-keyword">int</span> d[N];<span class="hljs-keyword">int</span> backup[N]; <span class="hljs-comment">// 备份上一次循环的结果</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bf</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; k;i++)&#123;        <span class="hljs-built_in">memcpy</span>(backup,d,<span class="hljs-keyword">sizeof</span>(d));        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;m;j++)&#123;            <span class="hljs-comment">// 使用上一次循环结果更新， 防止连续更新</span>            <span class="hljs-keyword">if</span>(d[edges[j].b] &gt; backup[edges[j].a] + edges[j].w)&#123;                d[edges[j].b] = backup[edges[j].a] + edges[j].w;            &#125;        &#125;    &#125;    <span class="hljs-comment">// 由于负权边 d[n] 可能比INF小</span>    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">0x7f7f7f7f</span> /<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m&gt;&gt;k;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt; b &gt;&gt; c;        edges[i] = &#123;a,b,c&#125;;    &#125;    <span class="hljs-keyword">int</span> res = bf();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="spfa-平均om-最坏onm"><a class="markdownIt-Anchor" href="#spfa-平均om-最坏onm"></a> spfa 平均<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span> 最坏<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><blockquote><p>bf算法每次遍历所有边，spfa仅更新距离发生变化的边</p></blockquote><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],w[M],idx;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span>&#123;    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx ++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span>(d));    d[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;    q.push(<span class="hljs-number">1</span>);    st[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;        <span class="hljs-keyword">int</span> t = q.front();        q.pop();        st[t] = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[t];i != <span class="hljs-number">-1</span>;i = ne[i])&#123;            <span class="hljs-keyword">int</span> j = e[i];            <span class="hljs-keyword">if</span>(d[j] &gt; d[t] + w[i])&#123;                d[j] = d[t] + w[i];                <span class="hljs-keyword">if</span>(!st[j]) &#123;                    st[j] = <span class="hljs-number">1</span>;                    q.push(j);                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(d[n] &gt; <span class="hljs-number">0x7f7f7f7f</span> /<span class="hljs-number">2</span> ) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    <span class="hljs-keyword">return</span> d[n];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(h));    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        add(a,b,c);    &#125;    <span class="hljs-keyword">int</span> res = spfa();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2><h3 id="朴素prim-on2"><a class="markdownIt-Anchor" href="#朴素prim-on2"></a> 朴素prim  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h3><ul><li>用于稠密图</li></ul><p>给定一个n个点m条边的无向图，图中可能存在重边和自环，边权可能为负数。</p><p>求最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><p>给定一张边带权的无向图G=(V, E)，其中V表示图中点的集合，E表示图中边的集合，n=|V|，m=|E|。</p><p>由V中的全部n个顶点和E中n-1条边构成的无向连通子图被称为G的一棵生成树，其中边的权值之和最小的生成树被称为无向图G的最小生成树。</p><h4 id="输入格式-15"><a class="markdownIt-Anchor" href="#输入格式-15"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含三个整数u，v，w，表示点u和点v之间存在一条权值为w的边。</p><h4 id="输出格式-16"><a class="markdownIt-Anchor" href="#输出格式-16"></a> 输出格式</h4><p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><h4 id="数据范围-16"><a class="markdownIt-Anchor" href="#数据范围-16"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤10^5,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br />图中涉及边的边权的绝对值均不超过10000。</p><h4 id="输入样例-16"><a class="markdownIt-Anchor" href="#输入样例-16"></a> 输入样例</h4><p>4 5<br />1 2 1<br />1 3 2<br />1 4 3<br />2 3 2<br />3 4 4</p><h4 id="输出样例-16"><a class="markdownIt-Anchor" href="#输出样例-16"></a> 输出样例</h4><p>6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">510</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF =<span class="hljs-number">0x7f7f7f7f</span>;<span class="hljs-keyword">int</span> g[M][M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> d[M];<span class="hljs-keyword">bool</span> st[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 循环n次，每次加入一个点到mst集合</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt; n;i++)&#123;        <span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j&lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || d[j] &lt; d[t])) t =  j;        &#125;        <span class="hljs-keyword">if</span>(i &amp;&amp; d[t] == INF) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;         st[t] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(i) res += d[t];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)&#123;            <span class="hljs-keyword">if</span>(g[t][j] != INF)&#123;                d[j] = <span class="hljs-built_in">min</span>(d[j],g[t][j]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0x7f</span>,<span class="hljs-keyword">sizeof</span> d);    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j &lt;=n;j++)            <span class="hljs-keyword">if</span>(i == j) g[i][j] = <span class="hljs-number">0</span>;            <span class="hljs-keyword">else</span> g[i][j] = INF;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        g[a][b] = g[b][a] = <span class="hljs-built_in">min</span>(g[a][b],c);    &#125;    <span class="hljs-keyword">int</span> res = prim();    <span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="克鲁斯卡尔-omlogm"><a class="markdownIt-Anchor" href="#克鲁斯卡尔-omlogm"></a> 克鲁斯卡尔 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></h3><ul><li>用于稀疏图<br />给定一个n个点m条边的无向图，图中可能存在重边和自环，边权可能为负数。</li></ul><p>求最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><p>给定一张边带权的无向图G=(V, E)，其中V表示图中点的集合，E表示图中边的集合，n=|V|，m=|E|。</p><p>由V中的全部n个顶点和E中n-1条边构成的无向连通子图被称为G的一棵生成树，其中边的权值之和最小的生成树被称为无向图G的最小生成树。</p><h4 id="输入格式-16"><a class="markdownIt-Anchor" href="#输入格式-16"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含三个整数u，v，w，表示点u和点v之间存在一条权值为w的边。</p><h4 id="输出格式-17"><a class="markdownIt-Anchor" href="#输出格式-17"></a> 输出格式</h4><p>共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出impossible。</p><h4 id="数据范围-17"><a class="markdownIt-Anchor" href="#数据范围-17"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>105</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤105,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">5</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤m≤2∗10^5,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><br />图中涉及边的边权的绝对值均不超过1000。</p><h4 id="输入样例-17"><a class="markdownIt-Anchor" href="#输入样例-17"></a> 输入样例</h4><p>4 5<br />1 2 1<br />1 3 2<br />1 4 3<br />2 3 2<br />3 4 4</p><h4 id="输出样例-17"><a class="markdownIt-Anchor" href="#输出样例-17"></a> 输出样例</h4><p>6</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>&#123;</span>    <span class="hljs-keyword">int</span> a,b,w;    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> Edge&amp; e)&#123;        <span class="hljs-keyword">return</span> w &lt; e.w;    &#125;&#125;e[M];<span class="hljs-keyword">int</span> n,m;<span class="hljs-keyword">int</span> p[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span>(p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);    <span class="hljs-keyword">return</span> p[x];&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)        p[i] = i;    <span class="hljs-keyword">int</span> a,b,c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m;i++)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b&gt;&gt;c;        e[i] = &#123;a,b,c&#125;;    &#125;    sort(e,e + m);    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>,cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; m;i++)&#123;        a = <span class="hljs-built_in">find</span>(e[i].a),b = <span class="hljs-built_in">find</span>(e[i].b);        <span class="hljs-keyword">if</span>(a != b)&#123;            p[a] = b;            cnt ++;            res += e[i].w;        &#125;;    &#125;    <span class="hljs-keyword">if</span>(cnt != n<span class="hljs-number">-1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"impossible"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="二分图"><a class="markdownIt-Anchor" href="#二分图"></a> 二分图</h2><ul><li>充要条件: 没有奇数环</li></ul><h3 id="染色法判定二分图"><a class="markdownIt-Anchor" href="#染色法判定二分图"></a> 染色法判定二分图</h3><p>给定一个n个点m条边的无向图，图中可能存在重边和自环。</p><p>请你判断这个图是否是二分图。</p><h4 id="输入格式-17"><a class="markdownIt-Anchor" href="#输入格式-17"></a> 输入格式</h4><p>第一行包含两个整数n和m。</p><p>接下来m行，每行包含两个整数u和v，表示点u和点v之间存在一条边。</p><h4 id="输出格式-18"><a class="markdownIt-Anchor" href="#输出格式-18"></a> 输出格式</h4><p>如果给定图是二分图，则输出“Yes”，否则输出“No”。</p><h4 id="数据范围-18"><a class="markdownIt-Anchor" href="#数据范围-18"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n,m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-18"><a class="markdownIt-Anchor" href="#输入样例-18"></a> 输入样例</h4><p>4 4<br />1 3<br />1 4<br />2 3<br />2 4</p><h4 id="输出样例-18"><a class="markdownIt-Anchor" href="#输出样例-18"></a> 输出样例</h4><p>Yes</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> color[M];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx] = h[a],h[a] = idx++;&#125;<span class="hljs-keyword">int</span> n,m;<span class="hljs-comment">// 将点u染成c色</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> c)</span></span>&#123;    color[u] = c;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u];i !=<span class="hljs-number">-1</span>;i = ne[i])&#123;        <span class="hljs-keyword">int</span> j = e[i];        <span class="hljs-keyword">if</span>(!color[j])&#123;            <span class="hljs-keyword">if</span>(!dfs(j,<span class="hljs-number">3</span> - c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);    <span class="hljs-built_in">cin</span> &gt;&gt; n&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        add(a,b),add(b,a);    &#125;    <span class="hljs-keyword">bool</span> res = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!color[i])&#123;            <span class="hljs-keyword">if</span>(!dfs(i,<span class="hljs-number">1</span>))&#123;                res = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(res) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Yes"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No"</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="最大匹配"><a class="markdownIt-Anchor" href="#最大匹配"></a> 最大匹配</h3><p>给定一个二分图，其中左半部包含n1个点（编号1<sub>n1），右半部包含n2个点（编号1</sub>n2），二分图共包含m条边。</p><p>数据保证任意一条边的两个端点都不可能在同一部分中。</p><p>请你求出二分图的最大匹配数。</p><blockquote><p>二分图的匹配：给定一个二分图G，在G的一个子图M中，M的边集{E}中的任意两条边都不依附于同一个顶点，则称M是一个匹配。<br />二分图的最大匹配：所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><h4 id="输入格式-18"><a class="markdownIt-Anchor" href="#输入格式-18"></a> 输入格式</h4><p>第一行包含三个整数 n1、 n2 和 m。</p><p>接下来m行，每行包含两个整数u和v，表示左半部点集中的点u和右半部点集中的点v之间存在一条边。</p><h4 id="输出格式-19"><a class="markdownIt-Anchor" href="#输出格式-19"></a> 输出格式</h4><p>输出一个整数，表示二分图的最大匹配数。</p><h4 id="数据范围-19"><a class="markdownIt-Anchor" href="#数据范围-19"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mn>2</mn><mo>≤</mo><mn>500</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n1,n2≤500,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>u</mi><mo>≤</mo><mi>n</mi><mn>1</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤u≤n1,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>v</mi><mo>≤</mo><mi>n</mi><mn>2</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤v≤n2,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤m≤10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-19"><a class="markdownIt-Anchor" href="#输入样例-19"></a> 输入样例</h4><p>2 2 4<br />1 1<br />1 2<br />2 1<br />2 2</p><h4 id="输出样例-19"><a class="markdownIt-Anchor" href="#输出样例-19"></a> 输出样例</h4><p>2</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">510</span>,M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> h[M],e[M],ne[M],idx;<span class="hljs-keyword">int</span> n1,n2,m;<span class="hljs-keyword">bool</span> st[N];<span class="hljs-keyword">int</span> match[N];<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;    e[idx] = b,ne[idx]= h[a],h[a] = idx++;&#125;<span class="hljs-comment">// 为x找到对应点</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])&#123;        <span class="hljs-keyword">int</span> j = e[i];        <span class="hljs-keyword">if</span>(!st[j])&#123; <span class="hljs-comment">// 女生j没有访问过</span>            st[j] = <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))&#123; <span class="hljs-comment">// 女生j没有男友或给j的男友找到新的女友</span>                match[j] = x;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);    <span class="hljs-built_in">cin</span> &gt;&gt; n1&gt;&gt; n2&gt;&gt;m;    <span class="hljs-keyword">int</span> a,b;    <span class="hljs-keyword">while</span>(m--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        add(a,b);    &#125;    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;=n1;i++)&#123;        <span class="hljs-built_in">memset</span>(st,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> st); <span class="hljs-comment">// 将女生初始化，每个女生仅访问一次</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)) res++;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="简单数学"><a class="markdownIt-Anchor" href="#简单数学"></a> 简单数学</h2><ul><li>对于正整数n，仅有一个大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的素数</li></ul><h3 id="筛素数"><a class="markdownIt-Anchor" href="#筛素数"></a> 筛素数</h3><h4 id="埃氏筛法-onloglogn"><a class="markdownIt-Anchor" href="#埃氏筛法-onloglogn"></a> 埃氏筛法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nloglogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span>+ <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> prime[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i])&#123;            prime[cnt++];            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i;j &lt;=n;j +=i) <span class="hljs-comment">// 筛掉i的倍数</span>                st[j] = <span class="hljs-literal">true</span>;        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; cnt;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="线性筛法-on"><a class="markdownIt-Anchor" href="#线性筛法-on"></a> 线性筛法 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></h4><ul><li>x只会被最小质因子筛掉</li></ul><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span>+ <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> prime[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i]) prime[cnt++] = i;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;prime[j] &lt;= n/i;j++)&#123;            st[prime[j] * i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// prime[j] 小于i的所有质因子，则prime[j] 为 prime[j]*i 的最小质因子</span>            <span class="hljs-keyword">if</span>(i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// prime[j] 是i的最小质因子,因此，prime[j] 是i*prime[j] 的最小质因子</span>        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; cnt;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h3><h4 id="求约数-onsqrtn"><a class="markdownIt-Anchor" href="#求约数-onsqrtn"></a> 求约数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h4><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; p;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">int</span> x;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= x/i;i++)&#123;            <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;                p.push_back(i);                <span class="hljs-keyword">if</span>(i != x/i)p.push_back(x/i);            &#125;        &#125;        sort(p.<span class="hljs-built_in">begin</span>(),p.<span class="hljs-built_in">end</span>());        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : p)            <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt;<span class="hljs-string">" "</span>;        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;        p.<span class="hljs-built_in">clear</span>();    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">算</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">基</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">定</mi><mi mathvariant="normal">理</mi><mo>:</mo><mi>N</mi><mo>=</mo><munder><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><msubsup><mi>p</mi><mi>i</mi><msub><mi>α</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">算数基本定理:N=\prod_{i=1}p_i^{\alpha_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">基</span><span class="mord cjk_fallback">本</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="约数个数"><a class="markdownIt-Anchor" href="#约数个数"></a> 约数个数</h4><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>中约数的个数等于每个数倍数的个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mfrac><mi>n</mi><mi>i</mi></mfrac><mo>=</mo><mi>n</mi><mi>l</mi><mi>n</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n}{\frac{n}{i}} = nlnn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149292em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord mathdefault">n</span></span></span></span></p></blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>α</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\prod_{i=1}^{n}(\alpha_i+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> +<span class="hljs-number">7</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=x/i;i++)&#123;            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                x/=i;                cnt ++;            &#125;            <span class="hljs-keyword">if</span>(cnt) <span class="hljs-built_in">map</span>[i] += cnt;        &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">map</span>[x] += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> a : <span class="hljs-built_in">map</span>)&#123;        res = res *(a.second + <span class="hljs-number">1</span>) %mod;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="约数之和"><a class="markdownIt-Anchor" href="#约数之和"></a> 约数之和</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><munder><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow></munder><msubsup><mi>p</mi><mi>i</mi><msub><mi>α</mi><mi>j</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">\prod_{i=1}^{n}\sum_{j=0}p_i^{\alpha_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0651740000000003em;vertical-align:-1.413777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.843512em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.2421200000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>给定n个正整数ai，请你输出这些数的乘积的约数之和，答案对109+7取模。</p><h4 id="输入格式-19"><a class="markdownIt-Anchor" href="#输入格式-19"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含一个整数ai。</p><h4 id="输出格式-20"><a class="markdownIt-Anchor" href="#输出格式-20"></a> 输出格式</h4><p>输出一个整数，表示所给正整数的乘积的约数之和，答案需对109+7取模。</p><h4 id="数据范围-20"><a class="markdownIt-Anchor" href="#数据范围-20"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤100,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mi>i</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>109</mn></mrow><annotation encoding="application/x-tex">1≤ai≤2∗109</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord">0</span><span class="mord">9</span></span></span></span></p><h4 id="输入样例-20"><a class="markdownIt-Anchor" href="#输入样例-20"></a> 输入样例</h4><p>3<br />2<br />6<br />8</p><h4 id="输出样例-20"><a class="markdownIt-Anchor" href="#输出样例-20"></a> 输出样例</h4><p>252</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= x/i;i++)&#123;            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                x/=i;                cnt ++;            &#125;            <span class="hljs-keyword">if</span>(cnt) <span class="hljs-built_in">map</span>[i] += cnt;        &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">map</span>[x] += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> t : <span class="hljs-built_in">map</span>)&#123;        <span class="hljs-keyword">long</span> p = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> a = t.first,b = t.second;        <span class="hljs-keyword">while</span>(b--)&#123;            p = (p * a + <span class="hljs-number">1</span>)%mod;        &#125;        res = res * p %mod;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="欧几里得算法"><a class="markdownIt-Anchor" href="#欧几里得算法"></a> 欧几里得算法</h4><ul><li>if d/a,d/b then d/(ax+by)</li></ul><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(b,a\ mod \ b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(a - c*b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo separator="true">,</mo><mi>d</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>−</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mo>&gt;</mo><mi>d</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>d</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d/a,d/b-&gt;d/(a-c*b)-&gt;d/(a-d*b+c*b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span><br />公约数集合相同</p></blockquote><h3 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h3><ul><li>互质:公约数只有1的两个整数</li></ul><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>:</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">中</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">数</mi></mrow><annotation encoding="application/x-tex">\phi(n):[1,n]中与n互质的数的个数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span></span></span></span><br />给定n个正整数ai，请你求出每个数的欧拉函数。</p></blockquote><h4 id="欧拉函数的定义"><a class="markdownIt-Anchor" href="#欧拉函数的定义"></a> 欧拉函数的定义</h4><p>1 ~ n 中与 n 互质的数的个数被称为欧拉函数，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。<br />若在算数基本定理中， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>p</mi><mi>x</mi><msub><mi>a</mi><mi>x</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">N=p_1^{a_1}p_2^{a_2}...p_x^{a_x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> ，则：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n) = n\prod_{i=1}^x(1-\frac{1}{p_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><h4 id="输入格式-20"><a class="markdownIt-Anchor" href="#输入格式-20"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含一个正整数ai。</p><h4 id="输出格式-21"><a class="markdownIt-Anchor" href="#输出格式-21"></a> 输出格式</h4><p>输出共n行，每行输出一个正整数ai的欧拉函数。</p><h4 id="数据范围-21"><a class="markdownIt-Anchor" href="#数据范围-21"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">1≤n≤100,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mi>i</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∗</mi><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1≤ai≤2∗10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">∗</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-21"><a class="markdownIt-Anchor" href="#输入样例-21"></a> 输入样例</h4><p>3<br />3<br />6<br />8</p><h4 id="输出样例-21"><a class="markdownIt-Anchor" href="#输出样例-21"></a> 输出样例</h4><p>2<br />2<br />4</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> x;        <span class="hljs-built_in">cin</span> &gt;&gt; x;        <span class="hljs-keyword">int</span> res = x;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=x/i;i++)            <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>)&#123;                res = res / i * (i - <span class="hljs-number">1</span>);                <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;                    x/=i;                &#125;            &#125;        <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">1</span>) res = res /x*(x<span class="hljs-number">-1</span>);        <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="筛法求欧拉函数"><a class="markdownIt-Anchor" href="#筛法求欧拉函数"></a> 筛法求欧拉函数</h3><p>给定一个正整数n，求1~n中每个数的欧拉函数之和。</p><h4 id="输入格式-21"><a class="markdownIt-Anchor" href="#输入格式-21"></a> 输入格式</h4><p>共一行，包含一个整数n。</p><h4 id="输出格式-22"><a class="markdownIt-Anchor" href="#输出格式-22"></a> 输出格式</h4><p>共一行，包含一个整数，表示1~n中每个数的欧拉函数之和。</p><h4 id="数据范围-22"><a class="markdownIt-Anchor" href="#数据范围-22"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">1≤n≤10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="输入样例-22"><a class="markdownIt-Anchor" href="#输入样例-22"></a> 输入样例</h4><p>6</p><h4 id="输出样例-22"><a class="markdownIt-Anchor" href="#输出样例-22"></a> 输出样例</h4><p>12</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<span class="hljs-keyword">bool</span> st[M];<span class="hljs-keyword">int</span> primes[M];<span class="hljs-keyword">int</span> cnt;<span class="hljs-keyword">int</span> phi[M];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;=n;i++)&#123;        <span class="hljs-keyword">if</span>(!st[i])&#123;            primes[cnt++] = i;            phi[i] = i<span class="hljs-number">-1</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)&#123;            st[primes[j] * i] = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">if</span>(i % primes[j] == <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">// primes[j] 为i的质因子</span>                phi[i * primes[j]] = phi[i]*primes[j];                <span class="hljs-keyword">break</span>;            &#125;            phi[i * primes[j]] = phi[i]*(primes[j] - <span class="hljs-number">1</span>);        &#125;    &#125;    <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i &lt;=n;i++) res += phi[i];    <span class="hljs-built_in">cout</span> &lt;&lt; res;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="欧拉定理"><a class="markdownIt-Anchor" href="#欧拉定理"></a> 欧拉定理</h3><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mo separator="true">,</mo><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a,n互质,a^{\phi(n)}\equiv1(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h4 id="证明"><a class="markdownIt-Anchor" href="#证明"></a> 证明</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>t</mi><mtext> </mtext><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">中</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">为</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">let\ [1,n]中与n互质的数为a_1,a_2,...,a_{\phi(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">为</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><mi>a</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>a</mi><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>a</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mi mathvariant="normal">与</mi><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mi mathvariant="normal">为</mi><mi mathvariant="normal">同</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">集</mi><mi mathvariant="normal">合</mi></mrow><annotation encoding="application/x-tex">则aa_1,aa_2,...,aa_{\phi(n)}\ mod\ n 与a_1,a_2,...a_{\phi(n)}为同一集合</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04964em;vertical-align:-0.3551999999999999em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">与</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">集</span><span class="mord cjk_fallback">合</span></span></span></span></p><blockquote><p>反证：若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mi>a</mi><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">则</mi><mi>a</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">且</mi><mi>a</mi><mi mathvariant="normal">与</mi><mi>n</mi><mi mathvariant="normal">互</mi><mi mathvariant="normal">质</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">则</mi><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">矛</mi><mi mathvariant="normal">盾</mi></mrow><annotation encoding="application/x-tex">aa_i=aa_j,则a(a_i-a_j)\equiv0(mod\ n),且a与n互质，则a_i=a_j,矛盾</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">则</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">且</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">互</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">矛</span><span class="mord cjk_fallback">盾</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{\phi(n)}(a_1a_2...a_{\phi(n)})\equiv(a_1a_2...a_{\phi(n)}) (mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2431999999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">则</mi><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">则a^{\phi(n)}\equiv1(mod\ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">则</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p></blockquote><h3 id="扩展欧几里得"><a class="markdownIt-Anchor" href="#扩展欧几里得"></a> 扩展欧几里得</h3><p>给定n对正整数ai,bi，对于每对数，求出一组xi,yi，使其满足ai∗xi+bi∗yi=gcd(ai,bi)。</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>b</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = gcd(b,a-\lfloor{\frac{a}{b}}\rfloor*b,y,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">即</mi><mo>:</mo><mi>x</mi><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">即:x(a-\lfloor{\frac{a}{b}}\rfloor*b)+by = d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo>∗</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">xa+(y-\lfloor{\frac{a}{b}}\rfloor*x) = d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></p></blockquote><h4 id="输入格式-22"><a class="markdownIt-Anchor" href="#输入格式-22"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含两个整数ai,bi。</p><h4 id="输出格式-23"><a class="markdownIt-Anchor" href="#输出格式-23"></a> 输出格式</h4><p>输出共n行，对于每组ai,bi，求出一组满足条件的xi,yi，每组结果占一行。</p><p>本题答案不唯一，输出任意满足条件的xi,yi均可。</p><h4 id="数据范围-23"><a class="markdownIt-Anchor" href="#数据范围-23"></a> 数据范围</h4><p>1≤n≤105,<br />1≤ai,bi≤2∗109</p><h4 id="输入样例-23"><a class="markdownIt-Anchor" href="#输入样例-23"></a> 输入样例</h4><p>2<br />4 6<br />8 18</p><h4 id="输出样例-23"><a class="markdownIt-Anchor" href="#输出样例-23"></a> 输出样例</h4><p>-1 1<br />-2 1</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span>&amp;x,<span class="hljs-keyword">int</span>&amp;y)</span></span>&#123;    <span class="hljs-keyword">if</span>(!b)&#123;        x = <span class="hljs-number">1</span>,y= <span class="hljs-number">0</span>;         <span class="hljs-keyword">return</span> a;    &#125;    <span class="hljs-keyword">int</span> d = exgcd(b,a%b,y,x);    y -= a/b*x;    <span class="hljs-keyword">return</span> d;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-keyword">int</span> a,b,x,y;        <span class="hljs-built_in">cin</span> &gt;&gt; a&gt;&gt;b;        exgcd(a,b,x,y);        <span class="hljs-built_in">cout</span> &lt;&lt; x&lt;&lt;<span class="hljs-string">" "</span>&lt;&lt;y&lt;&lt;<span class="hljs-built_in">endl</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="高斯消元"><a class="markdownIt-Anchor" href="#高斯消元"></a> 高斯消元</h3><p>输入一个包含n个方程n个未知数的线性方程组。</p><p>方程组中的系数为实数。</p><p>求解这个方程组。</p><h4 id="输入格式-23"><a class="markdownIt-Anchor" href="#输入格式-23"></a> 输入格式</h4><p>第一行包含整数n。</p><p>接下来n行，每行包含n+1个实数，表示一个方程的n个系数以及等号右侧的常数。</p><h4 id="输出格式-24"><a class="markdownIt-Anchor" href="#输出格式-24"></a> 输出格式</h4><p>如果给定线性方程组存在唯一解，则输出共n行，其中第i行输出第i个未知数的解，结果保留两位小数。</p><p>如果给定线性方程组存在无数解，则输出“Infinite group solutions”。</p><p>如果给定线性方程组无解，则输出“No solution”。</p><h4 id="数据范围-24"><a class="markdownIt-Anchor" href="#数据范围-24"></a> 数据范围</h4><p>1≤n≤100,<br />所有输入系数以及常数均保留两位小数，绝对值均不超过100。</p><h4 id="输入样例-24"><a class="markdownIt-Anchor" href="#输入样例-24"></a> 输入样例</h4><p>3<br />1.00 2.00 -1.00 -6.00<br />2.00 1.00 -3.00 -9.00<br />-1.00 -1.00 2.00 7.00</p><h4 id="输出样例-24"><a class="markdownIt-Anchor" href="#输出样例-24"></a> 输出样例</h4><p>1.00<br />-2.00<br />3.00</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">110</span>;<span class="hljs-keyword">double</span> m[M][M];<span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> esp = <span class="hljs-number">1e-5</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;=n;j++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf "</span>,m[i][j]);        <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"\n"</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;c &lt;n;c++)&#123;        <span class="hljs-keyword">int</span> t = r;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r;i &lt; n;i++)            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][c]) &gt; <span class="hljs-built_in">fabs</span>(m[t][c])) t = i;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[t][c]) &lt; esp) <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = c;i &lt;=n;i++) swap(m[t][i],m[r][i]);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n;i &gt;=c;i--) m[r][i] /= m[r][c];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r + <span class="hljs-number">1</span>;i &lt; n;i++)&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][c]) &gt; esp)&#123;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = n;j &gt;=c;j--)                    m[i][j] -= m[r][j]*m[i][c];            &#125;        &#125;        r++;    &#125;    <span class="hljs-keyword">if</span>(r &lt; n)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = r;i &lt; n;i++)            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(m[i][n]) &gt; esp)                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>;j &lt; n;j++)            m[i][n] -= m[j][n]*m[i][j];    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;=n;j++)            <span class="hljs-built_in">cin</span> &gt;&gt; m[i][j];    <span class="hljs-keyword">int</span> t = solve();    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) <span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"Infinite group solutions"</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t == <span class="hljs-number">2</span>)<span class="hljs-built_in">cout</span> &lt;&lt;<span class="hljs-string">"No solution"</span>;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.2lf\n"</span>,m[i][n]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/03/hello-world/"/>
    <url>/2020/07/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;functional&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;mutex&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> RET,<span class="hljs-keyword">typename</span>... ARGS&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Obserable</span>&#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-keyword">using</span> Functor = function&lt;<span class="hljs-keyword">void</span> (ARGS...)&gt;;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(Functor&amp;&amp; func)</span></span>&#123;        <span class="hljs-function">lock_guard&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;        functors_.push_back(forward&lt;Functor&gt;(func));    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">(ARGS&amp;&amp;... args)</span></span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> Functor&amp; f :functors_)&#123;            f(args...);        &#125;    &#125;<span class="hljs-keyword">private</span>:    mutex mutex_;    <span class="hljs-built_in">vector</span>&lt;Functor&gt; functors_;&#125;;</code></pre><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>w</mi><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\int_{-\infty}^{\infty}f(t)e^{-jwt}dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.384573em;vertical-align:-0.970281em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.970281em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span></span></span></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
